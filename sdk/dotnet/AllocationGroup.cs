// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.CastAI
{
    [CastAIResourceType("castai:index:AllocationGroup")]
    public partial class AllocationGroup : global::Pulumi.CustomResource
    {
        /// <summary>
        /// List of CAST AI cluster ids
        /// </summary>
        [Output("clusterIds")]
        public Output<ImmutableArray<string>> ClusterIds { get; private set; } = null!;

        /// <summary>
        /// Labels used to select workloads to track
        /// </summary>
        [Output("labels")]
        public Output<ImmutableDictionary<string, string>?> Labels { get; private set; } = null!;

        /// <summary>
        /// Operator with which to connect the labels
        /// 	OR (default) - workload needs to have at least one label to be included
        /// 	AND - workload needs to have all the labels to be included
        /// </summary>
        [Output("labelsOperator")]
        public Output<string?> LabelsOperator { get; private set; } = null!;

        /// <summary>
        /// Allocation group name
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// List of cluster namespaces to track
        /// </summary>
        [Output("namespaces")]
        public Output<ImmutableArray<string>> Namespaces { get; private set; } = null!;


        /// <summary>
        /// Create a AllocationGroup resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public AllocationGroup(string name, AllocationGroupArgs? args = null, CustomResourceOptions? options = null)
            : base("castai:index:AllocationGroup", name, args ?? new AllocationGroupArgs(), MakeResourceOptions(options, ""))
        {
        }

        private AllocationGroup(string name, Input<string> id, AllocationGroupState? state = null, CustomResourceOptions? options = null)
            : base("castai:index:AllocationGroup", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/castai",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing AllocationGroup resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static AllocationGroup Get(string name, Input<string> id, AllocationGroupState? state = null, CustomResourceOptions? options = null)
        {
            return new AllocationGroup(name, id, state, options);
        }
    }

    public sealed class AllocationGroupArgs : global::Pulumi.ResourceArgs
    {
        [Input("clusterIds")]
        private InputList<string>? _clusterIds;

        /// <summary>
        /// List of CAST AI cluster ids
        /// </summary>
        public InputList<string> ClusterIds
        {
            get => _clusterIds ?? (_clusterIds = new InputList<string>());
            set => _clusterIds = value;
        }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// Labels used to select workloads to track
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// Operator with which to connect the labels
        /// 	OR (default) - workload needs to have at least one label to be included
        /// 	AND - workload needs to have all the labels to be included
        /// </summary>
        [Input("labelsOperator")]
        public Input<string>? LabelsOperator { get; set; }

        /// <summary>
        /// Allocation group name
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("namespaces")]
        private InputList<string>? _namespaces;

        /// <summary>
        /// List of cluster namespaces to track
        /// </summary>
        public InputList<string> Namespaces
        {
            get => _namespaces ?? (_namespaces = new InputList<string>());
            set => _namespaces = value;
        }

        public AllocationGroupArgs()
        {
        }
        public static new AllocationGroupArgs Empty => new AllocationGroupArgs();
    }

    public sealed class AllocationGroupState : global::Pulumi.ResourceArgs
    {
        [Input("clusterIds")]
        private InputList<string>? _clusterIds;

        /// <summary>
        /// List of CAST AI cluster ids
        /// </summary>
        public InputList<string> ClusterIds
        {
            get => _clusterIds ?? (_clusterIds = new InputList<string>());
            set => _clusterIds = value;
        }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// Labels used to select workloads to track
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// Operator with which to connect the labels
        /// 	OR (default) - workload needs to have at least one label to be included
        /// 	AND - workload needs to have all the labels to be included
        /// </summary>
        [Input("labelsOperator")]
        public Input<string>? LabelsOperator { get; set; }

        /// <summary>
        /// Allocation group name
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("namespaces")]
        private InputList<string>? _namespaces;

        /// <summary>
        /// List of cluster namespaces to track
        /// </summary>
        public InputList<string> Namespaces
        {
            get => _namespaces ?? (_namespaces = new InputList<string>());
            set => _namespaces = value;
        }

        public AllocationGroupState()
        {
        }
        public static new AllocationGroupState Empty => new AllocationGroupState();
    }
}
