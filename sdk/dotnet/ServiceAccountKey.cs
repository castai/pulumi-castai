// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.CastAI
{
    [CastAIResourceType("castai:organization:ServiceAccountKey")]
    public partial class ServiceAccountKey : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Whether the service account key is active. Defaults to true.
        /// </summary>
        [Output("active")]
        public Output<bool?> Active { get; private set; } = null!;

        /// <summary>
        /// The expiration time of the service account key in RFC3339 format. Defaults to an empty string.
        /// </summary>
        [Output("expiresAt")]
        public Output<string?> ExpiresAt { get; private set; } = null!;

        /// <summary>
        /// Last time the service account key was used.
        /// </summary>
        [Output("lastUsedAt")]
        public Output<string> LastUsedAt { get; private set; } = null!;

        /// <summary>
        /// Name of the service account key.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// ID of the organization.
        /// </summary>
        [Output("organizationId")]
        public Output<string> OrganizationId { get; private set; } = null!;

        /// <summary>
        /// Prefix of the service account key.
        /// </summary>
        [Output("prefix")]
        public Output<string> Prefix { get; private set; } = null!;

        /// <summary>
        /// ID of the service account.
        /// </summary>
        [Output("serviceAccountId")]
        public Output<string> ServiceAccountId { get; private set; } = null!;

        /// <summary>
        /// The token of the service account key used for authentication.
        /// </summary>
        [Output("token")]
        public Output<string> Token { get; private set; } = null!;


        /// <summary>
        /// Create a ServiceAccountKey resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ServiceAccountKey(string name, ServiceAccountKeyArgs args, CustomResourceOptions? options = null)
            : base("castai:organization:ServiceAccountKey", name, args ?? new ServiceAccountKeyArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ServiceAccountKey(string name, Input<string> id, ServiceAccountKeyState? state = null, CustomResourceOptions? options = null)
            : base("castai:organization:ServiceAccountKey", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/castai",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ServiceAccountKey resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ServiceAccountKey Get(string name, Input<string> id, ServiceAccountKeyState? state = null, CustomResourceOptions? options = null)
        {
            return new ServiceAccountKey(name, id, state, options);
        }
    }

    public sealed class ServiceAccountKeyArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Whether the service account key is active. Defaults to true.
        /// </summary>
        [Input("active")]
        public Input<bool>? Active { get; set; }

        /// <summary>
        /// The expiration time of the service account key in RFC3339 format. Defaults to an empty string.
        /// </summary>
        [Input("expiresAt")]
        public Input<string>? ExpiresAt { get; set; }

        /// <summary>
        /// Name of the service account key.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// ID of the organization.
        /// </summary>
        [Input("organizationId", required: true)]
        public Input<string> OrganizationId { get; set; } = null!;

        /// <summary>
        /// ID of the service account.
        /// </summary>
        [Input("serviceAccountId", required: true)]
        public Input<string> ServiceAccountId { get; set; } = null!;

        public ServiceAccountKeyArgs()
        {
        }
        public static new ServiceAccountKeyArgs Empty => new ServiceAccountKeyArgs();
    }

    public sealed class ServiceAccountKeyState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Whether the service account key is active. Defaults to true.
        /// </summary>
        [Input("active")]
        public Input<bool>? Active { get; set; }

        /// <summary>
        /// The expiration time of the service account key in RFC3339 format. Defaults to an empty string.
        /// </summary>
        [Input("expiresAt")]
        public Input<string>? ExpiresAt { get; set; }

        /// <summary>
        /// Last time the service account key was used.
        /// </summary>
        [Input("lastUsedAt")]
        public Input<string>? LastUsedAt { get; set; }

        /// <summary>
        /// Name of the service account key.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// ID of the organization.
        /// </summary>
        [Input("organizationId")]
        public Input<string>? OrganizationId { get; set; }

        /// <summary>
        /// Prefix of the service account key.
        /// </summary>
        [Input("prefix")]
        public Input<string>? Prefix { get; set; }

        /// <summary>
        /// ID of the service account.
        /// </summary>
        [Input("serviceAccountId")]
        public Input<string>? ServiceAccountId { get; set; }

        /// <summary>
        /// The token of the service account key used for authentication.
        /// </summary>
        [Input("token")]
        public Input<string>? Token { get; set; }

        public ServiceAccountKeyState()
        {
        }
        public static new ServiceAccountKeyState Empty => new ServiceAccountKeyState();
    }
}
