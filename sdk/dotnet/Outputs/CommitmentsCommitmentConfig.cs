// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.CastAI.Outputs
{

    [OutputType]
    public sealed class CommitmentsCommitmentConfig
    {
        /// <summary>
        /// Allowed usage of the commitment. The value is between 0 (0%) and 1 (100%).
        /// </summary>
        public readonly double? AllowedUsage;
        /// <summary>
        /// List of assigned clusters for the commitment. If prioritization is enabled, the order of the assignments indicates the priority. The first assignment has the highest priority.
        /// </summary>
        public readonly ImmutableArray<Outputs.CommitmentsCommitmentConfigAssignment> Assignments;
        /// <summary>
        /// Matcher used to map config to a commitment.
        /// </summary>
        public readonly Outputs.CommitmentsCommitmentConfigMatcher Matcher;
        /// <summary>
        /// If enabled, it's possible to assign priorities to the assigned clusters.
        /// </summary>
        public readonly bool? Prioritization;
        /// <summary>
        /// Scaling strategy of the commitment in CAST AI. One of: Default, CPUBased, RamBased
        /// </summary>
        public readonly string? ScalingStrategy;
        /// <summary>
        /// Status of the commitment in CAST AI.
        /// </summary>
        public readonly string? Status;

        [OutputConstructor]
        private CommitmentsCommitmentConfig(
            double? allowedUsage,

            ImmutableArray<Outputs.CommitmentsCommitmentConfigAssignment> assignments,

            Outputs.CommitmentsCommitmentConfigMatcher matcher,

            bool? prioritization,

            string? scalingStrategy,

            string? status)
        {
            AllowedUsage = allowedUsage;
            Assignments = assignments;
            Matcher = matcher;
            Prioritization = prioritization;
            ScalingStrategy = scalingStrategy;
            Status = status;
        }
    }
}
