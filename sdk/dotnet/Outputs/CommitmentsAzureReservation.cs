// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.CastAI.Outputs
{

    [OutputType]
    public sealed class CommitmentsAzureReservation
    {
        /// <summary>
        /// Allowed usage of the commitment. The value is between 0 (0%) and 1 (100%).
        /// </summary>
        public readonly double? AllowedUsage;
        /// <summary>
        /// List of assigned clusters for the commitment. If prioritization is enabled, the order of the assignments indicates the priority. The first assignment has the highest priority.
        /// </summary>
        public readonly ImmutableArray<Outputs.CommitmentsAzureReservationAssignment> Assignments;
        /// <summary>
        /// Number of instances covered by the reservation.
        /// </summary>
        public readonly int Count;
        /// <summary>
        /// End timestamp of the CUD.
        /// </summary>
        public readonly string EndTimestamp;
        /// <summary>
        /// ID of the commitment in CAST AI.
        /// </summary>
        public readonly string? Id;
        /// <summary>
        /// Type of the instance covered by the reservation.
        /// </summary>
        public readonly string InstanceType;
        /// <summary>
        /// Name of the CUD.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Plan of the reservation.
        /// </summary>
        public readonly string Plan;
        /// <summary>
        /// If enabled, it's possible to assign priorities to the assigned clusters.
        /// </summary>
        public readonly bool? Prioritization;
        /// <summary>
        /// Region in which the CUD is available.
        /// </summary>
        public readonly string Region;
        /// <summary>
        /// ID of the reservation in Azure.
        /// </summary>
        public readonly string ReservationId;
        /// <summary>
        /// Status of the reservation in Azure.
        /// </summary>
        public readonly string ReservationStatus;
        /// <summary>
        /// Scaling strategy of the commitment in CAST AI. One of: Default, CPUBased, RamBased
        /// </summary>
        public readonly string? ScalingStrategy;
        public readonly string Scope;
        public readonly string ScopeResourceGroup;
        public readonly string ScopeSubscription;
        /// <summary>
        /// Start timestamp of the CUD.
        /// </summary>
        public readonly string StartTimestamp;
        /// <summary>
        /// Status of the commitment in CAST AI.
        /// </summary>
        public readonly string? Status;

        [OutputConstructor]
        private CommitmentsAzureReservation(
            double? allowedUsage,

            ImmutableArray<Outputs.CommitmentsAzureReservationAssignment> assignments,

            int count,

            string endTimestamp,

            string? id,

            string instanceType,

            string name,

            string plan,

            bool? prioritization,

            string region,

            string reservationId,

            string reservationStatus,

            string? scalingStrategy,

            string scope,

            string scopeResourceGroup,

            string scopeSubscription,

            string startTimestamp,

            string? status)
        {
            AllowedUsage = allowedUsage;
            Assignments = assignments;
            Count = count;
            EndTimestamp = endTimestamp;
            Id = id;
            InstanceType = instanceType;
            Name = name;
            Plan = plan;
            Prioritization = prioritization;
            Region = region;
            ReservationId = reservationId;
            ReservationStatus = reservationStatus;
            ScalingStrategy = scalingStrategy;
            Scope = scope;
            ScopeResourceGroup = scopeResourceGroup;
            ScopeSubscription = scopeSubscription;
            StartTimestamp = startTimestamp;
            Status = status;
        }
    }
}
