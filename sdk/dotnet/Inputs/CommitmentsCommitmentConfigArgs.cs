// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.CastAI.Inputs
{

    public sealed class CommitmentsCommitmentConfigArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Allowed usage of the commitment. The value is between 0 (0%) and 1 (100%).
        /// </summary>
        [Input("allowedUsage")]
        public Input<double>? AllowedUsage { get; set; }

        [Input("assignments")]
        private InputList<Inputs.CommitmentsCommitmentConfigAssignmentArgs>? _assignments;

        /// <summary>
        /// List of assigned clusters for the commitment. If prioritization is enabled, the order of the assignments indicates the priority. The first assignment has the highest priority.
        /// </summary>
        public InputList<Inputs.CommitmentsCommitmentConfigAssignmentArgs> Assignments
        {
            get => _assignments ?? (_assignments = new InputList<Inputs.CommitmentsCommitmentConfigAssignmentArgs>());
            set => _assignments = value;
        }

        /// <summary>
        /// Matcher used to map config to a commitment.
        /// </summary>
        [Input("matcher", required: true)]
        public Input<Inputs.CommitmentsCommitmentConfigMatcherArgs> Matcher { get; set; } = null!;

        /// <summary>
        /// If enabled, it's possible to assign priorities to the assigned clusters.
        /// </summary>
        [Input("prioritization")]
        public Input<bool>? Prioritization { get; set; }

        /// <summary>
        /// Scaling strategy of the commitment in CAST AI. One of: Default, CPUBased, RamBased
        /// </summary>
        [Input("scalingStrategy")]
        public Input<string>? ScalingStrategy { get; set; }

        /// <summary>
        /// Status of the commitment in CAST AI.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        public CommitmentsCommitmentConfigArgs()
        {
        }
        public static new CommitmentsCommitmentConfigArgs Empty => new CommitmentsCommitmentConfigArgs();
    }
}
