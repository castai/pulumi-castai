// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.CastAI
{
    /// <summary>
    /// EKS cluster resource allows connecting an existing EKS cluster to CAST AI.
    /// </summary>
    [CastAIResourceType("castai:aws:EksCluster")]
    public partial class EksCluster : global::Pulumi.CustomResource
    {
        /// <summary>
        /// AWS access key ID of the CAST AI IAM account
        /// </summary>
        [Output("accessKeyId")]
        public Output<string?> AccessKeyId { get; private set; } = null!;

        /// <summary>
        /// ID of AWS account
        /// </summary>
        [Output("accountId")]
        public Output<string> AccountId { get; private set; } = null!;

        [Output("agentToken")]
        public Output<string> AgentToken { get; private set; } = null!;

        /// <summary>
        /// AWS ARN for assume role that should be used instead of IAM account
        /// </summary>
        [Output("assumeRoleArn")]
        public Output<string?> AssumeRoleArn { get; private set; } = null!;

        /// <summary>
        /// CAST AI internal credentials ID
        /// </summary>
        [Output("credentialsId")]
        public Output<string> CredentialsId { get; private set; } = null!;

        /// <summary>
        /// Should CAST AI remove nodes managed by CAST AI on disconnect
        /// </summary>
        [Output("deleteNodesOnDisconnect")]
        public Output<bool?> DeleteNodesOnDisconnect { get; private set; } = null!;

        /// <summary>
        /// Overrides the IP address to use for DNS queries within the cluster. Defaults to 10.100.0.10 or 172.20.0.10 based on the IP address of the primary interface
        /// </summary>
        [Output("dnsClusterIp")]
        public Output<string?> DnsClusterIp { get; private set; } = null!;

        /// <summary>
        /// AWS ARN of the instance profile to be used by CAST AI
        /// </summary>
        [Output("instanceProfileArn")]
        public Output<string?> InstanceProfileArn { get; private set; } = null!;

        /// <summary>
        /// name of your EKS cluster
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Optional custom security groups for the cluster. If not set security groups from the EKS cluster configuration are used.
        /// </summary>
        [Output("overrideSecurityGroups")]
        public Output<ImmutableArray<string>> OverrideSecurityGroups { get; private set; } = null!;

        /// <summary>
        /// AWS region where the cluster is placed
        /// </summary>
        [Output("region")]
        public Output<string> Region { get; private set; } = null!;

        /// <summary>
        /// AWS secret access key of the CAST AI IAM account
        /// </summary>
        [Output("secretAccessKey")]
        public Output<string?> SecretAccessKey { get; private set; } = null!;

        /// <summary>
        /// IDs of security groups that are used by CAST AI
        /// </summary>
        [Output("securityGroups")]
        public Output<ImmutableArray<string>> SecurityGroups { get; private set; } = null!;

        /// <summary>
        /// Accepted values are base64 encoded SSH public key or AWS key pair ID.
        /// </summary>
        [Output("sshPublicKey")]
        public Output<string?> SshPublicKey { get; private set; } = null!;

        /// <summary>
        /// Custom subnets for the cluster. If not set subnets from the EKS cluster configuration are used.
        /// </summary>
        [Output("subnets")]
        public Output<ImmutableArray<string>> Subnets { get; private set; } = null!;

        /// <summary>
        /// Tags which should be added to CAST AI nodes
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;


        /// <summary>
        /// Create a EksCluster resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public EksCluster(string name, EksClusterArgs args, CustomResourceOptions? options = null)
            : base("castai:aws:EksCluster", name, args ?? new EksClusterArgs(), MakeResourceOptions(options, ""))
        {
        }

        private EksCluster(string name, Input<string> id, EksClusterState? state = null, CustomResourceOptions? options = null)
            : base("castai:aws:EksCluster", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/castai",
                AdditionalSecretOutputs =
                {
                    "accessKeyId",
                    "agentToken",
                    "secretAccessKey",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing EksCluster resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static EksCluster Get(string name, Input<string> id, EksClusterState? state = null, CustomResourceOptions? options = null)
        {
            return new EksCluster(name, id, state, options);
        }
    }

    public sealed class EksClusterArgs : global::Pulumi.ResourceArgs
    {
        [Input("accessKeyId")]
        private Input<string>? _accessKeyId;

        /// <summary>
        /// AWS access key ID of the CAST AI IAM account
        /// </summary>
        public Input<string>? AccessKeyId
        {
            get => _accessKeyId;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _accessKeyId = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// ID of AWS account
        /// </summary>
        [Input("accountId", required: true)]
        public Input<string> AccountId { get; set; } = null!;

        /// <summary>
        /// AWS ARN for assume role that should be used instead of IAM account
        /// </summary>
        [Input("assumeRoleArn")]
        public Input<string>? AssumeRoleArn { get; set; }

        /// <summary>
        /// Should CAST AI remove nodes managed by CAST AI on disconnect
        /// </summary>
        [Input("deleteNodesOnDisconnect")]
        public Input<bool>? DeleteNodesOnDisconnect { get; set; }

        /// <summary>
        /// Overrides the IP address to use for DNS queries within the cluster. Defaults to 10.100.0.10 or 172.20.0.10 based on the IP address of the primary interface
        /// </summary>
        [Input("dnsClusterIp")]
        public Input<string>? DnsClusterIp { get; set; }

        /// <summary>
        /// AWS ARN of the instance profile to be used by CAST AI
        /// </summary>
        [Input("instanceProfileArn")]
        public Input<string>? InstanceProfileArn { get; set; }

        /// <summary>
        /// name of your EKS cluster
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("overrideSecurityGroups")]
        private InputList<string>? _overrideSecurityGroups;

        /// <summary>
        /// Optional custom security groups for the cluster. If not set security groups from the EKS cluster configuration are used.
        /// </summary>
        public InputList<string> OverrideSecurityGroups
        {
            get => _overrideSecurityGroups ?? (_overrideSecurityGroups = new InputList<string>());
            set => _overrideSecurityGroups = value;
        }

        /// <summary>
        /// AWS region where the cluster is placed
        /// </summary>
        [Input("region", required: true)]
        public Input<string> Region { get; set; } = null!;

        [Input("secretAccessKey")]
        private Input<string>? _secretAccessKey;

        /// <summary>
        /// AWS secret access key of the CAST AI IAM account
        /// </summary>
        public Input<string>? SecretAccessKey
        {
            get => _secretAccessKey;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _secretAccessKey = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// Accepted values are base64 encoded SSH public key or AWS key pair ID.
        /// </summary>
        [Input("sshPublicKey")]
        public Input<string>? SshPublicKey { get; set; }

        [Input("subnets")]
        private InputList<string>? _subnets;

        /// <summary>
        /// Custom subnets for the cluster. If not set subnets from the EKS cluster configuration are used.
        /// </summary>
        public InputList<string> Subnets
        {
            get => _subnets ?? (_subnets = new InputList<string>());
            set => _subnets = value;
        }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// Tags which should be added to CAST AI nodes
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public EksClusterArgs()
        {
        }
        public static new EksClusterArgs Empty => new EksClusterArgs();
    }

    public sealed class EksClusterState : global::Pulumi.ResourceArgs
    {
        [Input("accessKeyId")]
        private Input<string>? _accessKeyId;

        /// <summary>
        /// AWS access key ID of the CAST AI IAM account
        /// </summary>
        public Input<string>? AccessKeyId
        {
            get => _accessKeyId;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _accessKeyId = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// ID of AWS account
        /// </summary>
        [Input("accountId")]
        public Input<string>? AccountId { get; set; }

        [Input("agentToken")]
        private Input<string>? _agentToken;
        [Obsolete(@"agent_token is deprecated, use cluster_token instead")]
        public Input<string>? AgentToken
        {
            get => _agentToken;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _agentToken = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// AWS ARN for assume role that should be used instead of IAM account
        /// </summary>
        [Input("assumeRoleArn")]
        public Input<string>? AssumeRoleArn { get; set; }

        /// <summary>
        /// CAST AI internal credentials ID
        /// </summary>
        [Input("credentialsId")]
        public Input<string>? CredentialsId { get; set; }

        /// <summary>
        /// Should CAST AI remove nodes managed by CAST AI on disconnect
        /// </summary>
        [Input("deleteNodesOnDisconnect")]
        public Input<bool>? DeleteNodesOnDisconnect { get; set; }

        /// <summary>
        /// Overrides the IP address to use for DNS queries within the cluster. Defaults to 10.100.0.10 or 172.20.0.10 based on the IP address of the primary interface
        /// </summary>
        [Input("dnsClusterIp")]
        public Input<string>? DnsClusterIp { get; set; }

        /// <summary>
        /// AWS ARN of the instance profile to be used by CAST AI
        /// </summary>
        [Input("instanceProfileArn")]
        public Input<string>? InstanceProfileArn { get; set; }

        /// <summary>
        /// name of your EKS cluster
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("overrideSecurityGroups")]
        private InputList<string>? _overrideSecurityGroups;

        /// <summary>
        /// Optional custom security groups for the cluster. If not set security groups from the EKS cluster configuration are used.
        /// </summary>
        public InputList<string> OverrideSecurityGroups
        {
            get => _overrideSecurityGroups ?? (_overrideSecurityGroups = new InputList<string>());
            set => _overrideSecurityGroups = value;
        }

        /// <summary>
        /// AWS region where the cluster is placed
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        [Input("secretAccessKey")]
        private Input<string>? _secretAccessKey;

        /// <summary>
        /// AWS secret access key of the CAST AI IAM account
        /// </summary>
        public Input<string>? SecretAccessKey
        {
            get => _secretAccessKey;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _secretAccessKey = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("securityGroups")]
        private InputList<string>? _securityGroups;

        /// <summary>
        /// IDs of security groups that are used by CAST AI
        /// </summary>
        public InputList<string> SecurityGroups
        {
            get => _securityGroups ?? (_securityGroups = new InputList<string>());
            set => _securityGroups = value;
        }

        /// <summary>
        /// Accepted values are base64 encoded SSH public key or AWS key pair ID.
        /// </summary>
        [Input("sshPublicKey")]
        public Input<string>? SshPublicKey { get; set; }

        [Input("subnets")]
        private InputList<string>? _subnets;

        /// <summary>
        /// Custom subnets for the cluster. If not set subnets from the EKS cluster configuration are used.
        /// </summary>
        public InputList<string> Subnets
        {
            get => _subnets ?? (_subnets = new InputList<string>());
            set => _subnets = value;
        }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// Tags which should be added to CAST AI nodes
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public EksClusterState()
        {
        }
        public static new EksClusterState Empty => new EksClusterState();
    }
}
