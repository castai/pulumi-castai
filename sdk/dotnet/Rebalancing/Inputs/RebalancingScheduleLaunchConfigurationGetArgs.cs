// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.CastAI.Rebalancing.Inputs
{

    public sealed class RebalancingScheduleLaunchConfigurationGetArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// When enabled rebalancing will also consider problematic pods (pods without controller, job pods, pods with removal-disabled annotation) as not-problematic.
        /// </summary>
        [Input("aggressiveMode")]
        public Input<bool>? AggressiveMode { get; set; }

        /// <summary>
        /// Advanced configuration for aggressive rebalancing mode.
        /// </summary>
        [Input("aggressiveModeConfig")]
        public Input<Inputs.RebalancingScheduleLaunchConfigurationAggressiveModeConfigGetArgs>? AggressiveModeConfig { get; set; }

        [Input("executionConditions")]
        public Input<Inputs.RebalancingScheduleLaunchConfigurationExecutionConditionsGetArgs>? ExecutionConditions { get; set; }

        /// <summary>
        /// Defines whether the nodes that failed to get drained until a predefined timeout, will be kept with a rebalancing.cast.ai/status=drain-failed annotation instead of forcefully drained.
        /// </summary>
        [Input("keepDrainTimeoutNodes")]
        public Input<bool>? KeepDrainTimeoutNodes { get; set; }

        /// <summary>
        /// Specifies amount of time since node creation before the node is allowed to be considered for automated rebalancing.
        /// </summary>
        [Input("nodeTtlSeconds")]
        public Input<int>? NodeTtlSeconds { get; set; }

        /// <summary>
        /// Maximum number of nodes that will be selected for rebalancing.
        /// </summary>
        [Input("numTargetedNodes")]
        public Input<int>? NumTargetedNodes { get; set; }

        /// <summary>
        /// Minimum number of nodes that should be kept in the cluster after rebalancing.
        /// </summary>
        [Input("rebalancingMinNodes")]
        public Input<int>? RebalancingMinNodes { get; set; }

        /// <summary>
        /// Node selector in JSON format.
        /// </summary>
        [Input("selector")]
        public Input<string>? Selector { get; set; }

        /// <summary>
        /// Defines the algorithm used to select the target nodes for rebalancing.
        /// </summary>
        [Input("targetNodeSelectionAlgorithm")]
        public Input<string>? TargetNodeSelectionAlgorithm { get; set; }

        public RebalancingScheduleLaunchConfigurationGetArgs()
        {
        }
        public static new RebalancingScheduleLaunchConfigurationGetArgs Empty => new RebalancingScheduleLaunchConfigurationGetArgs();
    }
}
