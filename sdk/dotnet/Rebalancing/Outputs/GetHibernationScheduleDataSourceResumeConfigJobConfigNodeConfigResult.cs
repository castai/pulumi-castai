// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.CastAI.Rebalancing.Outputs
{

    [OutputType]
    public sealed class GetHibernationScheduleDataSourceResumeConfigJobConfigNodeConfigResult
    {
        /// <summary>
        /// ID reference of Node Configuration to be used for node creation. Supersedes 'config_name' parameter.
        /// </summary>
        public readonly string? ConfigId;
        /// <summary>
        /// Name reference of Node Configuration to be used for node creation. Superseded if 'config_id' parameter is provided.
        /// </summary>
        public readonly string? ConfigName;
        public readonly Outputs.GetHibernationScheduleDataSourceResumeConfigJobConfigNodeConfigGpuConfigResult? GpuConfig;
        /// <summary>
        /// Instance type.
        /// </summary>
        public readonly string InstanceType;
        /// <summary>
        /// Custom labels to be added to the node.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? KubernetesLabels;
        /// <summary>
        /// Custom taints to be added to the node created from this configuration.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetHibernationScheduleDataSourceResumeConfigJobConfigNodeConfigKubernetesTaintResult> KubernetesTaints;
        /// <summary>
        /// Custom taints to be added to the node created from this configuration.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetHibernationScheduleDataSourceResumeConfigJobConfigNodeConfigNodeAffinityResult> NodeAffinities;
        /// <summary>
        /// Custom taints to be added to the node created from this configuration.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetHibernationScheduleDataSourceResumeConfigJobConfigNodeConfigSpotConfigResult> SpotConfigs;
        /// <summary>
        /// Node subnet ID.
        /// </summary>
        public readonly string? SubnetId;
        public readonly ImmutableArray<Outputs.GetHibernationScheduleDataSourceResumeConfigJobConfigNodeConfigVolumeResult> Volumes;
        /// <summary>
        /// Zone of the node.
        /// </summary>
        public readonly string? Zone;

        [OutputConstructor]
        private GetHibernationScheduleDataSourceResumeConfigJobConfigNodeConfigResult(
            string? configId,

            string? configName,

            Outputs.GetHibernationScheduleDataSourceResumeConfigJobConfigNodeConfigGpuConfigResult? gpuConfig,

            string instanceType,

            ImmutableDictionary<string, string>? kubernetesLabels,

            ImmutableArray<Outputs.GetHibernationScheduleDataSourceResumeConfigJobConfigNodeConfigKubernetesTaintResult> kubernetesTaints,

            ImmutableArray<Outputs.GetHibernationScheduleDataSourceResumeConfigJobConfigNodeConfigNodeAffinityResult> nodeAffinities,

            ImmutableArray<Outputs.GetHibernationScheduleDataSourceResumeConfigJobConfigNodeConfigSpotConfigResult> spotConfigs,

            string? subnetId,

            ImmutableArray<Outputs.GetHibernationScheduleDataSourceResumeConfigJobConfigNodeConfigVolumeResult> volumes,

            string? zone)
        {
            ConfigId = configId;
            ConfigName = configName;
            GpuConfig = gpuConfig;
            InstanceType = instanceType;
            KubernetesLabels = kubernetesLabels;
            KubernetesTaints = kubernetesTaints;
            NodeAffinities = nodeAffinities;
            SpotConfigs = spotConfigs;
            SubnetId = subnetId;
            Volumes = volumes;
            Zone = zone;
        }
    }
}
