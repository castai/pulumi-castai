// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.CastAI.Rebalancing.Outputs
{

    [OutputType]
    public sealed class GetRebalancingScheduleDataSourceLaunchConfigurationResult
    {
        /// <summary>
        /// When enabled rebalancing will also consider problematic pods (pods without controller, job pods, pods with removal-disabled annotation) as not-problematic.
        /// </summary>
        public readonly bool? AggressiveMode;
        /// <summary>
        /// Advanced configuration for aggressive rebalancing mode.
        /// </summary>
        public readonly Outputs.GetRebalancingScheduleDataSourceLaunchConfigurationAggressiveModeConfigResult? AggressiveModeConfig;
        public readonly Outputs.GetRebalancingScheduleDataSourceLaunchConfigurationExecutionConditionsResult? ExecutionConditions;
        /// <summary>
        /// Defines whether the nodes that failed to get drained until a predefined timeout, will be kept with a rebalancing.cast.ai/status=drain-failed annotation instead of forcefully drained.
        /// </summary>
        public readonly bool? KeepDrainTimeoutNodes;
        /// <summary>
        /// Specifies amount of time since node creation before the node is allowed to be considered for automated rebalancing.
        /// </summary>
        public readonly int? NodeTtlSeconds;
        /// <summary>
        /// Maximum number of nodes that will be selected for rebalancing.
        /// </summary>
        public readonly int? NumTargetedNodes;
        /// <summary>
        /// Minimum number of nodes that should be kept in the cluster after rebalancing.
        /// </summary>
        public readonly int? RebalancingMinNodes;
        /// <summary>
        /// Node selector in JSON format.
        /// </summary>
        public readonly string? Selector;
        /// <summary>
        /// Defines the algorithm used to select the target nodes for rebalancing.
        /// </summary>
        public readonly string? TargetNodeSelectionAlgorithm;

        [OutputConstructor]
        private GetRebalancingScheduleDataSourceLaunchConfigurationResult(
            bool? aggressiveMode,

            Outputs.GetRebalancingScheduleDataSourceLaunchConfigurationAggressiveModeConfigResult? aggressiveModeConfig,

            Outputs.GetRebalancingScheduleDataSourceLaunchConfigurationExecutionConditionsResult? executionConditions,

            bool? keepDrainTimeoutNodes,

            int? nodeTtlSeconds,

            int? numTargetedNodes,

            int? rebalancingMinNodes,

            string? selector,

            string? targetNodeSelectionAlgorithm)
        {
            AggressiveMode = aggressiveMode;
            AggressiveModeConfig = aggressiveModeConfig;
            ExecutionConditions = executionConditions;
            KeepDrainTimeoutNodes = keepDrainTimeoutNodes;
            NodeTtlSeconds = nodeTtlSeconds;
            NumTargetedNodes = numTargetedNodes;
            RebalancingMinNodes = rebalancingMinNodes;
            Selector = selector;
            TargetNodeSelectionAlgorithm = targetNodeSelectionAlgorithm;
        }
    }
}
