// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.CastAI.Workload.Inputs
{

    public sealed class WorkloadScalingPolicyCpuApplyThresholdStrategyGetArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// If denominator is close or equal to 0, the threshold will be much bigger for small values.For example when numerator, exponent is 1 and denominator is 0 the threshold for 0.5 req. CPU will be 200%.It must be defined for the CUSTOM_ADAPTIVE strategy.
        /// </summary>
        [Input("denominator")]
        public Input<string>? Denominator { get; set; }

        /// <summary>
        /// The exponent changes how fast the curve is going down. The smaller value will cause that we wonâ€™t pick extremely small number for big resources, for example:
        /// 	- if numerator is 0, denominator is 1, and exponent is 1, for 50 CPU we will pick 2% threshold
        /// 	- if numerator is 0, denominator is 1, and exponent is 0.8, for 50 CPU we will pick 4.3% threshold
        /// 	It must be defined for the CUSTOM_ADAPTIVE strategy.
        /// </summary>
        [Input("exponent")]
        public Input<double>? Exponent { get; set; }

        /// <summary>
        /// The numerator affects vertical stretch of function used in adaptive threshold - smaller number will create smaller threshold.It must be defined for the CUSTOM_ADAPTIVE strategy.
        /// </summary>
        [Input("numerator")]
        public Input<double>? Numerator { get; set; }

        /// <summary>
        /// Percentage of a how much difference should there be between the current pod requests and the new recommendation. It must be defined for the PERCENTAGE strategy.
        /// </summary>
        [Input("percentage")]
        public Input<double>? Percentage { get; set; }

        /// <summary>
        /// Defines apply theshold strategy type.
        /// 	- PERCENTAGE - recommendation will be applied when diff of current requests and new recommendation is greater than set value
        ///     - DEFAULT_ADAPTIVE - will pick larger threshold percentage for small workloads and smaller percentage for large workloads.
        ///     - CUSTOM_ADAPTIVE - works in same way as DEFAULT_ADAPTIVE, but it allows to tweak parameters of adaptive threshold formula: percentage = numerator/(currentRequest + denominator)^exponent. This strategy is for advance use cases, we recommend to use DEFAULT_ADAPTIVE strategy.
        /// </summary>
        [Input("type", required: true)]
        public Input<string> Type { get; set; } = null!;

        public WorkloadScalingPolicyCpuApplyThresholdStrategyGetArgs()
        {
        }
        public static new WorkloadScalingPolicyCpuApplyThresholdStrategyGetArgs Empty => new WorkloadScalingPolicyCpuApplyThresholdStrategyGetArgs();
    }
}
