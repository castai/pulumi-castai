// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.CastAI
{
    [CastAIResourceType("castai:azure:AksCluster")]
    public partial class AksCluster : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Azure AD application ID that is created and used by CAST AI.
        /// </summary>
        [Output("clientId")]
        public Output<string> ClientId { get; private set; } = null!;

        /// <summary>
        /// Azure AD application password that will be used by CAST AI.
        /// </summary>
        [Output("clientSecret")]
        public Output<string> ClientSecret { get; private set; } = null!;

        /// <summary>
        /// CAST AI cluster token.
        /// </summary>
        [Output("clusterToken")]
        public Output<string> ClusterToken { get; private set; } = null!;

        /// <summary>
        /// CAST AI internal credentials ID
        /// </summary>
        [Output("credentialsId")]
        public Output<string> CredentialsId { get; private set; } = null!;

        /// <summary>
        /// Should CAST AI remove nodes managed by CAST.AI on disconnect.
        /// </summary>
        [Output("deleteNodesOnDisconnect")]
        public Output<bool?> DeleteNodesOnDisconnect { get; private set; } = null!;

        /// <summary>
        /// HTTP proxy configuration for CAST AI nodes and node components.
        /// </summary>
        [Output("httpProxyConfig")]
        public Output<Pulumi.CastAI.Azure.Outputs.AksClusterHttpProxyConfig?> HttpProxyConfig { get; private set; } = null!;

        /// <summary>
        /// AKS cluster name.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Azure resource group in which nodes are and will be created.
        /// </summary>
        [Output("nodeResourceGroup")]
        public Output<string> NodeResourceGroup { get; private set; } = null!;

        /// <summary>
        /// AKS cluster region.
        /// </summary>
        [Output("region")]
        public Output<string> Region { get; private set; } = null!;

        /// <summary>
        /// ID of the Azure subscription.
        /// </summary>
        [Output("subscriptionId")]
        public Output<string> SubscriptionId { get; private set; } = null!;

        /// <summary>
        /// Azure AD tenant ID from the used subscription.
        /// </summary>
        [Output("tenantId")]
        public Output<string> TenantId { get; private set; } = null!;


        /// <summary>
        /// Create a AksCluster resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public AksCluster(string name, AksClusterArgs args, CustomResourceOptions? options = null)
            : base("castai:azure:AksCluster", name, args ?? new AksClusterArgs(), MakeResourceOptions(options, ""))
        {
        }

        private AksCluster(string name, Input<string> id, AksClusterState? state = null, CustomResourceOptions? options = null)
            : base("castai:azure:AksCluster", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/castai",
                AdditionalSecretOutputs =
                {
                    "clientSecret",
                    "clusterToken",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing AksCluster resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static AksCluster Get(string name, Input<string> id, AksClusterState? state = null, CustomResourceOptions? options = null)
        {
            return new AksCluster(name, id, state, options);
        }
    }

    public sealed class AksClusterArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Azure AD application ID that is created and used by CAST AI.
        /// </summary>
        [Input("clientId", required: true)]
        public Input<string> ClientId { get; set; } = null!;

        [Input("clientSecret", required: true)]
        private Input<string>? _clientSecret;

        /// <summary>
        /// Azure AD application password that will be used by CAST AI.
        /// </summary>
        public Input<string>? ClientSecret
        {
            get => _clientSecret;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _clientSecret = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// Should CAST AI remove nodes managed by CAST.AI on disconnect.
        /// </summary>
        [Input("deleteNodesOnDisconnect")]
        public Input<bool>? DeleteNodesOnDisconnect { get; set; }

        /// <summary>
        /// HTTP proxy configuration for CAST AI nodes and node components.
        /// </summary>
        [Input("httpProxyConfig")]
        public Input<Pulumi.CastAI.Azure.Inputs.AksClusterHttpProxyConfigArgs>? HttpProxyConfig { get; set; }

        /// <summary>
        /// AKS cluster name.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Azure resource group in which nodes are and will be created.
        /// </summary>
        [Input("nodeResourceGroup", required: true)]
        public Input<string> NodeResourceGroup { get; set; } = null!;

        /// <summary>
        /// AKS cluster region.
        /// </summary>
        [Input("region", required: true)]
        public Input<string> Region { get; set; } = null!;

        /// <summary>
        /// ID of the Azure subscription.
        /// </summary>
        [Input("subscriptionId", required: true)]
        public Input<string> SubscriptionId { get; set; } = null!;

        /// <summary>
        /// Azure AD tenant ID from the used subscription.
        /// </summary>
        [Input("tenantId", required: true)]
        public Input<string> TenantId { get; set; } = null!;

        public AksClusterArgs()
        {
        }
        public static new AksClusterArgs Empty => new AksClusterArgs();
    }

    public sealed class AksClusterState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Azure AD application ID that is created and used by CAST AI.
        /// </summary>
        [Input("clientId")]
        public Input<string>? ClientId { get; set; }

        [Input("clientSecret")]
        private Input<string>? _clientSecret;

        /// <summary>
        /// Azure AD application password that will be used by CAST AI.
        /// </summary>
        public Input<string>? ClientSecret
        {
            get => _clientSecret;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _clientSecret = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("clusterToken")]
        private Input<string>? _clusterToken;

        /// <summary>
        /// CAST AI cluster token.
        /// </summary>
        public Input<string>? ClusterToken
        {
            get => _clusterToken;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _clusterToken = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// CAST AI internal credentials ID
        /// </summary>
        [Input("credentialsId")]
        public Input<string>? CredentialsId { get; set; }

        /// <summary>
        /// Should CAST AI remove nodes managed by CAST.AI on disconnect.
        /// </summary>
        [Input("deleteNodesOnDisconnect")]
        public Input<bool>? DeleteNodesOnDisconnect { get; set; }

        /// <summary>
        /// HTTP proxy configuration for CAST AI nodes and node components.
        /// </summary>
        [Input("httpProxyConfig")]
        public Input<Pulumi.CastAI.Azure.Inputs.AksClusterHttpProxyConfigGetArgs>? HttpProxyConfig { get; set; }

        /// <summary>
        /// AKS cluster name.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Azure resource group in which nodes are and will be created.
        /// </summary>
        [Input("nodeResourceGroup")]
        public Input<string>? NodeResourceGroup { get; set; }

        /// <summary>
        /// AKS cluster region.
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        /// <summary>
        /// ID of the Azure subscription.
        /// </summary>
        [Input("subscriptionId")]
        public Input<string>? SubscriptionId { get; set; }

        /// <summary>
        /// Azure AD tenant ID from the used subscription.
        /// </summary>
        [Input("tenantId")]
        public Input<string>? TenantId { get; set; }

        public AksClusterState()
        {
        }
        public static new AksClusterState Empty => new AksClusterState();
    }
}
