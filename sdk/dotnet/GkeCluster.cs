// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.CastAI
{
    /// <summary>
    /// GKE cluster resource allows connecting an existing GEK cluster to CAST AI.
    /// </summary>
    [CastAIResourceType("castai:gcp:GkeCluster")]
    public partial class GkeCluster : global::Pulumi.CustomResource
    {
        /// <summary>
        /// CAST.AI agent cluster token
        /// </summary>
        [Output("clusterToken")]
        public Output<string> ClusterToken { get; private set; } = null!;

        /// <summary>
        /// CAST AI credentials id for cluster
        /// </summary>
        [Output("credentialsId")]
        public Output<string> CredentialsId { get; private set; } = null!;

        /// <summary>
        /// GCP credentials.json from ServiceAccount with credentials for CAST AI
        /// </summary>
        [Output("credentialsJson")]
        public Output<string?> CredentialsJson { get; private set; } = null!;

        /// <summary>
        /// Should CAST AI remove nodes managed by CAST.AI on disconnect
        /// </summary>
        [Output("deleteNodesOnDisconnect")]
        public Output<bool?> DeleteNodesOnDisconnect { get; private set; } = null!;

        /// <summary>
        /// GCP cluster zone in case of zonal or region in case of regional cluster
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// GKE cluster name
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// GCP project id
        /// </summary>
        [Output("projectId")]
        public Output<string> ProjectId { get; private set; } = null!;

        /// <summary>
        /// SSHPublicKey for nodes
        /// </summary>
        [Output("sshPublicKey")]
        public Output<string?> SshPublicKey { get; private set; } = null!;


        /// <summary>
        /// Create a GkeCluster resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public GkeCluster(string name, GkeClusterArgs args, CustomResourceOptions? options = null)
            : base("castai:gcp:GkeCluster", name, args ?? new GkeClusterArgs(), MakeResourceOptions(options, ""))
        {
        }

        private GkeCluster(string name, Input<string> id, GkeClusterState? state = null, CustomResourceOptions? options = null)
            : base("castai:gcp:GkeCluster", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/castai",
                AdditionalSecretOutputs =
                {
                    "clusterToken",
                    "credentialsJson",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing GkeCluster resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static GkeCluster Get(string name, Input<string> id, GkeClusterState? state = null, CustomResourceOptions? options = null)
        {
            return new GkeCluster(name, id, state, options);
        }
    }

    public sealed class GkeClusterArgs : global::Pulumi.ResourceArgs
    {
        [Input("credentialsJson")]
        private Input<string>? _credentialsJson;

        /// <summary>
        /// GCP credentials.json from ServiceAccount with credentials for CAST AI
        /// </summary>
        public Input<string>? CredentialsJson
        {
            get => _credentialsJson;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _credentialsJson = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// Should CAST AI remove nodes managed by CAST.AI on disconnect
        /// </summary>
        [Input("deleteNodesOnDisconnect")]
        public Input<bool>? DeleteNodesOnDisconnect { get; set; }

        /// <summary>
        /// GCP cluster zone in case of zonal or region in case of regional cluster
        /// </summary>
        [Input("location", required: true)]
        public Input<string> Location { get; set; } = null!;

        /// <summary>
        /// GKE cluster name
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// GCP project id
        /// </summary>
        [Input("projectId", required: true)]
        public Input<string> ProjectId { get; set; } = null!;

        /// <summary>
        /// SSHPublicKey for nodes
        /// </summary>
        [Input("sshPublicKey")]
        public Input<string>? SshPublicKey { get; set; }

        public GkeClusterArgs()
        {
        }
        public static new GkeClusterArgs Empty => new GkeClusterArgs();
    }

    public sealed class GkeClusterState : global::Pulumi.ResourceArgs
    {
        [Input("clusterToken")]
        private Input<string>? _clusterToken;

        /// <summary>
        /// CAST.AI agent cluster token
        /// </summary>
        public Input<string>? ClusterToken
        {
            get => _clusterToken;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _clusterToken = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// CAST AI credentials id for cluster
        /// </summary>
        [Input("credentialsId")]
        public Input<string>? CredentialsId { get; set; }

        [Input("credentialsJson")]
        private Input<string>? _credentialsJson;

        /// <summary>
        /// GCP credentials.json from ServiceAccount with credentials for CAST AI
        /// </summary>
        public Input<string>? CredentialsJson
        {
            get => _credentialsJson;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _credentialsJson = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// Should CAST AI remove nodes managed by CAST.AI on disconnect
        /// </summary>
        [Input("deleteNodesOnDisconnect")]
        public Input<bool>? DeleteNodesOnDisconnect { get; set; }

        /// <summary>
        /// GCP cluster zone in case of zonal or region in case of regional cluster
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// GKE cluster name
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// GCP project id
        /// </summary>
        [Input("projectId")]
        public Input<string>? ProjectId { get; set; }

        /// <summary>
        /// SSHPublicKey for nodes
        /// </summary>
        [Input("sshPublicKey")]
        public Input<string>? SshPublicKey { get; set; }

        public GkeClusterState()
        {
        }
        public static new GkeClusterState Empty => new GkeClusterState();
    }
}
