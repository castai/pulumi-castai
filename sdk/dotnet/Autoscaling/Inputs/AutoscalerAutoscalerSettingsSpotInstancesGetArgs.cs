// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.CastAI.Autoscaling.Inputs
{

    public sealed class AutoscalerAutoscalerSettingsSpotInstancesGetArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// enable/disable spot instances policy.
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// max allowed reclaim rate when choosing spot instance type. E.g. if the value is 10%, instance types having 10% or higher reclaim rate will not be considered. Set to zero to use all instance types regardless of reclaim rate.
        /// </summary>
        [Input("maxReclaimRate")]
        public Input<int>? MaxReclaimRate { get; set; }

        /// <summary>
        /// policy defining whether autoscaler can use spot backups instead of spot instances when spot instances are not available.
        /// </summary>
        [Input("spotBackups")]
        public Input<Inputs.AutoscalerAutoscalerSettingsSpotInstancesSpotBackupsGetArgs>? SpotBackups { get; set; }

        /// <summary>
        /// enable/disable spot diversity policy. When enabled, autoscaler will try to balance between diverse and cost optimal instance types.
        /// </summary>
        [Input("spotDiversityEnabled")]
        public Input<bool>? SpotDiversityEnabled { get; set; }

        /// <summary>
        /// allowed node configuration price increase when diversifying instance types. E.g. if the value is 10%, then the overall price of diversified instance types can be 10% higher than the price of the optimal configuration.
        /// </summary>
        [Input("spotDiversityPriceIncreaseLimit")]
        public Input<int>? SpotDiversityPriceIncreaseLimit { get; set; }

        /// <summary>
        /// configure the handling of SPOT interruption predictions.
        /// </summary>
        [Input("spotInterruptionPredictions")]
        public Input<Inputs.AutoscalerAutoscalerSettingsSpotInstancesSpotInterruptionPredictionsGetArgs>? SpotInterruptionPredictions { get; set; }

        public AutoscalerAutoscalerSettingsSpotInstancesGetArgs()
        {
        }
        public static new AutoscalerAutoscalerSettingsSpotInstancesGetArgs Empty => new AutoscalerAutoscalerSettingsSpotInstancesGetArgs();
    }
}
