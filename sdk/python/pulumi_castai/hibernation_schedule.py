# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import rebalancing as _rebalancing

__all__ = ['HibernationScheduleArgs', 'HibernationSchedule']

@pulumi.input_type
class HibernationScheduleArgs:
    def __init__(__self__, *,
                 enabled: pulumi.Input[_builtins.bool],
                 pause_config: pulumi.Input['_rebalancing.HibernationSchedulePauseConfigArgs'],
                 resume_config: pulumi.Input['_rebalancing.HibernationScheduleResumeConfigArgs'],
                 cluster_assignments: Optional[pulumi.Input['_rebalancing.HibernationScheduleClusterAssignmentsArgs']] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 organization_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a HibernationSchedule resource.
        :param pulumi.Input[_builtins.bool] enabled: Enables or disables the schedule.
        :param pulumi.Input[_builtins.str] name: Name of the schedule.
        :param pulumi.Input[_builtins.str] organization_id: ID of the organization. If not provided, then will attempt to infer it using CAST AI API client.
        """
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "pause_config", pause_config)
        pulumi.set(__self__, "resume_config", resume_config)
        if cluster_assignments is not None:
            pulumi.set(__self__, "cluster_assignments", cluster_assignments)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if organization_id is not None:
            pulumi.set(__self__, "organization_id", organization_id)

    @_builtins.property
    @pulumi.getter
    def enabled(self) -> pulumi.Input[_builtins.bool]:
        """
        Enables or disables the schedule.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: pulumi.Input[_builtins.bool]):
        pulumi.set(self, "enabled", value)

    @_builtins.property
    @pulumi.getter(name="pauseConfig")
    def pause_config(self) -> pulumi.Input['_rebalancing.HibernationSchedulePauseConfigArgs']:
        return pulumi.get(self, "pause_config")

    @pause_config.setter
    def pause_config(self, value: pulumi.Input['_rebalancing.HibernationSchedulePauseConfigArgs']):
        pulumi.set(self, "pause_config", value)

    @_builtins.property
    @pulumi.getter(name="resumeConfig")
    def resume_config(self) -> pulumi.Input['_rebalancing.HibernationScheduleResumeConfigArgs']:
        return pulumi.get(self, "resume_config")

    @resume_config.setter
    def resume_config(self, value: pulumi.Input['_rebalancing.HibernationScheduleResumeConfigArgs']):
        pulumi.set(self, "resume_config", value)

    @_builtins.property
    @pulumi.getter(name="clusterAssignments")
    def cluster_assignments(self) -> Optional[pulumi.Input['_rebalancing.HibernationScheduleClusterAssignmentsArgs']]:
        return pulumi.get(self, "cluster_assignments")

    @cluster_assignments.setter
    def cluster_assignments(self, value: Optional[pulumi.Input['_rebalancing.HibernationScheduleClusterAssignmentsArgs']]):
        pulumi.set(self, "cluster_assignments", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Name of the schedule.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="organizationId")
    def organization_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        ID of the organization. If not provided, then will attempt to infer it using CAST AI API client.
        """
        return pulumi.get(self, "organization_id")

    @organization_id.setter
    def organization_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "organization_id", value)


@pulumi.input_type
class _HibernationScheduleState:
    def __init__(__self__, *,
                 cluster_assignments: Optional[pulumi.Input['_rebalancing.HibernationScheduleClusterAssignmentsArgs']] = None,
                 enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 organization_id: Optional[pulumi.Input[_builtins.str]] = None,
                 pause_config: Optional[pulumi.Input['_rebalancing.HibernationSchedulePauseConfigArgs']] = None,
                 resume_config: Optional[pulumi.Input['_rebalancing.HibernationScheduleResumeConfigArgs']] = None):
        """
        Input properties used for looking up and filtering HibernationSchedule resources.
        :param pulumi.Input[_builtins.bool] enabled: Enables or disables the schedule.
        :param pulumi.Input[_builtins.str] name: Name of the schedule.
        :param pulumi.Input[_builtins.str] organization_id: ID of the organization. If not provided, then will attempt to infer it using CAST AI API client.
        """
        if cluster_assignments is not None:
            pulumi.set(__self__, "cluster_assignments", cluster_assignments)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if organization_id is not None:
            pulumi.set(__self__, "organization_id", organization_id)
        if pause_config is not None:
            pulumi.set(__self__, "pause_config", pause_config)
        if resume_config is not None:
            pulumi.set(__self__, "resume_config", resume_config)

    @_builtins.property
    @pulumi.getter(name="clusterAssignments")
    def cluster_assignments(self) -> Optional[pulumi.Input['_rebalancing.HibernationScheduleClusterAssignmentsArgs']]:
        return pulumi.get(self, "cluster_assignments")

    @cluster_assignments.setter
    def cluster_assignments(self, value: Optional[pulumi.Input['_rebalancing.HibernationScheduleClusterAssignmentsArgs']]):
        pulumi.set(self, "cluster_assignments", value)

    @_builtins.property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Enables or disables the schedule.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "enabled", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Name of the schedule.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="organizationId")
    def organization_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        ID of the organization. If not provided, then will attempt to infer it using CAST AI API client.
        """
        return pulumi.get(self, "organization_id")

    @organization_id.setter
    def organization_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "organization_id", value)

    @_builtins.property
    @pulumi.getter(name="pauseConfig")
    def pause_config(self) -> Optional[pulumi.Input['_rebalancing.HibernationSchedulePauseConfigArgs']]:
        return pulumi.get(self, "pause_config")

    @pause_config.setter
    def pause_config(self, value: Optional[pulumi.Input['_rebalancing.HibernationSchedulePauseConfigArgs']]):
        pulumi.set(self, "pause_config", value)

    @_builtins.property
    @pulumi.getter(name="resumeConfig")
    def resume_config(self) -> Optional[pulumi.Input['_rebalancing.HibernationScheduleResumeConfigArgs']]:
        return pulumi.get(self, "resume_config")

    @resume_config.setter
    def resume_config(self, value: Optional[pulumi.Input['_rebalancing.HibernationScheduleResumeConfigArgs']]):
        pulumi.set(self, "resume_config", value)


@pulumi.type_token("castai:rebalancing:HibernationSchedule")
class HibernationSchedule(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cluster_assignments: Optional[pulumi.Input[Union['_rebalancing.HibernationScheduleClusterAssignmentsArgs', '_rebalancing.HibernationScheduleClusterAssignmentsArgsDict']]] = None,
                 enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 organization_id: Optional[pulumi.Input[_builtins.str]] = None,
                 pause_config: Optional[pulumi.Input[Union['_rebalancing.HibernationSchedulePauseConfigArgs', '_rebalancing.HibernationSchedulePauseConfigArgsDict']]] = None,
                 resume_config: Optional[pulumi.Input[Union['_rebalancing.HibernationScheduleResumeConfigArgs', '_rebalancing.HibernationScheduleResumeConfigArgsDict']]] = None,
                 __props__=None):
        """
        Create a HibernationSchedule resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.bool] enabled: Enables or disables the schedule.
        :param pulumi.Input[_builtins.str] name: Name of the schedule.
        :param pulumi.Input[_builtins.str] organization_id: ID of the organization. If not provided, then will attempt to infer it using CAST AI API client.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: HibernationScheduleArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a HibernationSchedule resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param HibernationScheduleArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(HibernationScheduleArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cluster_assignments: Optional[pulumi.Input[Union['_rebalancing.HibernationScheduleClusterAssignmentsArgs', '_rebalancing.HibernationScheduleClusterAssignmentsArgsDict']]] = None,
                 enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 organization_id: Optional[pulumi.Input[_builtins.str]] = None,
                 pause_config: Optional[pulumi.Input[Union['_rebalancing.HibernationSchedulePauseConfigArgs', '_rebalancing.HibernationSchedulePauseConfigArgsDict']]] = None,
                 resume_config: Optional[pulumi.Input[Union['_rebalancing.HibernationScheduleResumeConfigArgs', '_rebalancing.HibernationScheduleResumeConfigArgsDict']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = HibernationScheduleArgs.__new__(HibernationScheduleArgs)

            __props__.__dict__["cluster_assignments"] = cluster_assignments
            if enabled is None and not opts.urn:
                raise TypeError("Missing required property 'enabled'")
            __props__.__dict__["enabled"] = enabled
            __props__.__dict__["name"] = name
            __props__.__dict__["organization_id"] = organization_id
            if pause_config is None and not opts.urn:
                raise TypeError("Missing required property 'pause_config'")
            __props__.__dict__["pause_config"] = pause_config
            if resume_config is None and not opts.urn:
                raise TypeError("Missing required property 'resume_config'")
            __props__.__dict__["resume_config"] = resume_config
        super(HibernationSchedule, __self__).__init__(
            'castai:rebalancing:HibernationSchedule',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            cluster_assignments: Optional[pulumi.Input[Union['_rebalancing.HibernationScheduleClusterAssignmentsArgs', '_rebalancing.HibernationScheduleClusterAssignmentsArgsDict']]] = None,
            enabled: Optional[pulumi.Input[_builtins.bool]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            organization_id: Optional[pulumi.Input[_builtins.str]] = None,
            pause_config: Optional[pulumi.Input[Union['_rebalancing.HibernationSchedulePauseConfigArgs', '_rebalancing.HibernationSchedulePauseConfigArgsDict']]] = None,
            resume_config: Optional[pulumi.Input[Union['_rebalancing.HibernationScheduleResumeConfigArgs', '_rebalancing.HibernationScheduleResumeConfigArgsDict']]] = None) -> 'HibernationSchedule':
        """
        Get an existing HibernationSchedule resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.bool] enabled: Enables or disables the schedule.
        :param pulumi.Input[_builtins.str] name: Name of the schedule.
        :param pulumi.Input[_builtins.str] organization_id: ID of the organization. If not provided, then will attempt to infer it using CAST AI API client.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _HibernationScheduleState.__new__(_HibernationScheduleState)

        __props__.__dict__["cluster_assignments"] = cluster_assignments
        __props__.__dict__["enabled"] = enabled
        __props__.__dict__["name"] = name
        __props__.__dict__["organization_id"] = organization_id
        __props__.__dict__["pause_config"] = pause_config
        __props__.__dict__["resume_config"] = resume_config
        return HibernationSchedule(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="clusterAssignments")
    def cluster_assignments(self) -> pulumi.Output[Optional['_rebalancing.outputs.HibernationScheduleClusterAssignments']]:
        return pulumi.get(self, "cluster_assignments")

    @_builtins.property
    @pulumi.getter
    def enabled(self) -> pulumi.Output[_builtins.bool]:
        """
        Enables or disables the schedule.
        """
        return pulumi.get(self, "enabled")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        Name of the schedule.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="organizationId")
    def organization_id(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        ID of the organization. If not provided, then will attempt to infer it using CAST AI API client.
        """
        return pulumi.get(self, "organization_id")

    @_builtins.property
    @pulumi.getter(name="pauseConfig")
    def pause_config(self) -> pulumi.Output['_rebalancing.outputs.HibernationSchedulePauseConfig']:
        return pulumi.get(self, "pause_config")

    @_builtins.property
    @pulumi.getter(name="resumeConfig")
    def resume_config(self) -> pulumi.Output['_rebalancing.outputs.HibernationScheduleResumeConfig']:
        return pulumi.get(self, "resume_config")

