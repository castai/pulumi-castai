# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import organization as _organization

__all__ = ['EnterpriseGroupArgs', 'EnterpriseGroup']

@pulumi.input_type
class EnterpriseGroupArgs:
    def __init__(__self__, *,
                 enterprise_id: pulumi.Input[_builtins.str],
                 organization_id: pulumi.Input[_builtins.str],
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 members: Optional[pulumi.Input[Sequence[pulumi.Input['_organization.EnterpriseGroupMemberArgs']]]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 role_bindings: Optional[pulumi.Input[Sequence[pulumi.Input['_organization.EnterpriseGroupRoleBindingArgs']]]] = None):
        """
        The set of arguments for constructing a EnterpriseGroup resource.
        :param pulumi.Input[_builtins.str] enterprise_id: Enterprise organization ID.
        :param pulumi.Input[_builtins.str] organization_id: Target organization ID for the group.
        :param pulumi.Input[_builtins.str] description: Description of the group.
        :param pulumi.Input[Sequence[pulumi.Input['_organization.EnterpriseGroupMemberArgs']]] members: List of group members.
        :param pulumi.Input[_builtins.str] name: Name of the group.
        :param pulumi.Input[Sequence[pulumi.Input['_organization.EnterpriseGroupRoleBindingArgs']]] role_bindings: List of role bindings for the group.
        """
        pulumi.set(__self__, "enterprise_id", enterprise_id)
        pulumi.set(__self__, "organization_id", organization_id)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if members is not None:
            pulumi.set(__self__, "members", members)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if role_bindings is not None:
            pulumi.set(__self__, "role_bindings", role_bindings)

    @_builtins.property
    @pulumi.getter(name="enterpriseId")
    def enterprise_id(self) -> pulumi.Input[_builtins.str]:
        """
        Enterprise organization ID.
        """
        return pulumi.get(self, "enterprise_id")

    @enterprise_id.setter
    def enterprise_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "enterprise_id", value)

    @_builtins.property
    @pulumi.getter(name="organizationId")
    def organization_id(self) -> pulumi.Input[_builtins.str]:
        """
        Target organization ID for the group.
        """
        return pulumi.get(self, "organization_id")

    @organization_id.setter
    def organization_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "organization_id", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Description of the group.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter
    def members(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['_organization.EnterpriseGroupMemberArgs']]]]:
        """
        List of group members.
        """
        return pulumi.get(self, "members")

    @members.setter
    def members(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['_organization.EnterpriseGroupMemberArgs']]]]):
        pulumi.set(self, "members", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Name of the group.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="roleBindings")
    def role_bindings(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['_organization.EnterpriseGroupRoleBindingArgs']]]]:
        """
        List of role bindings for the group.
        """
        return pulumi.get(self, "role_bindings")

    @role_bindings.setter
    def role_bindings(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['_organization.EnterpriseGroupRoleBindingArgs']]]]):
        pulumi.set(self, "role_bindings", value)


@pulumi.input_type
class _EnterpriseGroupState:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 enterprise_id: Optional[pulumi.Input[_builtins.str]] = None,
                 members: Optional[pulumi.Input[Sequence[pulumi.Input['_organization.EnterpriseGroupMemberArgs']]]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 organization_id: Optional[pulumi.Input[_builtins.str]] = None,
                 role_bindings: Optional[pulumi.Input[Sequence[pulumi.Input['_organization.EnterpriseGroupRoleBindingArgs']]]] = None):
        """
        Input properties used for looking up and filtering EnterpriseGroup resources.
        :param pulumi.Input[_builtins.str] description: Description of the group.
        :param pulumi.Input[_builtins.str] enterprise_id: Enterprise organization ID.
        :param pulumi.Input[Sequence[pulumi.Input['_organization.EnterpriseGroupMemberArgs']]] members: List of group members.
        :param pulumi.Input[_builtins.str] name: Name of the group.
        :param pulumi.Input[_builtins.str] organization_id: Target organization ID for the group.
        :param pulumi.Input[Sequence[pulumi.Input['_organization.EnterpriseGroupRoleBindingArgs']]] role_bindings: List of role bindings for the group.
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if enterprise_id is not None:
            pulumi.set(__self__, "enterprise_id", enterprise_id)
        if members is not None:
            pulumi.set(__self__, "members", members)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if organization_id is not None:
            pulumi.set(__self__, "organization_id", organization_id)
        if role_bindings is not None:
            pulumi.set(__self__, "role_bindings", role_bindings)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Description of the group.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="enterpriseId")
    def enterprise_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Enterprise organization ID.
        """
        return pulumi.get(self, "enterprise_id")

    @enterprise_id.setter
    def enterprise_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enterprise_id", value)

    @_builtins.property
    @pulumi.getter
    def members(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['_organization.EnterpriseGroupMemberArgs']]]]:
        """
        List of group members.
        """
        return pulumi.get(self, "members")

    @members.setter
    def members(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['_organization.EnterpriseGroupMemberArgs']]]]):
        pulumi.set(self, "members", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Name of the group.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="organizationId")
    def organization_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Target organization ID for the group.
        """
        return pulumi.get(self, "organization_id")

    @organization_id.setter
    def organization_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "organization_id", value)

    @_builtins.property
    @pulumi.getter(name="roleBindings")
    def role_bindings(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['_organization.EnterpriseGroupRoleBindingArgs']]]]:
        """
        List of role bindings for the group.
        """
        return pulumi.get(self, "role_bindings")

    @role_bindings.setter
    def role_bindings(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['_organization.EnterpriseGroupRoleBindingArgs']]]]):
        pulumi.set(self, "role_bindings", value)


@pulumi.type_token("castai:organization:EnterpriseGroup")
class EnterpriseGroup(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 enterprise_id: Optional[pulumi.Input[_builtins.str]] = None,
                 members: Optional[pulumi.Input[Sequence[pulumi.Input[Union['_organization.EnterpriseGroupMemberArgs', '_organization.EnterpriseGroupMemberArgsDict']]]]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 organization_id: Optional[pulumi.Input[_builtins.str]] = None,
                 role_bindings: Optional[pulumi.Input[Sequence[pulumi.Input[Union['_organization.EnterpriseGroupRoleBindingArgs', '_organization.EnterpriseGroupRoleBindingArgsDict']]]]] = None,
                 __props__=None):
        """
        Create a EnterpriseGroup resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] description: Description of the group.
        :param pulumi.Input[_builtins.str] enterprise_id: Enterprise organization ID.
        :param pulumi.Input[Sequence[pulumi.Input[Union['_organization.EnterpriseGroupMemberArgs', '_organization.EnterpriseGroupMemberArgsDict']]]] members: List of group members.
        :param pulumi.Input[_builtins.str] name: Name of the group.
        :param pulumi.Input[_builtins.str] organization_id: Target organization ID for the group.
        :param pulumi.Input[Sequence[pulumi.Input[Union['_organization.EnterpriseGroupRoleBindingArgs', '_organization.EnterpriseGroupRoleBindingArgsDict']]]] role_bindings: List of role bindings for the group.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: EnterpriseGroupArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a EnterpriseGroup resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param EnterpriseGroupArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(EnterpriseGroupArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 enterprise_id: Optional[pulumi.Input[_builtins.str]] = None,
                 members: Optional[pulumi.Input[Sequence[pulumi.Input[Union['_organization.EnterpriseGroupMemberArgs', '_organization.EnterpriseGroupMemberArgsDict']]]]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 organization_id: Optional[pulumi.Input[_builtins.str]] = None,
                 role_bindings: Optional[pulumi.Input[Sequence[pulumi.Input[Union['_organization.EnterpriseGroupRoleBindingArgs', '_organization.EnterpriseGroupRoleBindingArgsDict']]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = EnterpriseGroupArgs.__new__(EnterpriseGroupArgs)

            __props__.__dict__["description"] = description
            if enterprise_id is None and not opts.urn:
                raise TypeError("Missing required property 'enterprise_id'")
            __props__.__dict__["enterprise_id"] = enterprise_id
            __props__.__dict__["members"] = members
            __props__.__dict__["name"] = name
            if organization_id is None and not opts.urn:
                raise TypeError("Missing required property 'organization_id'")
            __props__.__dict__["organization_id"] = organization_id
            __props__.__dict__["role_bindings"] = role_bindings
        super(EnterpriseGroup, __self__).__init__(
            'castai:organization:EnterpriseGroup',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            description: Optional[pulumi.Input[_builtins.str]] = None,
            enterprise_id: Optional[pulumi.Input[_builtins.str]] = None,
            members: Optional[pulumi.Input[Sequence[pulumi.Input[Union['_organization.EnterpriseGroupMemberArgs', '_organization.EnterpriseGroupMemberArgsDict']]]]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            organization_id: Optional[pulumi.Input[_builtins.str]] = None,
            role_bindings: Optional[pulumi.Input[Sequence[pulumi.Input[Union['_organization.EnterpriseGroupRoleBindingArgs', '_organization.EnterpriseGroupRoleBindingArgsDict']]]]] = None) -> 'EnterpriseGroup':
        """
        Get an existing EnterpriseGroup resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] description: Description of the group.
        :param pulumi.Input[_builtins.str] enterprise_id: Enterprise organization ID.
        :param pulumi.Input[Sequence[pulumi.Input[Union['_organization.EnterpriseGroupMemberArgs', '_organization.EnterpriseGroupMemberArgsDict']]]] members: List of group members.
        :param pulumi.Input[_builtins.str] name: Name of the group.
        :param pulumi.Input[_builtins.str] organization_id: Target organization ID for the group.
        :param pulumi.Input[Sequence[pulumi.Input[Union['_organization.EnterpriseGroupRoleBindingArgs', '_organization.EnterpriseGroupRoleBindingArgsDict']]]] role_bindings: List of role bindings for the group.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _EnterpriseGroupState.__new__(_EnterpriseGroupState)

        __props__.__dict__["description"] = description
        __props__.__dict__["enterprise_id"] = enterprise_id
        __props__.__dict__["members"] = members
        __props__.__dict__["name"] = name
        __props__.__dict__["organization_id"] = organization_id
        __props__.__dict__["role_bindings"] = role_bindings
        return EnterpriseGroup(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Description of the group.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="enterpriseId")
    def enterprise_id(self) -> pulumi.Output[_builtins.str]:
        """
        Enterprise organization ID.
        """
        return pulumi.get(self, "enterprise_id")

    @_builtins.property
    @pulumi.getter
    def members(self) -> pulumi.Output[Optional[Sequence['_organization.outputs.EnterpriseGroupMember']]]:
        """
        List of group members.
        """
        return pulumi.get(self, "members")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        Name of the group.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="organizationId")
    def organization_id(self) -> pulumi.Output[_builtins.str]:
        """
        Target organization ID for the group.
        """
        return pulumi.get(self, "organization_id")

    @_builtins.property
    @pulumi.getter(name="roleBindings")
    def role_bindings(self) -> pulumi.Output[Optional[Sequence['_organization.outputs.EnterpriseGroupRoleBinding']]]:
        """
        List of role bindings for the group.
        """
        return pulumi.get(self, "role_bindings")

