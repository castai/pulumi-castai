# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import rebalancing as _rebalancing

__all__ = [
    'GetHibernationScheduleDataSourceResult',
    'AwaitableGetHibernationScheduleDataSourceResult',
    'get_hibernation_schedule_data_source',
    'get_hibernation_schedule_data_source_output',
]

@pulumi.output_type
class GetHibernationScheduleDataSourceResult:
    """
    A collection of values returned by GetHibernationScheduleDataSource.
    """
    def __init__(__self__, cluster_assignments=None, enabled=None, id=None, name=None, organization_id=None, pause_configs=None, resume_configs=None):
        if cluster_assignments and not isinstance(cluster_assignments, list):
            raise TypeError("Expected argument 'cluster_assignments' to be a list")
        pulumi.set(__self__, "cluster_assignments", cluster_assignments)
        if enabled and not isinstance(enabled, bool):
            raise TypeError("Expected argument 'enabled' to be a bool")
        pulumi.set(__self__, "enabled", enabled)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if organization_id and not isinstance(organization_id, str):
            raise TypeError("Expected argument 'organization_id' to be a str")
        pulumi.set(__self__, "organization_id", organization_id)
        if pause_configs and not isinstance(pause_configs, list):
            raise TypeError("Expected argument 'pause_configs' to be a list")
        pulumi.set(__self__, "pause_configs", pause_configs)
        if resume_configs and not isinstance(resume_configs, list):
            raise TypeError("Expected argument 'resume_configs' to be a list")
        pulumi.set(__self__, "resume_configs", resume_configs)

    @_builtins.property
    @pulumi.getter(name="clusterAssignments")
    def cluster_assignments(self) -> Sequence['_rebalancing.outputs.GetHibernationScheduleDataSourceClusterAssignmentResult']:
        return pulumi.get(self, "cluster_assignments")

    @_builtins.property
    @pulumi.getter
    def enabled(self) -> _builtins.bool:
        return pulumi.get(self, "enabled")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="organizationId")
    def organization_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "organization_id")

    @_builtins.property
    @pulumi.getter(name="pauseConfigs")
    def pause_configs(self) -> Sequence['_rebalancing.outputs.GetHibernationScheduleDataSourcePauseConfigResult']:
        return pulumi.get(self, "pause_configs")

    @_builtins.property
    @pulumi.getter(name="resumeConfigs")
    def resume_configs(self) -> Sequence['_rebalancing.outputs.GetHibernationScheduleDataSourceResumeConfigResult']:
        return pulumi.get(self, "resume_configs")


class AwaitableGetHibernationScheduleDataSourceResult(GetHibernationScheduleDataSourceResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetHibernationScheduleDataSourceResult(
            cluster_assignments=self.cluster_assignments,
            enabled=self.enabled,
            id=self.id,
            name=self.name,
            organization_id=self.organization_id,
            pause_configs=self.pause_configs,
            resume_configs=self.resume_configs)


def get_hibernation_schedule_data_source(cluster_assignments: Optional[Sequence[Union['_rebalancing.GetHibernationScheduleDataSourceClusterAssignmentArgs', '_rebalancing.GetHibernationScheduleDataSourceClusterAssignmentArgsDict']]] = None,
                                         name: Optional[_builtins.str] = None,
                                         organization_id: Optional[_builtins.str] = None,
                                         opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetHibernationScheduleDataSourceResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['clusterAssignments'] = cluster_assignments
    __args__['name'] = name
    __args__['organizationId'] = organization_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('castai:rebalancing:GetHibernationScheduleDataSource', __args__, opts=opts, typ=GetHibernationScheduleDataSourceResult).value

    return AwaitableGetHibernationScheduleDataSourceResult(
        cluster_assignments=pulumi.get(__ret__, 'cluster_assignments'),
        enabled=pulumi.get(__ret__, 'enabled'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        organization_id=pulumi.get(__ret__, 'organization_id'),
        pause_configs=pulumi.get(__ret__, 'pause_configs'),
        resume_configs=pulumi.get(__ret__, 'resume_configs'))
def get_hibernation_schedule_data_source_output(cluster_assignments: Optional[pulumi.Input[Optional[Sequence[Union['_rebalancing.GetHibernationScheduleDataSourceClusterAssignmentArgs', '_rebalancing.GetHibernationScheduleDataSourceClusterAssignmentArgsDict']]]]] = None,
                                                name: Optional[pulumi.Input[_builtins.str]] = None,
                                                organization_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                                opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetHibernationScheduleDataSourceResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['clusterAssignments'] = cluster_assignments
    __args__['name'] = name
    __args__['organizationId'] = organization_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('castai:rebalancing:GetHibernationScheduleDataSource', __args__, opts=opts, typ=GetHibernationScheduleDataSourceResult)
    return __ret__.apply(lambda __response__: GetHibernationScheduleDataSourceResult(
        cluster_assignments=pulumi.get(__response__, 'cluster_assignments'),
        enabled=pulumi.get(__response__, 'enabled'),
        id=pulumi.get(__response__, 'id'),
        name=pulumi.get(__response__, 'name'),
        organization_id=pulumi.get(__response__, 'organization_id'),
        pause_configs=pulumi.get(__response__, 'pause_configs'),
        resume_configs=pulumi.get(__response__, 'resume_configs')))
