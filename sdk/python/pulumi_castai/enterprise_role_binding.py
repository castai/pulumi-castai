# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import iam as _iam

__all__ = ['EnterpriseRoleBindingArgs', 'EnterpriseRoleBinding']

@pulumi.input_type
class EnterpriseRoleBindingArgs:
    def __init__(__self__, *,
                 enterprise_id: pulumi.Input[_builtins.str],
                 organization_id: pulumi.Input[_builtins.str],
                 role_id: pulumi.Input[_builtins.str],
                 scopes: pulumi.Input['_iam.EnterpriseRoleBindingScopesArgs'],
                 subjects: pulumi.Input['_iam.EnterpriseRoleBindingSubjectsArgs'],
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a EnterpriseRoleBinding resource.
        :param pulumi.Input[_builtins.str] enterprise_id: Enterprise organization ID.
        :param pulumi.Input[_builtins.str] organization_id: Organization ID (either enterprise or it's child) where the role binding is created.
        :param pulumi.Input[_builtins.str] role_id: Role UUID to bind.
        :param pulumi.Input['_iam.EnterpriseRoleBindingScopesArgs'] scopes: Scopes (organization or cluster) for this role binding.
        :param pulumi.Input['_iam.EnterpriseRoleBindingSubjectsArgs'] subjects: Subjects (users, service accounts, groups) for this role binding.
        :param pulumi.Input[_builtins.str] description: Description of the role binding.
        :param pulumi.Input[_builtins.str] name: Name of the role binding.
        """
        pulumi.set(__self__, "enterprise_id", enterprise_id)
        pulumi.set(__self__, "organization_id", organization_id)
        pulumi.set(__self__, "role_id", role_id)
        pulumi.set(__self__, "scopes", scopes)
        pulumi.set(__self__, "subjects", subjects)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @_builtins.property
    @pulumi.getter(name="enterpriseId")
    def enterprise_id(self) -> pulumi.Input[_builtins.str]:
        """
        Enterprise organization ID.
        """
        return pulumi.get(self, "enterprise_id")

    @enterprise_id.setter
    def enterprise_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "enterprise_id", value)

    @_builtins.property
    @pulumi.getter(name="organizationId")
    def organization_id(self) -> pulumi.Input[_builtins.str]:
        """
        Organization ID (either enterprise or it's child) where the role binding is created.
        """
        return pulumi.get(self, "organization_id")

    @organization_id.setter
    def organization_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "organization_id", value)

    @_builtins.property
    @pulumi.getter(name="roleId")
    def role_id(self) -> pulumi.Input[_builtins.str]:
        """
        Role UUID to bind.
        """
        return pulumi.get(self, "role_id")

    @role_id.setter
    def role_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "role_id", value)

    @_builtins.property
    @pulumi.getter
    def scopes(self) -> pulumi.Input['_iam.EnterpriseRoleBindingScopesArgs']:
        """
        Scopes (organization or cluster) for this role binding.
        """
        return pulumi.get(self, "scopes")

    @scopes.setter
    def scopes(self, value: pulumi.Input['_iam.EnterpriseRoleBindingScopesArgs']):
        pulumi.set(self, "scopes", value)

    @_builtins.property
    @pulumi.getter
    def subjects(self) -> pulumi.Input['_iam.EnterpriseRoleBindingSubjectsArgs']:
        """
        Subjects (users, service accounts, groups) for this role binding.
        """
        return pulumi.get(self, "subjects")

    @subjects.setter
    def subjects(self, value: pulumi.Input['_iam.EnterpriseRoleBindingSubjectsArgs']):
        pulumi.set(self, "subjects", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Description of the role binding.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Name of the role binding.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class _EnterpriseRoleBindingState:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 enterprise_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 organization_id: Optional[pulumi.Input[_builtins.str]] = None,
                 role_id: Optional[pulumi.Input[_builtins.str]] = None,
                 scopes: Optional[pulumi.Input['_iam.EnterpriseRoleBindingScopesArgs']] = None,
                 subjects: Optional[pulumi.Input['_iam.EnterpriseRoleBindingSubjectsArgs']] = None):
        """
        Input properties used for looking up and filtering EnterpriseRoleBinding resources.
        :param pulumi.Input[_builtins.str] description: Description of the role binding.
        :param pulumi.Input[_builtins.str] enterprise_id: Enterprise organization ID.
        :param pulumi.Input[_builtins.str] name: Name of the role binding.
        :param pulumi.Input[_builtins.str] organization_id: Organization ID (either enterprise or it's child) where the role binding is created.
        :param pulumi.Input[_builtins.str] role_id: Role UUID to bind.
        :param pulumi.Input['_iam.EnterpriseRoleBindingScopesArgs'] scopes: Scopes (organization or cluster) for this role binding.
        :param pulumi.Input['_iam.EnterpriseRoleBindingSubjectsArgs'] subjects: Subjects (users, service accounts, groups) for this role binding.
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if enterprise_id is not None:
            pulumi.set(__self__, "enterprise_id", enterprise_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if organization_id is not None:
            pulumi.set(__self__, "organization_id", organization_id)
        if role_id is not None:
            pulumi.set(__self__, "role_id", role_id)
        if scopes is not None:
            pulumi.set(__self__, "scopes", scopes)
        if subjects is not None:
            pulumi.set(__self__, "subjects", subjects)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Description of the role binding.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="enterpriseId")
    def enterprise_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Enterprise organization ID.
        """
        return pulumi.get(self, "enterprise_id")

    @enterprise_id.setter
    def enterprise_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enterprise_id", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Name of the role binding.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="organizationId")
    def organization_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Organization ID (either enterprise or it's child) where the role binding is created.
        """
        return pulumi.get(self, "organization_id")

    @organization_id.setter
    def organization_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "organization_id", value)

    @_builtins.property
    @pulumi.getter(name="roleId")
    def role_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Role UUID to bind.
        """
        return pulumi.get(self, "role_id")

    @role_id.setter
    def role_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "role_id", value)

    @_builtins.property
    @pulumi.getter
    def scopes(self) -> Optional[pulumi.Input['_iam.EnterpriseRoleBindingScopesArgs']]:
        """
        Scopes (organization or cluster) for this role binding.
        """
        return pulumi.get(self, "scopes")

    @scopes.setter
    def scopes(self, value: Optional[pulumi.Input['_iam.EnterpriseRoleBindingScopesArgs']]):
        pulumi.set(self, "scopes", value)

    @_builtins.property
    @pulumi.getter
    def subjects(self) -> Optional[pulumi.Input['_iam.EnterpriseRoleBindingSubjectsArgs']]:
        """
        Subjects (users, service accounts, groups) for this role binding.
        """
        return pulumi.get(self, "subjects")

    @subjects.setter
    def subjects(self, value: Optional[pulumi.Input['_iam.EnterpriseRoleBindingSubjectsArgs']]):
        pulumi.set(self, "subjects", value)


@pulumi.type_token("castai:iam:EnterpriseRoleBinding")
class EnterpriseRoleBinding(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 enterprise_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 organization_id: Optional[pulumi.Input[_builtins.str]] = None,
                 role_id: Optional[pulumi.Input[_builtins.str]] = None,
                 scopes: Optional[pulumi.Input[Union['_iam.EnterpriseRoleBindingScopesArgs', '_iam.EnterpriseRoleBindingScopesArgsDict']]] = None,
                 subjects: Optional[pulumi.Input[Union['_iam.EnterpriseRoleBindingSubjectsArgs', '_iam.EnterpriseRoleBindingSubjectsArgsDict']]] = None,
                 __props__=None):
        """
        Create a EnterpriseRoleBinding resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] description: Description of the role binding.
        :param pulumi.Input[_builtins.str] enterprise_id: Enterprise organization ID.
        :param pulumi.Input[_builtins.str] name: Name of the role binding.
        :param pulumi.Input[_builtins.str] organization_id: Organization ID (either enterprise or it's child) where the role binding is created.
        :param pulumi.Input[_builtins.str] role_id: Role UUID to bind.
        :param pulumi.Input[Union['_iam.EnterpriseRoleBindingScopesArgs', '_iam.EnterpriseRoleBindingScopesArgsDict']] scopes: Scopes (organization or cluster) for this role binding.
        :param pulumi.Input[Union['_iam.EnterpriseRoleBindingSubjectsArgs', '_iam.EnterpriseRoleBindingSubjectsArgsDict']] subjects: Subjects (users, service accounts, groups) for this role binding.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: EnterpriseRoleBindingArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a EnterpriseRoleBinding resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param EnterpriseRoleBindingArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(EnterpriseRoleBindingArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 enterprise_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 organization_id: Optional[pulumi.Input[_builtins.str]] = None,
                 role_id: Optional[pulumi.Input[_builtins.str]] = None,
                 scopes: Optional[pulumi.Input[Union['_iam.EnterpriseRoleBindingScopesArgs', '_iam.EnterpriseRoleBindingScopesArgsDict']]] = None,
                 subjects: Optional[pulumi.Input[Union['_iam.EnterpriseRoleBindingSubjectsArgs', '_iam.EnterpriseRoleBindingSubjectsArgsDict']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = EnterpriseRoleBindingArgs.__new__(EnterpriseRoleBindingArgs)

            __props__.__dict__["description"] = description
            if enterprise_id is None and not opts.urn:
                raise TypeError("Missing required property 'enterprise_id'")
            __props__.__dict__["enterprise_id"] = enterprise_id
            __props__.__dict__["name"] = name
            if organization_id is None and not opts.urn:
                raise TypeError("Missing required property 'organization_id'")
            __props__.__dict__["organization_id"] = organization_id
            if role_id is None and not opts.urn:
                raise TypeError("Missing required property 'role_id'")
            __props__.__dict__["role_id"] = role_id
            if scopes is None and not opts.urn:
                raise TypeError("Missing required property 'scopes'")
            __props__.__dict__["scopes"] = scopes
            if subjects is None and not opts.urn:
                raise TypeError("Missing required property 'subjects'")
            __props__.__dict__["subjects"] = subjects
        super(EnterpriseRoleBinding, __self__).__init__(
            'castai:iam:EnterpriseRoleBinding',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            description: Optional[pulumi.Input[_builtins.str]] = None,
            enterprise_id: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            organization_id: Optional[pulumi.Input[_builtins.str]] = None,
            role_id: Optional[pulumi.Input[_builtins.str]] = None,
            scopes: Optional[pulumi.Input[Union['_iam.EnterpriseRoleBindingScopesArgs', '_iam.EnterpriseRoleBindingScopesArgsDict']]] = None,
            subjects: Optional[pulumi.Input[Union['_iam.EnterpriseRoleBindingSubjectsArgs', '_iam.EnterpriseRoleBindingSubjectsArgsDict']]] = None) -> 'EnterpriseRoleBinding':
        """
        Get an existing EnterpriseRoleBinding resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] description: Description of the role binding.
        :param pulumi.Input[_builtins.str] enterprise_id: Enterprise organization ID.
        :param pulumi.Input[_builtins.str] name: Name of the role binding.
        :param pulumi.Input[_builtins.str] organization_id: Organization ID (either enterprise or it's child) where the role binding is created.
        :param pulumi.Input[_builtins.str] role_id: Role UUID to bind.
        :param pulumi.Input[Union['_iam.EnterpriseRoleBindingScopesArgs', '_iam.EnterpriseRoleBindingScopesArgsDict']] scopes: Scopes (organization or cluster) for this role binding.
        :param pulumi.Input[Union['_iam.EnterpriseRoleBindingSubjectsArgs', '_iam.EnterpriseRoleBindingSubjectsArgsDict']] subjects: Subjects (users, service accounts, groups) for this role binding.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _EnterpriseRoleBindingState.__new__(_EnterpriseRoleBindingState)

        __props__.__dict__["description"] = description
        __props__.__dict__["enterprise_id"] = enterprise_id
        __props__.__dict__["name"] = name
        __props__.__dict__["organization_id"] = organization_id
        __props__.__dict__["role_id"] = role_id
        __props__.__dict__["scopes"] = scopes
        __props__.__dict__["subjects"] = subjects
        return EnterpriseRoleBinding(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Description of the role binding.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="enterpriseId")
    def enterprise_id(self) -> pulumi.Output[_builtins.str]:
        """
        Enterprise organization ID.
        """
        return pulumi.get(self, "enterprise_id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        Name of the role binding.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="organizationId")
    def organization_id(self) -> pulumi.Output[_builtins.str]:
        """
        Organization ID (either enterprise or it's child) where the role binding is created.
        """
        return pulumi.get(self, "organization_id")

    @_builtins.property
    @pulumi.getter(name="roleId")
    def role_id(self) -> pulumi.Output[_builtins.str]:
        """
        Role UUID to bind.
        """
        return pulumi.get(self, "role_id")

    @_builtins.property
    @pulumi.getter
    def scopes(self) -> pulumi.Output['_iam.outputs.EnterpriseRoleBindingScopes']:
        """
        Scopes (organization or cluster) for this role binding.
        """
        return pulumi.get(self, "scopes")

    @_builtins.property
    @pulumi.getter
    def subjects(self) -> pulumi.Output['_iam.outputs.EnterpriseRoleBindingSubjects']:
        """
        Subjects (users, service accounts, groups) for this role binding.
        """
        return pulumi.get(self, "subjects")

