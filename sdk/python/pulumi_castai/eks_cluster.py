# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['EksClusterArgs', 'EksCluster']

@pulumi.input_type
class EksClusterArgs:
    def __init__(__self__, *,
                 account_id: pulumi.Input[_builtins.str],
                 region: pulumi.Input[_builtins.str],
                 assume_role_arn: Optional[pulumi.Input[_builtins.str]] = None,
                 delete_nodes_on_disconnect: Optional[pulumi.Input[_builtins.bool]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a EksCluster resource.
        :param pulumi.Input[_builtins.str] account_id: ID of AWS account
        :param pulumi.Input[_builtins.str] region: AWS region where the cluster is placed
        :param pulumi.Input[_builtins.str] assume_role_arn: AWS IAM role ARN that will be assumed by CAST AI user. This role should allow `sts:AssumeRole` action for CAST AI user.
        :param pulumi.Input[_builtins.bool] delete_nodes_on_disconnect: Should CAST AI remove nodes managed by CAST AI on disconnect
        :param pulumi.Input[_builtins.str] name: name of your EKS cluster
        """
        pulumi.set(__self__, "account_id", account_id)
        pulumi.set(__self__, "region", region)
        if assume_role_arn is not None:
            pulumi.set(__self__, "assume_role_arn", assume_role_arn)
        if delete_nodes_on_disconnect is not None:
            pulumi.set(__self__, "delete_nodes_on_disconnect", delete_nodes_on_disconnect)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @_builtins.property
    @pulumi.getter(name="accountId")
    def account_id(self) -> pulumi.Input[_builtins.str]:
        """
        ID of AWS account
        """
        return pulumi.get(self, "account_id")

    @account_id.setter
    def account_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "account_id", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Input[_builtins.str]:
        """
        AWS region where the cluster is placed
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="assumeRoleArn")
    def assume_role_arn(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        AWS IAM role ARN that will be assumed by CAST AI user. This role should allow `sts:AssumeRole` action for CAST AI user.
        """
        return pulumi.get(self, "assume_role_arn")

    @assume_role_arn.setter
    def assume_role_arn(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "assume_role_arn", value)

    @_builtins.property
    @pulumi.getter(name="deleteNodesOnDisconnect")
    def delete_nodes_on_disconnect(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Should CAST AI remove nodes managed by CAST AI on disconnect
        """
        return pulumi.get(self, "delete_nodes_on_disconnect")

    @delete_nodes_on_disconnect.setter
    def delete_nodes_on_disconnect(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "delete_nodes_on_disconnect", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        name of your EKS cluster
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class _EksClusterState:
    def __init__(__self__, *,
                 account_id: Optional[pulumi.Input[_builtins.str]] = None,
                 assume_role_arn: Optional[pulumi.Input[_builtins.str]] = None,
                 cluster_token: Optional[pulumi.Input[_builtins.str]] = None,
                 credentials_id: Optional[pulumi.Input[_builtins.str]] = None,
                 delete_nodes_on_disconnect: Optional[pulumi.Input[_builtins.bool]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering EksCluster resources.
        :param pulumi.Input[_builtins.str] account_id: ID of AWS account
        :param pulumi.Input[_builtins.str] assume_role_arn: AWS IAM role ARN that will be assumed by CAST AI user. This role should allow `sts:AssumeRole` action for CAST AI user.
        :param pulumi.Input[_builtins.str] cluster_token: computed value to store cluster token
        :param pulumi.Input[_builtins.str] credentials_id: CAST AI internal credentials ID
        :param pulumi.Input[_builtins.bool] delete_nodes_on_disconnect: Should CAST AI remove nodes managed by CAST AI on disconnect
        :param pulumi.Input[_builtins.str] name: name of your EKS cluster
        :param pulumi.Input[_builtins.str] region: AWS region where the cluster is placed
        """
        if account_id is not None:
            pulumi.set(__self__, "account_id", account_id)
        if assume_role_arn is not None:
            pulumi.set(__self__, "assume_role_arn", assume_role_arn)
        if cluster_token is not None:
            pulumi.set(__self__, "cluster_token", cluster_token)
        if credentials_id is not None:
            pulumi.set(__self__, "credentials_id", credentials_id)
        if delete_nodes_on_disconnect is not None:
            pulumi.set(__self__, "delete_nodes_on_disconnect", delete_nodes_on_disconnect)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter(name="accountId")
    def account_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        ID of AWS account
        """
        return pulumi.get(self, "account_id")

    @account_id.setter
    def account_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "account_id", value)

    @_builtins.property
    @pulumi.getter(name="assumeRoleArn")
    def assume_role_arn(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        AWS IAM role ARN that will be assumed by CAST AI user. This role should allow `sts:AssumeRole` action for CAST AI user.
        """
        return pulumi.get(self, "assume_role_arn")

    @assume_role_arn.setter
    def assume_role_arn(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "assume_role_arn", value)

    @_builtins.property
    @pulumi.getter(name="clusterToken")
    def cluster_token(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        computed value to store cluster token
        """
        return pulumi.get(self, "cluster_token")

    @cluster_token.setter
    def cluster_token(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cluster_token", value)

    @_builtins.property
    @pulumi.getter(name="credentialsId")
    def credentials_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        CAST AI internal credentials ID
        """
        return pulumi.get(self, "credentials_id")

    @credentials_id.setter
    def credentials_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "credentials_id", value)

    @_builtins.property
    @pulumi.getter(name="deleteNodesOnDisconnect")
    def delete_nodes_on_disconnect(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Should CAST AI remove nodes managed by CAST AI on disconnect
        """
        return pulumi.get(self, "delete_nodes_on_disconnect")

    @delete_nodes_on_disconnect.setter
    def delete_nodes_on_disconnect(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "delete_nodes_on_disconnect", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        name of your EKS cluster
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        AWS region where the cluster is placed
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)


@pulumi.type_token("castai:aws:EksCluster")
class EksCluster(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 account_id: Optional[pulumi.Input[_builtins.str]] = None,
                 assume_role_arn: Optional[pulumi.Input[_builtins.str]] = None,
                 delete_nodes_on_disconnect: Optional[pulumi.Input[_builtins.bool]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Create a EksCluster resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] account_id: ID of AWS account
        :param pulumi.Input[_builtins.str] assume_role_arn: AWS IAM role ARN that will be assumed by CAST AI user. This role should allow `sts:AssumeRole` action for CAST AI user.
        :param pulumi.Input[_builtins.bool] delete_nodes_on_disconnect: Should CAST AI remove nodes managed by CAST AI on disconnect
        :param pulumi.Input[_builtins.str] name: name of your EKS cluster
        :param pulumi.Input[_builtins.str] region: AWS region where the cluster is placed
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: EksClusterArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a EksCluster resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param EksClusterArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(EksClusterArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 account_id: Optional[pulumi.Input[_builtins.str]] = None,
                 assume_role_arn: Optional[pulumi.Input[_builtins.str]] = None,
                 delete_nodes_on_disconnect: Optional[pulumi.Input[_builtins.bool]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = EksClusterArgs.__new__(EksClusterArgs)

            if account_id is None and not opts.urn:
                raise TypeError("Missing required property 'account_id'")
            __props__.__dict__["account_id"] = account_id
            __props__.__dict__["assume_role_arn"] = assume_role_arn
            __props__.__dict__["delete_nodes_on_disconnect"] = delete_nodes_on_disconnect
            __props__.__dict__["name"] = name
            if region is None and not opts.urn:
                raise TypeError("Missing required property 'region'")
            __props__.__dict__["region"] = region
            __props__.__dict__["cluster_token"] = None
            __props__.__dict__["credentials_id"] = None
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["clusterToken"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(EksCluster, __self__).__init__(
            'castai:aws:EksCluster',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            account_id: Optional[pulumi.Input[_builtins.str]] = None,
            assume_role_arn: Optional[pulumi.Input[_builtins.str]] = None,
            cluster_token: Optional[pulumi.Input[_builtins.str]] = None,
            credentials_id: Optional[pulumi.Input[_builtins.str]] = None,
            delete_nodes_on_disconnect: Optional[pulumi.Input[_builtins.bool]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None) -> 'EksCluster':
        """
        Get an existing EksCluster resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] account_id: ID of AWS account
        :param pulumi.Input[_builtins.str] assume_role_arn: AWS IAM role ARN that will be assumed by CAST AI user. This role should allow `sts:AssumeRole` action for CAST AI user.
        :param pulumi.Input[_builtins.str] cluster_token: computed value to store cluster token
        :param pulumi.Input[_builtins.str] credentials_id: CAST AI internal credentials ID
        :param pulumi.Input[_builtins.bool] delete_nodes_on_disconnect: Should CAST AI remove nodes managed by CAST AI on disconnect
        :param pulumi.Input[_builtins.str] name: name of your EKS cluster
        :param pulumi.Input[_builtins.str] region: AWS region where the cluster is placed
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _EksClusterState.__new__(_EksClusterState)

        __props__.__dict__["account_id"] = account_id
        __props__.__dict__["assume_role_arn"] = assume_role_arn
        __props__.__dict__["cluster_token"] = cluster_token
        __props__.__dict__["credentials_id"] = credentials_id
        __props__.__dict__["delete_nodes_on_disconnect"] = delete_nodes_on_disconnect
        __props__.__dict__["name"] = name
        __props__.__dict__["region"] = region
        return EksCluster(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="accountId")
    def account_id(self) -> pulumi.Output[_builtins.str]:
        """
        ID of AWS account
        """
        return pulumi.get(self, "account_id")

    @_builtins.property
    @pulumi.getter(name="assumeRoleArn")
    def assume_role_arn(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        AWS IAM role ARN that will be assumed by CAST AI user. This role should allow `sts:AssumeRole` action for CAST AI user.
        """
        return pulumi.get(self, "assume_role_arn")

    @_builtins.property
    @pulumi.getter(name="clusterToken")
    def cluster_token(self) -> pulumi.Output[_builtins.str]:
        """
        computed value to store cluster token
        """
        return pulumi.get(self, "cluster_token")

    @_builtins.property
    @pulumi.getter(name="credentialsId")
    def credentials_id(self) -> pulumi.Output[_builtins.str]:
        """
        CAST AI internal credentials ID
        """
        return pulumi.get(self, "credentials_id")

    @_builtins.property
    @pulumi.getter(name="deleteNodesOnDisconnect")
    def delete_nodes_on_disconnect(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Should CAST AI remove nodes managed by CAST AI on disconnect
        """
        return pulumi.get(self, "delete_nodes_on_disconnect")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        name of your EKS cluster
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        AWS region where the cluster is placed
        """
        return pulumi.get(self, "region")

