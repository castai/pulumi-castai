# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import organization as _organization

__all__ = ['SSOConnectionArgs', 'SSOConnection']

@pulumi.input_type
class SSOConnectionArgs:
    def __init__(__self__, *,
                 email_domain: pulumi.Input[_builtins.str],
                 aad: Optional[pulumi.Input['_organization.SSOConnectionAadArgs']] = None,
                 additional_email_domains: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 okta: Optional[pulumi.Input['_organization.SSOConnectionOktaArgs']] = None):
        """
        The set of arguments for constructing a SSOConnection resource.
        :param pulumi.Input[_builtins.str] email_domain: Email domain of the connection
        :param pulumi.Input['_organization.SSOConnectionAadArgs'] aad: Azure AD connector
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] additional_email_domains: Additional email domains that will be allowed to sign in via the connection
        :param pulumi.Input[_builtins.str] name: Connection name
        :param pulumi.Input['_organization.SSOConnectionOktaArgs'] okta: Okta connector
        """
        pulumi.set(__self__, "email_domain", email_domain)
        if aad is not None:
            pulumi.set(__self__, "aad", aad)
        if additional_email_domains is not None:
            pulumi.set(__self__, "additional_email_domains", additional_email_domains)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if okta is not None:
            pulumi.set(__self__, "okta", okta)

    @_builtins.property
    @pulumi.getter(name="emailDomain")
    def email_domain(self) -> pulumi.Input[_builtins.str]:
        """
        Email domain of the connection
        """
        return pulumi.get(self, "email_domain")

    @email_domain.setter
    def email_domain(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "email_domain", value)

    @_builtins.property
    @pulumi.getter
    def aad(self) -> Optional[pulumi.Input['_organization.SSOConnectionAadArgs']]:
        """
        Azure AD connector
        """
        return pulumi.get(self, "aad")

    @aad.setter
    def aad(self, value: Optional[pulumi.Input['_organization.SSOConnectionAadArgs']]):
        pulumi.set(self, "aad", value)

    @_builtins.property
    @pulumi.getter(name="additionalEmailDomains")
    def additional_email_domains(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Additional email domains that will be allowed to sign in via the connection
        """
        return pulumi.get(self, "additional_email_domains")

    @additional_email_domains.setter
    def additional_email_domains(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "additional_email_domains", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Connection name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def okta(self) -> Optional[pulumi.Input['_organization.SSOConnectionOktaArgs']]:
        """
        Okta connector
        """
        return pulumi.get(self, "okta")

    @okta.setter
    def okta(self, value: Optional[pulumi.Input['_organization.SSOConnectionOktaArgs']]):
        pulumi.set(self, "okta", value)


@pulumi.input_type
class _SSOConnectionState:
    def __init__(__self__, *,
                 aad: Optional[pulumi.Input['_organization.SSOConnectionAadArgs']] = None,
                 additional_email_domains: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 email_domain: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 okta: Optional[pulumi.Input['_organization.SSOConnectionOktaArgs']] = None):
        """
        Input properties used for looking up and filtering SSOConnection resources.
        :param pulumi.Input['_organization.SSOConnectionAadArgs'] aad: Azure AD connector
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] additional_email_domains: Additional email domains that will be allowed to sign in via the connection
        :param pulumi.Input[_builtins.str] email_domain: Email domain of the connection
        :param pulumi.Input[_builtins.str] name: Connection name
        :param pulumi.Input['_organization.SSOConnectionOktaArgs'] okta: Okta connector
        """
        if aad is not None:
            pulumi.set(__self__, "aad", aad)
        if additional_email_domains is not None:
            pulumi.set(__self__, "additional_email_domains", additional_email_domains)
        if email_domain is not None:
            pulumi.set(__self__, "email_domain", email_domain)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if okta is not None:
            pulumi.set(__self__, "okta", okta)

    @_builtins.property
    @pulumi.getter
    def aad(self) -> Optional[pulumi.Input['_organization.SSOConnectionAadArgs']]:
        """
        Azure AD connector
        """
        return pulumi.get(self, "aad")

    @aad.setter
    def aad(self, value: Optional[pulumi.Input['_organization.SSOConnectionAadArgs']]):
        pulumi.set(self, "aad", value)

    @_builtins.property
    @pulumi.getter(name="additionalEmailDomains")
    def additional_email_domains(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Additional email domains that will be allowed to sign in via the connection
        """
        return pulumi.get(self, "additional_email_domains")

    @additional_email_domains.setter
    def additional_email_domains(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "additional_email_domains", value)

    @_builtins.property
    @pulumi.getter(name="emailDomain")
    def email_domain(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Email domain of the connection
        """
        return pulumi.get(self, "email_domain")

    @email_domain.setter
    def email_domain(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "email_domain", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Connection name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def okta(self) -> Optional[pulumi.Input['_organization.SSOConnectionOktaArgs']]:
        """
        Okta connector
        """
        return pulumi.get(self, "okta")

    @okta.setter
    def okta(self, value: Optional[pulumi.Input['_organization.SSOConnectionOktaArgs']]):
        pulumi.set(self, "okta", value)


@pulumi.type_token("castai:organization:SSOConnection")
class SSOConnection(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 aad: Optional[pulumi.Input[Union['_organization.SSOConnectionAadArgs', '_organization.SSOConnectionAadArgsDict']]] = None,
                 additional_email_domains: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 email_domain: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 okta: Optional[pulumi.Input[Union['_organization.SSOConnectionOktaArgs', '_organization.SSOConnectionOktaArgsDict']]] = None,
                 __props__=None):
        """
        Create a SSOConnection resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Union['_organization.SSOConnectionAadArgs', '_organization.SSOConnectionAadArgsDict']] aad: Azure AD connector
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] additional_email_domains: Additional email domains that will be allowed to sign in via the connection
        :param pulumi.Input[_builtins.str] email_domain: Email domain of the connection
        :param pulumi.Input[_builtins.str] name: Connection name
        :param pulumi.Input[Union['_organization.SSOConnectionOktaArgs', '_organization.SSOConnectionOktaArgsDict']] okta: Okta connector
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: SSOConnectionArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a SSOConnection resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param SSOConnectionArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(SSOConnectionArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 aad: Optional[pulumi.Input[Union['_organization.SSOConnectionAadArgs', '_organization.SSOConnectionAadArgsDict']]] = None,
                 additional_email_domains: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 email_domain: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 okta: Optional[pulumi.Input[Union['_organization.SSOConnectionOktaArgs', '_organization.SSOConnectionOktaArgsDict']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = SSOConnectionArgs.__new__(SSOConnectionArgs)

            __props__.__dict__["aad"] = aad
            __props__.__dict__["additional_email_domains"] = additional_email_domains
            if email_domain is None and not opts.urn:
                raise TypeError("Missing required property 'email_domain'")
            __props__.__dict__["email_domain"] = email_domain
            __props__.__dict__["name"] = name
            __props__.__dict__["okta"] = okta
        super(SSOConnection, __self__).__init__(
            'castai:organization:SSOConnection',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            aad: Optional[pulumi.Input[Union['_organization.SSOConnectionAadArgs', '_organization.SSOConnectionAadArgsDict']]] = None,
            additional_email_domains: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            email_domain: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            okta: Optional[pulumi.Input[Union['_organization.SSOConnectionOktaArgs', '_organization.SSOConnectionOktaArgsDict']]] = None) -> 'SSOConnection':
        """
        Get an existing SSOConnection resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Union['_organization.SSOConnectionAadArgs', '_organization.SSOConnectionAadArgsDict']] aad: Azure AD connector
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] additional_email_domains: Additional email domains that will be allowed to sign in via the connection
        :param pulumi.Input[_builtins.str] email_domain: Email domain of the connection
        :param pulumi.Input[_builtins.str] name: Connection name
        :param pulumi.Input[Union['_organization.SSOConnectionOktaArgs', '_organization.SSOConnectionOktaArgsDict']] okta: Okta connector
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _SSOConnectionState.__new__(_SSOConnectionState)

        __props__.__dict__["aad"] = aad
        __props__.__dict__["additional_email_domains"] = additional_email_domains
        __props__.__dict__["email_domain"] = email_domain
        __props__.__dict__["name"] = name
        __props__.__dict__["okta"] = okta
        return SSOConnection(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def aad(self) -> pulumi.Output[Optional['_organization.outputs.SSOConnectionAad']]:
        """
        Azure AD connector
        """
        return pulumi.get(self, "aad")

    @_builtins.property
    @pulumi.getter(name="additionalEmailDomains")
    def additional_email_domains(self) -> pulumi.Output[Optional[Sequence[_builtins.str]]]:
        """
        Additional email domains that will be allowed to sign in via the connection
        """
        return pulumi.get(self, "additional_email_domains")

    @_builtins.property
    @pulumi.getter(name="emailDomain")
    def email_domain(self) -> pulumi.Output[_builtins.str]:
        """
        Email domain of the connection
        """
        return pulumi.get(self, "email_domain")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        Connection name
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def okta(self) -> pulumi.Output[Optional['_organization.outputs.SSOConnectionOkta']]:
        """
        Okta connector
        """
        return pulumi.get(self, "okta")

