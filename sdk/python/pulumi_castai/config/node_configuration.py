# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['NodeConfigurationArgs', 'NodeConfiguration']

@pulumi.input_type
class NodeConfigurationArgs:
    def __init__(__self__, *,
                 cluster_id: pulumi.Input[_builtins.str],
                 subnets: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]],
                 aks: Optional[pulumi.Input['NodeConfigurationAksArgs']] = None,
                 container_runtime: Optional[pulumi.Input[_builtins.str]] = None,
                 disk_cpu_ratio: Optional[pulumi.Input[_builtins.int]] = None,
                 docker_config: Optional[pulumi.Input[_builtins.str]] = None,
                 drain_timeout_sec: Optional[pulumi.Input[_builtins.int]] = None,
                 eks: Optional[pulumi.Input['NodeConfigurationEksArgs']] = None,
                 gke: Optional[pulumi.Input['NodeConfigurationGkeArgs']] = None,
                 image: Optional[pulumi.Input[_builtins.str]] = None,
                 init_script: Optional[pulumi.Input[_builtins.str]] = None,
                 kops: Optional[pulumi.Input['NodeConfigurationKopsArgs']] = None,
                 kubelet_config: Optional[pulumi.Input[_builtins.str]] = None,
                 min_disk_size: Optional[pulumi.Input[_builtins.int]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 ssh_public_key: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None):
        """
        The set of arguments for constructing a NodeConfiguration resource.
        :param pulumi.Input[_builtins.str] cluster_id: CAST AI cluster id
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] subnets: Subnet ids to be used for provisioned nodes
        :param pulumi.Input[_builtins.str] container_runtime: Optional container runtime to be used by kubelet. Applicable for EKS only.  Supported values include: `dockerd`, `containerd`
        :param pulumi.Input[_builtins.int] disk_cpu_ratio: Disk to CPU ratio. Sets the number of GiBs to be added for every CPU on the node. Defaults to 0
        :param pulumi.Input[_builtins.str] docker_config: Optional docker daemon configuration properties in JSON format. Provide only properties that you want to override. Applicable for EKS only. [Available values](https://docs.docker.com/engine/reference/commandline/dockerd/#daemon-configuration-file)
        :param pulumi.Input[_builtins.int] drain_timeout_sec: Timeout in seconds for draining the node. Defaults to 0
        :param pulumi.Input[_builtins.str] image: Image to be used while provisioning the node. If nothing is provided will be resolved to latest available image based on Image family, Kubernetes version and node architecture if possible. See Cast.ai documentation for details.
        :param pulumi.Input[_builtins.str] init_script: Init script to be run on your instance at launch. Should not contain any sensitive data. Value should be base64 encoded
        :param pulumi.Input[_builtins.str] kubelet_config: Optional kubelet configuration properties in JSON format. Provide only properties that you want to override. Applicable for EKS only. [Available values](https://kubernetes.io/docs/reference/config-api/kubelet-config.v1beta1/)
        :param pulumi.Input[_builtins.int] min_disk_size: Minimal disk size in GiB. Defaults to 100, min 30, max 65536
        :param pulumi.Input[_builtins.str] ssh_public_key: SSH public key to be used for provisioned nodes
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] tags: Tags to be added on cloud instances for provisioned nodes
        """
        pulumi.set(__self__, "cluster_id", cluster_id)
        pulumi.set(__self__, "subnets", subnets)
        if aks is not None:
            pulumi.set(__self__, "aks", aks)
        if container_runtime is not None:
            pulumi.set(__self__, "container_runtime", container_runtime)
        if disk_cpu_ratio is not None:
            pulumi.set(__self__, "disk_cpu_ratio", disk_cpu_ratio)
        if docker_config is not None:
            pulumi.set(__self__, "docker_config", docker_config)
        if drain_timeout_sec is not None:
            pulumi.set(__self__, "drain_timeout_sec", drain_timeout_sec)
        if eks is not None:
            pulumi.set(__self__, "eks", eks)
        if gke is not None:
            pulumi.set(__self__, "gke", gke)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if init_script is not None:
            pulumi.set(__self__, "init_script", init_script)
        if kops is not None:
            pulumi.set(__self__, "kops", kops)
        if kubelet_config is not None:
            pulumi.set(__self__, "kubelet_config", kubelet_config)
        if min_disk_size is not None:
            pulumi.set(__self__, "min_disk_size", min_disk_size)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if ssh_public_key is not None:
            pulumi.set(__self__, "ssh_public_key", ssh_public_key)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @_builtins.property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> pulumi.Input[_builtins.str]:
        """
        CAST AI cluster id
        """
        return pulumi.get(self, "cluster_id")

    @cluster_id.setter
    def cluster_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "cluster_id", value)

    @_builtins.property
    @pulumi.getter
    def subnets(self) -> pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]:
        """
        Subnet ids to be used for provisioned nodes
        """
        return pulumi.get(self, "subnets")

    @subnets.setter
    def subnets(self, value: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]):
        pulumi.set(self, "subnets", value)

    @_builtins.property
    @pulumi.getter
    def aks(self) -> Optional[pulumi.Input['NodeConfigurationAksArgs']]:
        return pulumi.get(self, "aks")

    @aks.setter
    def aks(self, value: Optional[pulumi.Input['NodeConfigurationAksArgs']]):
        pulumi.set(self, "aks", value)

    @_builtins.property
    @pulumi.getter(name="containerRuntime")
    def container_runtime(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Optional container runtime to be used by kubelet. Applicable for EKS only.  Supported values include: `dockerd`, `containerd`
        """
        return pulumi.get(self, "container_runtime")

    @container_runtime.setter
    def container_runtime(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "container_runtime", value)

    @_builtins.property
    @pulumi.getter(name="diskCpuRatio")
    def disk_cpu_ratio(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Disk to CPU ratio. Sets the number of GiBs to be added for every CPU on the node. Defaults to 0
        """
        return pulumi.get(self, "disk_cpu_ratio")

    @disk_cpu_ratio.setter
    def disk_cpu_ratio(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "disk_cpu_ratio", value)

    @_builtins.property
    @pulumi.getter(name="dockerConfig")
    def docker_config(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Optional docker daemon configuration properties in JSON format. Provide only properties that you want to override. Applicable for EKS only. [Available values](https://docs.docker.com/engine/reference/commandline/dockerd/#daemon-configuration-file)
        """
        return pulumi.get(self, "docker_config")

    @docker_config.setter
    def docker_config(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "docker_config", value)

    @_builtins.property
    @pulumi.getter(name="drainTimeoutSec")
    def drain_timeout_sec(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Timeout in seconds for draining the node. Defaults to 0
        """
        return pulumi.get(self, "drain_timeout_sec")

    @drain_timeout_sec.setter
    def drain_timeout_sec(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "drain_timeout_sec", value)

    @_builtins.property
    @pulumi.getter
    def eks(self) -> Optional[pulumi.Input['NodeConfigurationEksArgs']]:
        return pulumi.get(self, "eks")

    @eks.setter
    def eks(self, value: Optional[pulumi.Input['NodeConfigurationEksArgs']]):
        pulumi.set(self, "eks", value)

    @_builtins.property
    @pulumi.getter
    def gke(self) -> Optional[pulumi.Input['NodeConfigurationGkeArgs']]:
        return pulumi.get(self, "gke")

    @gke.setter
    def gke(self, value: Optional[pulumi.Input['NodeConfigurationGkeArgs']]):
        pulumi.set(self, "gke", value)

    @_builtins.property
    @pulumi.getter
    def image(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Image to be used while provisioning the node. If nothing is provided will be resolved to latest available image based on Image family, Kubernetes version and node architecture if possible. See Cast.ai documentation for details.
        """
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "image", value)

    @_builtins.property
    @pulumi.getter(name="initScript")
    def init_script(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Init script to be run on your instance at launch. Should not contain any sensitive data. Value should be base64 encoded
        """
        return pulumi.get(self, "init_script")

    @init_script.setter
    def init_script(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "init_script", value)

    @_builtins.property
    @pulumi.getter
    def kops(self) -> Optional[pulumi.Input['NodeConfigurationKopsArgs']]:
        return pulumi.get(self, "kops")

    @kops.setter
    def kops(self, value: Optional[pulumi.Input['NodeConfigurationKopsArgs']]):
        pulumi.set(self, "kops", value)

    @_builtins.property
    @pulumi.getter(name="kubeletConfig")
    def kubelet_config(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Optional kubelet configuration properties in JSON format. Provide only properties that you want to override. Applicable for EKS only. [Available values](https://kubernetes.io/docs/reference/config-api/kubelet-config.v1beta1/)
        """
        return pulumi.get(self, "kubelet_config")

    @kubelet_config.setter
    def kubelet_config(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "kubelet_config", value)

    @_builtins.property
    @pulumi.getter(name="minDiskSize")
    def min_disk_size(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Minimal disk size in GiB. Defaults to 100, min 30, max 65536
        """
        return pulumi.get(self, "min_disk_size")

    @min_disk_size.setter
    def min_disk_size(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "min_disk_size", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="sshPublicKey")
    def ssh_public_key(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        SSH public key to be used for provisioned nodes
        """
        return pulumi.get(self, "ssh_public_key")

    @ssh_public_key.setter
    def ssh_public_key(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ssh_public_key", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        Tags to be added on cloud instances for provisioned nodes
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "tags", value)


@pulumi.input_type
class _NodeConfigurationState:
    def __init__(__self__, *,
                 aks: Optional[pulumi.Input['NodeConfigurationAksArgs']] = None,
                 cluster_id: Optional[pulumi.Input[_builtins.str]] = None,
                 container_runtime: Optional[pulumi.Input[_builtins.str]] = None,
                 disk_cpu_ratio: Optional[pulumi.Input[_builtins.int]] = None,
                 docker_config: Optional[pulumi.Input[_builtins.str]] = None,
                 drain_timeout_sec: Optional[pulumi.Input[_builtins.int]] = None,
                 eks: Optional[pulumi.Input['NodeConfigurationEksArgs']] = None,
                 gke: Optional[pulumi.Input['NodeConfigurationGkeArgs']] = None,
                 image: Optional[pulumi.Input[_builtins.str]] = None,
                 init_script: Optional[pulumi.Input[_builtins.str]] = None,
                 kops: Optional[pulumi.Input['NodeConfigurationKopsArgs']] = None,
                 kubelet_config: Optional[pulumi.Input[_builtins.str]] = None,
                 min_disk_size: Optional[pulumi.Input[_builtins.int]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 ssh_public_key: Optional[pulumi.Input[_builtins.str]] = None,
                 subnets: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None):
        """
        Input properties used for looking up and filtering NodeConfiguration resources.
        :param pulumi.Input[_builtins.str] cluster_id: CAST AI cluster id
        :param pulumi.Input[_builtins.str] container_runtime: Optional container runtime to be used by kubelet. Applicable for EKS only.  Supported values include: `dockerd`, `containerd`
        :param pulumi.Input[_builtins.int] disk_cpu_ratio: Disk to CPU ratio. Sets the number of GiBs to be added for every CPU on the node. Defaults to 0
        :param pulumi.Input[_builtins.str] docker_config: Optional docker daemon configuration properties in JSON format. Provide only properties that you want to override. Applicable for EKS only. [Available values](https://docs.docker.com/engine/reference/commandline/dockerd/#daemon-configuration-file)
        :param pulumi.Input[_builtins.int] drain_timeout_sec: Timeout in seconds for draining the node. Defaults to 0
        :param pulumi.Input[_builtins.str] image: Image to be used while provisioning the node. If nothing is provided will be resolved to latest available image based on Image family, Kubernetes version and node architecture if possible. See Cast.ai documentation for details.
        :param pulumi.Input[_builtins.str] init_script: Init script to be run on your instance at launch. Should not contain any sensitive data. Value should be base64 encoded
        :param pulumi.Input[_builtins.str] kubelet_config: Optional kubelet configuration properties in JSON format. Provide only properties that you want to override. Applicable for EKS only. [Available values](https://kubernetes.io/docs/reference/config-api/kubelet-config.v1beta1/)
        :param pulumi.Input[_builtins.int] min_disk_size: Minimal disk size in GiB. Defaults to 100, min 30, max 65536
        :param pulumi.Input[_builtins.str] ssh_public_key: SSH public key to be used for provisioned nodes
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] subnets: Subnet ids to be used for provisioned nodes
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] tags: Tags to be added on cloud instances for provisioned nodes
        """
        if aks is not None:
            pulumi.set(__self__, "aks", aks)
        if cluster_id is not None:
            pulumi.set(__self__, "cluster_id", cluster_id)
        if container_runtime is not None:
            pulumi.set(__self__, "container_runtime", container_runtime)
        if disk_cpu_ratio is not None:
            pulumi.set(__self__, "disk_cpu_ratio", disk_cpu_ratio)
        if docker_config is not None:
            pulumi.set(__self__, "docker_config", docker_config)
        if drain_timeout_sec is not None:
            pulumi.set(__self__, "drain_timeout_sec", drain_timeout_sec)
        if eks is not None:
            pulumi.set(__self__, "eks", eks)
        if gke is not None:
            pulumi.set(__self__, "gke", gke)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if init_script is not None:
            pulumi.set(__self__, "init_script", init_script)
        if kops is not None:
            pulumi.set(__self__, "kops", kops)
        if kubelet_config is not None:
            pulumi.set(__self__, "kubelet_config", kubelet_config)
        if min_disk_size is not None:
            pulumi.set(__self__, "min_disk_size", min_disk_size)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if ssh_public_key is not None:
            pulumi.set(__self__, "ssh_public_key", ssh_public_key)
        if subnets is not None:
            pulumi.set(__self__, "subnets", subnets)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @_builtins.property
    @pulumi.getter
    def aks(self) -> Optional[pulumi.Input['NodeConfigurationAksArgs']]:
        return pulumi.get(self, "aks")

    @aks.setter
    def aks(self, value: Optional[pulumi.Input['NodeConfigurationAksArgs']]):
        pulumi.set(self, "aks", value)

    @_builtins.property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        CAST AI cluster id
        """
        return pulumi.get(self, "cluster_id")

    @cluster_id.setter
    def cluster_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cluster_id", value)

    @_builtins.property
    @pulumi.getter(name="containerRuntime")
    def container_runtime(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Optional container runtime to be used by kubelet. Applicable for EKS only.  Supported values include: `dockerd`, `containerd`
        """
        return pulumi.get(self, "container_runtime")

    @container_runtime.setter
    def container_runtime(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "container_runtime", value)

    @_builtins.property
    @pulumi.getter(name="diskCpuRatio")
    def disk_cpu_ratio(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Disk to CPU ratio. Sets the number of GiBs to be added for every CPU on the node. Defaults to 0
        """
        return pulumi.get(self, "disk_cpu_ratio")

    @disk_cpu_ratio.setter
    def disk_cpu_ratio(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "disk_cpu_ratio", value)

    @_builtins.property
    @pulumi.getter(name="dockerConfig")
    def docker_config(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Optional docker daemon configuration properties in JSON format. Provide only properties that you want to override. Applicable for EKS only. [Available values](https://docs.docker.com/engine/reference/commandline/dockerd/#daemon-configuration-file)
        """
        return pulumi.get(self, "docker_config")

    @docker_config.setter
    def docker_config(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "docker_config", value)

    @_builtins.property
    @pulumi.getter(name="drainTimeoutSec")
    def drain_timeout_sec(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Timeout in seconds for draining the node. Defaults to 0
        """
        return pulumi.get(self, "drain_timeout_sec")

    @drain_timeout_sec.setter
    def drain_timeout_sec(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "drain_timeout_sec", value)

    @_builtins.property
    @pulumi.getter
    def eks(self) -> Optional[pulumi.Input['NodeConfigurationEksArgs']]:
        return pulumi.get(self, "eks")

    @eks.setter
    def eks(self, value: Optional[pulumi.Input['NodeConfigurationEksArgs']]):
        pulumi.set(self, "eks", value)

    @_builtins.property
    @pulumi.getter
    def gke(self) -> Optional[pulumi.Input['NodeConfigurationGkeArgs']]:
        return pulumi.get(self, "gke")

    @gke.setter
    def gke(self, value: Optional[pulumi.Input['NodeConfigurationGkeArgs']]):
        pulumi.set(self, "gke", value)

    @_builtins.property
    @pulumi.getter
    def image(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Image to be used while provisioning the node. If nothing is provided will be resolved to latest available image based on Image family, Kubernetes version and node architecture if possible. See Cast.ai documentation for details.
        """
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "image", value)

    @_builtins.property
    @pulumi.getter(name="initScript")
    def init_script(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Init script to be run on your instance at launch. Should not contain any sensitive data. Value should be base64 encoded
        """
        return pulumi.get(self, "init_script")

    @init_script.setter
    def init_script(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "init_script", value)

    @_builtins.property
    @pulumi.getter
    def kops(self) -> Optional[pulumi.Input['NodeConfigurationKopsArgs']]:
        return pulumi.get(self, "kops")

    @kops.setter
    def kops(self, value: Optional[pulumi.Input['NodeConfigurationKopsArgs']]):
        pulumi.set(self, "kops", value)

    @_builtins.property
    @pulumi.getter(name="kubeletConfig")
    def kubelet_config(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Optional kubelet configuration properties in JSON format. Provide only properties that you want to override. Applicable for EKS only. [Available values](https://kubernetes.io/docs/reference/config-api/kubelet-config.v1beta1/)
        """
        return pulumi.get(self, "kubelet_config")

    @kubelet_config.setter
    def kubelet_config(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "kubelet_config", value)

    @_builtins.property
    @pulumi.getter(name="minDiskSize")
    def min_disk_size(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Minimal disk size in GiB. Defaults to 100, min 30, max 65536
        """
        return pulumi.get(self, "min_disk_size")

    @min_disk_size.setter
    def min_disk_size(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "min_disk_size", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="sshPublicKey")
    def ssh_public_key(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        SSH public key to be used for provisioned nodes
        """
        return pulumi.get(self, "ssh_public_key")

    @ssh_public_key.setter
    def ssh_public_key(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ssh_public_key", value)

    @_builtins.property
    @pulumi.getter
    def subnets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Subnet ids to be used for provisioned nodes
        """
        return pulumi.get(self, "subnets")

    @subnets.setter
    def subnets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "subnets", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        Tags to be added on cloud instances for provisioned nodes
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "tags", value)


@pulumi.type_token("castai:config/node:NodeConfiguration")
class NodeConfiguration(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 aks: Optional[pulumi.Input[Union['NodeConfigurationAksArgs', 'NodeConfigurationAksArgsDict']]] = None,
                 cluster_id: Optional[pulumi.Input[_builtins.str]] = None,
                 container_runtime: Optional[pulumi.Input[_builtins.str]] = None,
                 disk_cpu_ratio: Optional[pulumi.Input[_builtins.int]] = None,
                 docker_config: Optional[pulumi.Input[_builtins.str]] = None,
                 drain_timeout_sec: Optional[pulumi.Input[_builtins.int]] = None,
                 eks: Optional[pulumi.Input[Union['NodeConfigurationEksArgs', 'NodeConfigurationEksArgsDict']]] = None,
                 gke: Optional[pulumi.Input[Union['NodeConfigurationGkeArgs', 'NodeConfigurationGkeArgsDict']]] = None,
                 image: Optional[pulumi.Input[_builtins.str]] = None,
                 init_script: Optional[pulumi.Input[_builtins.str]] = None,
                 kops: Optional[pulumi.Input[Union['NodeConfigurationKopsArgs', 'NodeConfigurationKopsArgsDict']]] = None,
                 kubelet_config: Optional[pulumi.Input[_builtins.str]] = None,
                 min_disk_size: Optional[pulumi.Input[_builtins.int]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 ssh_public_key: Optional[pulumi.Input[_builtins.str]] = None,
                 subnets: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 __props__=None):
        """
        Create a NodeConfiguration resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] cluster_id: CAST AI cluster id
        :param pulumi.Input[_builtins.str] container_runtime: Optional container runtime to be used by kubelet. Applicable for EKS only.  Supported values include: `dockerd`, `containerd`
        :param pulumi.Input[_builtins.int] disk_cpu_ratio: Disk to CPU ratio. Sets the number of GiBs to be added for every CPU on the node. Defaults to 0
        :param pulumi.Input[_builtins.str] docker_config: Optional docker daemon configuration properties in JSON format. Provide only properties that you want to override. Applicable for EKS only. [Available values](https://docs.docker.com/engine/reference/commandline/dockerd/#daemon-configuration-file)
        :param pulumi.Input[_builtins.int] drain_timeout_sec: Timeout in seconds for draining the node. Defaults to 0
        :param pulumi.Input[_builtins.str] image: Image to be used while provisioning the node. If nothing is provided will be resolved to latest available image based on Image family, Kubernetes version and node architecture if possible. See Cast.ai documentation for details.
        :param pulumi.Input[_builtins.str] init_script: Init script to be run on your instance at launch. Should not contain any sensitive data. Value should be base64 encoded
        :param pulumi.Input[_builtins.str] kubelet_config: Optional kubelet configuration properties in JSON format. Provide only properties that you want to override. Applicable for EKS only. [Available values](https://kubernetes.io/docs/reference/config-api/kubelet-config.v1beta1/)
        :param pulumi.Input[_builtins.int] min_disk_size: Minimal disk size in GiB. Defaults to 100, min 30, max 65536
        :param pulumi.Input[_builtins.str] ssh_public_key: SSH public key to be used for provisioned nodes
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] subnets: Subnet ids to be used for provisioned nodes
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] tags: Tags to be added on cloud instances for provisioned nodes
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: NodeConfigurationArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a NodeConfiguration resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param NodeConfigurationArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(NodeConfigurationArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 aks: Optional[pulumi.Input[Union['NodeConfigurationAksArgs', 'NodeConfigurationAksArgsDict']]] = None,
                 cluster_id: Optional[pulumi.Input[_builtins.str]] = None,
                 container_runtime: Optional[pulumi.Input[_builtins.str]] = None,
                 disk_cpu_ratio: Optional[pulumi.Input[_builtins.int]] = None,
                 docker_config: Optional[pulumi.Input[_builtins.str]] = None,
                 drain_timeout_sec: Optional[pulumi.Input[_builtins.int]] = None,
                 eks: Optional[pulumi.Input[Union['NodeConfigurationEksArgs', 'NodeConfigurationEksArgsDict']]] = None,
                 gke: Optional[pulumi.Input[Union['NodeConfigurationGkeArgs', 'NodeConfigurationGkeArgsDict']]] = None,
                 image: Optional[pulumi.Input[_builtins.str]] = None,
                 init_script: Optional[pulumi.Input[_builtins.str]] = None,
                 kops: Optional[pulumi.Input[Union['NodeConfigurationKopsArgs', 'NodeConfigurationKopsArgsDict']]] = None,
                 kubelet_config: Optional[pulumi.Input[_builtins.str]] = None,
                 min_disk_size: Optional[pulumi.Input[_builtins.int]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 ssh_public_key: Optional[pulumi.Input[_builtins.str]] = None,
                 subnets: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = NodeConfigurationArgs.__new__(NodeConfigurationArgs)

            __props__.__dict__["aks"] = aks
            if cluster_id is None and not opts.urn:
                raise TypeError("Missing required property 'cluster_id'")
            __props__.__dict__["cluster_id"] = cluster_id
            __props__.__dict__["container_runtime"] = container_runtime
            __props__.__dict__["disk_cpu_ratio"] = disk_cpu_ratio
            __props__.__dict__["docker_config"] = docker_config
            __props__.__dict__["drain_timeout_sec"] = drain_timeout_sec
            __props__.__dict__["eks"] = eks
            __props__.__dict__["gke"] = gke
            __props__.__dict__["image"] = image
            __props__.__dict__["init_script"] = init_script
            __props__.__dict__["kops"] = kops
            __props__.__dict__["kubelet_config"] = kubelet_config
            __props__.__dict__["min_disk_size"] = min_disk_size
            __props__.__dict__["name"] = name
            __props__.__dict__["ssh_public_key"] = ssh_public_key
            if subnets is None and not opts.urn:
                raise TypeError("Missing required property 'subnets'")
            __props__.__dict__["subnets"] = subnets
            __props__.__dict__["tags"] = tags
        super(NodeConfiguration, __self__).__init__(
            'castai:config/node:NodeConfiguration',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            aks: Optional[pulumi.Input[Union['NodeConfigurationAksArgs', 'NodeConfigurationAksArgsDict']]] = None,
            cluster_id: Optional[pulumi.Input[_builtins.str]] = None,
            container_runtime: Optional[pulumi.Input[_builtins.str]] = None,
            disk_cpu_ratio: Optional[pulumi.Input[_builtins.int]] = None,
            docker_config: Optional[pulumi.Input[_builtins.str]] = None,
            drain_timeout_sec: Optional[pulumi.Input[_builtins.int]] = None,
            eks: Optional[pulumi.Input[Union['NodeConfigurationEksArgs', 'NodeConfigurationEksArgsDict']]] = None,
            gke: Optional[pulumi.Input[Union['NodeConfigurationGkeArgs', 'NodeConfigurationGkeArgsDict']]] = None,
            image: Optional[pulumi.Input[_builtins.str]] = None,
            init_script: Optional[pulumi.Input[_builtins.str]] = None,
            kops: Optional[pulumi.Input[Union['NodeConfigurationKopsArgs', 'NodeConfigurationKopsArgsDict']]] = None,
            kubelet_config: Optional[pulumi.Input[_builtins.str]] = None,
            min_disk_size: Optional[pulumi.Input[_builtins.int]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            ssh_public_key: Optional[pulumi.Input[_builtins.str]] = None,
            subnets: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None) -> 'NodeConfiguration':
        """
        Get an existing NodeConfiguration resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] cluster_id: CAST AI cluster id
        :param pulumi.Input[_builtins.str] container_runtime: Optional container runtime to be used by kubelet. Applicable for EKS only.  Supported values include: `dockerd`, `containerd`
        :param pulumi.Input[_builtins.int] disk_cpu_ratio: Disk to CPU ratio. Sets the number of GiBs to be added for every CPU on the node. Defaults to 0
        :param pulumi.Input[_builtins.str] docker_config: Optional docker daemon configuration properties in JSON format. Provide only properties that you want to override. Applicable for EKS only. [Available values](https://docs.docker.com/engine/reference/commandline/dockerd/#daemon-configuration-file)
        :param pulumi.Input[_builtins.int] drain_timeout_sec: Timeout in seconds for draining the node. Defaults to 0
        :param pulumi.Input[_builtins.str] image: Image to be used while provisioning the node. If nothing is provided will be resolved to latest available image based on Image family, Kubernetes version and node architecture if possible. See Cast.ai documentation for details.
        :param pulumi.Input[_builtins.str] init_script: Init script to be run on your instance at launch. Should not contain any sensitive data. Value should be base64 encoded
        :param pulumi.Input[_builtins.str] kubelet_config: Optional kubelet configuration properties in JSON format. Provide only properties that you want to override. Applicable for EKS only. [Available values](https://kubernetes.io/docs/reference/config-api/kubelet-config.v1beta1/)
        :param pulumi.Input[_builtins.int] min_disk_size: Minimal disk size in GiB. Defaults to 100, min 30, max 65536
        :param pulumi.Input[_builtins.str] ssh_public_key: SSH public key to be used for provisioned nodes
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] subnets: Subnet ids to be used for provisioned nodes
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] tags: Tags to be added on cloud instances for provisioned nodes
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _NodeConfigurationState.__new__(_NodeConfigurationState)

        __props__.__dict__["aks"] = aks
        __props__.__dict__["cluster_id"] = cluster_id
        __props__.__dict__["container_runtime"] = container_runtime
        __props__.__dict__["disk_cpu_ratio"] = disk_cpu_ratio
        __props__.__dict__["docker_config"] = docker_config
        __props__.__dict__["drain_timeout_sec"] = drain_timeout_sec
        __props__.__dict__["eks"] = eks
        __props__.__dict__["gke"] = gke
        __props__.__dict__["image"] = image
        __props__.__dict__["init_script"] = init_script
        __props__.__dict__["kops"] = kops
        __props__.__dict__["kubelet_config"] = kubelet_config
        __props__.__dict__["min_disk_size"] = min_disk_size
        __props__.__dict__["name"] = name
        __props__.__dict__["ssh_public_key"] = ssh_public_key
        __props__.__dict__["subnets"] = subnets
        __props__.__dict__["tags"] = tags
        return NodeConfiguration(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def aks(self) -> pulumi.Output[Optional['outputs.NodeConfigurationAks']]:
        return pulumi.get(self, "aks")

    @_builtins.property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> pulumi.Output[_builtins.str]:
        """
        CAST AI cluster id
        """
        return pulumi.get(self, "cluster_id")

    @_builtins.property
    @pulumi.getter(name="containerRuntime")
    def container_runtime(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Optional container runtime to be used by kubelet. Applicable for EKS only.  Supported values include: `dockerd`, `containerd`
        """
        return pulumi.get(self, "container_runtime")

    @_builtins.property
    @pulumi.getter(name="diskCpuRatio")
    def disk_cpu_ratio(self) -> pulumi.Output[Optional[_builtins.int]]:
        """
        Disk to CPU ratio. Sets the number of GiBs to be added for every CPU on the node. Defaults to 0
        """
        return pulumi.get(self, "disk_cpu_ratio")

    @_builtins.property
    @pulumi.getter(name="dockerConfig")
    def docker_config(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Optional docker daemon configuration properties in JSON format. Provide only properties that you want to override. Applicable for EKS only. [Available values](https://docs.docker.com/engine/reference/commandline/dockerd/#daemon-configuration-file)
        """
        return pulumi.get(self, "docker_config")

    @_builtins.property
    @pulumi.getter(name="drainTimeoutSec")
    def drain_timeout_sec(self) -> pulumi.Output[Optional[_builtins.int]]:
        """
        Timeout in seconds for draining the node. Defaults to 0
        """
        return pulumi.get(self, "drain_timeout_sec")

    @_builtins.property
    @pulumi.getter
    def eks(self) -> pulumi.Output[Optional['outputs.NodeConfigurationEks']]:
        return pulumi.get(self, "eks")

    @_builtins.property
    @pulumi.getter
    def gke(self) -> pulumi.Output['outputs.NodeConfigurationGke']:
        return pulumi.get(self, "gke")

    @_builtins.property
    @pulumi.getter
    def image(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Image to be used while provisioning the node. If nothing is provided will be resolved to latest available image based on Image family, Kubernetes version and node architecture if possible. See Cast.ai documentation for details.
        """
        return pulumi.get(self, "image")

    @_builtins.property
    @pulumi.getter(name="initScript")
    def init_script(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Init script to be run on your instance at launch. Should not contain any sensitive data. Value should be base64 encoded
        """
        return pulumi.get(self, "init_script")

    @_builtins.property
    @pulumi.getter
    def kops(self) -> pulumi.Output[Optional['outputs.NodeConfigurationKops']]:
        return pulumi.get(self, "kops")

    @_builtins.property
    @pulumi.getter(name="kubeletConfig")
    def kubelet_config(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Optional kubelet configuration properties in JSON format. Provide only properties that you want to override. Applicable for EKS only. [Available values](https://kubernetes.io/docs/reference/config-api/kubelet-config.v1beta1/)
        """
        return pulumi.get(self, "kubelet_config")

    @_builtins.property
    @pulumi.getter(name="minDiskSize")
    def min_disk_size(self) -> pulumi.Output[Optional[_builtins.int]]:
        """
        Minimal disk size in GiB. Defaults to 100, min 30, max 65536
        """
        return pulumi.get(self, "min_disk_size")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="sshPublicKey")
    def ssh_public_key(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        SSH public key to be used for provisioned nodes
        """
        return pulumi.get(self, "ssh_public_key")

    @_builtins.property
    @pulumi.getter
    def subnets(self) -> pulumi.Output[Sequence[_builtins.str]]:
        """
        Subnet ids to be used for provisioned nodes
        """
        return pulumi.get(self, "subnets")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Mapping[str, _builtins.str]]]:
        """
        Tags to be added on cloud instances for provisioned nodes
        """
        return pulumi.get(self, "tags")

