# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['NodeTemplateArgs', 'NodeTemplate']

@pulumi.input_type
class NodeTemplateArgs:
    def __init__(__self__, *,
                 clm_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 cluster_id: Optional[pulumi.Input[_builtins.str]] = None,
                 configuration_id: Optional[pulumi.Input[_builtins.str]] = None,
                 constraints: Optional[pulumi.Input['NodeTemplateConstraintsArgs']] = None,
                 custom_instances_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 custom_instances_with_extended_memory_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 custom_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 custom_taints: Optional[pulumi.Input[Sequence[pulumi.Input['NodeTemplateCustomTaintArgs']]]] = None,
                 gpu: Optional[pulumi.Input['NodeTemplateGpuArgs']] = None,
                 is_default: Optional[pulumi.Input[_builtins.bool]] = None,
                 is_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 rebalancing_config_min_nodes: Optional[pulumi.Input[_builtins.int]] = None,
                 should_taint: Optional[pulumi.Input[_builtins.bool]] = None):
        """
        The set of arguments for constructing a NodeTemplate resource.
        :param pulumi.Input[_builtins.bool] clm_enabled: Marks whether CLM should be enabled for nodes created from this template.
        :param pulumi.Input[_builtins.str] cluster_id: CAST AI cluster id.
        :param pulumi.Input[_builtins.str] configuration_id: CAST AI node configuration id to be used for node template.
        :param pulumi.Input[_builtins.bool] custom_instances_enabled: Marks whether custom instances should be used when deciding which parts of inventory are available. Custom instances are only supported in GCP.
        :param pulumi.Input[_builtins.bool] custom_instances_with_extended_memory_enabled: Marks whether custom instances with extended memory should be used when deciding which parts of inventory are available. Custom instances are only supported in GCP.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] custom_labels: Custom labels to be added to nodes created from this template.
        :param pulumi.Input[Sequence[pulumi.Input['NodeTemplateCustomTaintArgs']]] custom_taints: Custom taints to be added to the nodes created from this template. `shouldTaint` has to be `true` in order to create/update the node template with custom taints. If `shouldTaint` is `true`, but no custom taints are provided, the nodes will be tainted with the default node template taint.
        :param pulumi.Input['NodeTemplateGpuArgs'] gpu: GPU configuration.
        :param pulumi.Input[_builtins.bool] is_default: Flag whether the node template is default.
        :param pulumi.Input[_builtins.bool] is_enabled: Flag whether the node template is enabled and considered for autoscaling.
        :param pulumi.Input[_builtins.str] name: Name of the node template.
        :param pulumi.Input[_builtins.int] rebalancing_config_min_nodes: Minimum nodes that will be kept when rebalancing nodes using this node template.
        :param pulumi.Input[_builtins.bool] should_taint: Marks whether the templated nodes will have a taint.
        """
        if clm_enabled is not None:
            pulumi.set(__self__, "clm_enabled", clm_enabled)
        if cluster_id is not None:
            pulumi.set(__self__, "cluster_id", cluster_id)
        if configuration_id is not None:
            pulumi.set(__self__, "configuration_id", configuration_id)
        if constraints is not None:
            pulumi.set(__self__, "constraints", constraints)
        if custom_instances_enabled is not None:
            pulumi.set(__self__, "custom_instances_enabled", custom_instances_enabled)
        if custom_instances_with_extended_memory_enabled is not None:
            pulumi.set(__self__, "custom_instances_with_extended_memory_enabled", custom_instances_with_extended_memory_enabled)
        if custom_labels is not None:
            pulumi.set(__self__, "custom_labels", custom_labels)
        if custom_taints is not None:
            pulumi.set(__self__, "custom_taints", custom_taints)
        if gpu is not None:
            pulumi.set(__self__, "gpu", gpu)
        if is_default is not None:
            pulumi.set(__self__, "is_default", is_default)
        if is_enabled is not None:
            pulumi.set(__self__, "is_enabled", is_enabled)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if rebalancing_config_min_nodes is not None:
            pulumi.set(__self__, "rebalancing_config_min_nodes", rebalancing_config_min_nodes)
        if should_taint is not None:
            pulumi.set(__self__, "should_taint", should_taint)

    @_builtins.property
    @pulumi.getter(name="clmEnabled")
    def clm_enabled(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Marks whether CLM should be enabled for nodes created from this template.
        """
        return pulumi.get(self, "clm_enabled")

    @clm_enabled.setter
    def clm_enabled(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "clm_enabled", value)

    @_builtins.property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        CAST AI cluster id.
        """
        return pulumi.get(self, "cluster_id")

    @cluster_id.setter
    def cluster_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cluster_id", value)

    @_builtins.property
    @pulumi.getter(name="configurationId")
    def configuration_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        CAST AI node configuration id to be used for node template.
        """
        return pulumi.get(self, "configuration_id")

    @configuration_id.setter
    def configuration_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "configuration_id", value)

    @_builtins.property
    @pulumi.getter
    def constraints(self) -> Optional[pulumi.Input['NodeTemplateConstraintsArgs']]:
        return pulumi.get(self, "constraints")

    @constraints.setter
    def constraints(self, value: Optional[pulumi.Input['NodeTemplateConstraintsArgs']]):
        pulumi.set(self, "constraints", value)

    @_builtins.property
    @pulumi.getter(name="customInstancesEnabled")
    def custom_instances_enabled(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Marks whether custom instances should be used when deciding which parts of inventory are available. Custom instances are only supported in GCP.
        """
        return pulumi.get(self, "custom_instances_enabled")

    @custom_instances_enabled.setter
    def custom_instances_enabled(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "custom_instances_enabled", value)

    @_builtins.property
    @pulumi.getter(name="customInstancesWithExtendedMemoryEnabled")
    def custom_instances_with_extended_memory_enabled(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Marks whether custom instances with extended memory should be used when deciding which parts of inventory are available. Custom instances are only supported in GCP.
        """
        return pulumi.get(self, "custom_instances_with_extended_memory_enabled")

    @custom_instances_with_extended_memory_enabled.setter
    def custom_instances_with_extended_memory_enabled(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "custom_instances_with_extended_memory_enabled", value)

    @_builtins.property
    @pulumi.getter(name="customLabels")
    def custom_labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        Custom labels to be added to nodes created from this template.
        """
        return pulumi.get(self, "custom_labels")

    @custom_labels.setter
    def custom_labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "custom_labels", value)

    @_builtins.property
    @pulumi.getter(name="customTaints")
    def custom_taints(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NodeTemplateCustomTaintArgs']]]]:
        """
        Custom taints to be added to the nodes created from this template. `shouldTaint` has to be `true` in order to create/update the node template with custom taints. If `shouldTaint` is `true`, but no custom taints are provided, the nodes will be tainted with the default node template taint.
        """
        return pulumi.get(self, "custom_taints")

    @custom_taints.setter
    def custom_taints(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NodeTemplateCustomTaintArgs']]]]):
        pulumi.set(self, "custom_taints", value)

    @_builtins.property
    @pulumi.getter
    def gpu(self) -> Optional[pulumi.Input['NodeTemplateGpuArgs']]:
        """
        GPU configuration.
        """
        return pulumi.get(self, "gpu")

    @gpu.setter
    def gpu(self, value: Optional[pulumi.Input['NodeTemplateGpuArgs']]):
        pulumi.set(self, "gpu", value)

    @_builtins.property
    @pulumi.getter(name="isDefault")
    def is_default(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Flag whether the node template is default.
        """
        return pulumi.get(self, "is_default")

    @is_default.setter
    def is_default(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "is_default", value)

    @_builtins.property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Flag whether the node template is enabled and considered for autoscaling.
        """
        return pulumi.get(self, "is_enabled")

    @is_enabled.setter
    def is_enabled(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "is_enabled", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Name of the node template.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="rebalancingConfigMinNodes")
    def rebalancing_config_min_nodes(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Minimum nodes that will be kept when rebalancing nodes using this node template.
        """
        return pulumi.get(self, "rebalancing_config_min_nodes")

    @rebalancing_config_min_nodes.setter
    def rebalancing_config_min_nodes(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "rebalancing_config_min_nodes", value)

    @_builtins.property
    @pulumi.getter(name="shouldTaint")
    def should_taint(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Marks whether the templated nodes will have a taint.
        """
        return pulumi.get(self, "should_taint")

    @should_taint.setter
    def should_taint(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "should_taint", value)


@pulumi.input_type
class _NodeTemplateState:
    def __init__(__self__, *,
                 clm_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 cluster_id: Optional[pulumi.Input[_builtins.str]] = None,
                 configuration_id: Optional[pulumi.Input[_builtins.str]] = None,
                 constraints: Optional[pulumi.Input['NodeTemplateConstraintsArgs']] = None,
                 custom_instances_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 custom_instances_with_extended_memory_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 custom_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 custom_taints: Optional[pulumi.Input[Sequence[pulumi.Input['NodeTemplateCustomTaintArgs']]]] = None,
                 gpu: Optional[pulumi.Input['NodeTemplateGpuArgs']] = None,
                 is_default: Optional[pulumi.Input[_builtins.bool]] = None,
                 is_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 rebalancing_config_min_nodes: Optional[pulumi.Input[_builtins.int]] = None,
                 should_taint: Optional[pulumi.Input[_builtins.bool]] = None):
        """
        Input properties used for looking up and filtering NodeTemplate resources.
        :param pulumi.Input[_builtins.bool] clm_enabled: Marks whether CLM should be enabled for nodes created from this template.
        :param pulumi.Input[_builtins.str] cluster_id: CAST AI cluster id.
        :param pulumi.Input[_builtins.str] configuration_id: CAST AI node configuration id to be used for node template.
        :param pulumi.Input[_builtins.bool] custom_instances_enabled: Marks whether custom instances should be used when deciding which parts of inventory are available. Custom instances are only supported in GCP.
        :param pulumi.Input[_builtins.bool] custom_instances_with_extended_memory_enabled: Marks whether custom instances with extended memory should be used when deciding which parts of inventory are available. Custom instances are only supported in GCP.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] custom_labels: Custom labels to be added to nodes created from this template.
        :param pulumi.Input[Sequence[pulumi.Input['NodeTemplateCustomTaintArgs']]] custom_taints: Custom taints to be added to the nodes created from this template. `shouldTaint` has to be `true` in order to create/update the node template with custom taints. If `shouldTaint` is `true`, but no custom taints are provided, the nodes will be tainted with the default node template taint.
        :param pulumi.Input['NodeTemplateGpuArgs'] gpu: GPU configuration.
        :param pulumi.Input[_builtins.bool] is_default: Flag whether the node template is default.
        :param pulumi.Input[_builtins.bool] is_enabled: Flag whether the node template is enabled and considered for autoscaling.
        :param pulumi.Input[_builtins.str] name: Name of the node template.
        :param pulumi.Input[_builtins.int] rebalancing_config_min_nodes: Minimum nodes that will be kept when rebalancing nodes using this node template.
        :param pulumi.Input[_builtins.bool] should_taint: Marks whether the templated nodes will have a taint.
        """
        if clm_enabled is not None:
            pulumi.set(__self__, "clm_enabled", clm_enabled)
        if cluster_id is not None:
            pulumi.set(__self__, "cluster_id", cluster_id)
        if configuration_id is not None:
            pulumi.set(__self__, "configuration_id", configuration_id)
        if constraints is not None:
            pulumi.set(__self__, "constraints", constraints)
        if custom_instances_enabled is not None:
            pulumi.set(__self__, "custom_instances_enabled", custom_instances_enabled)
        if custom_instances_with_extended_memory_enabled is not None:
            pulumi.set(__self__, "custom_instances_with_extended_memory_enabled", custom_instances_with_extended_memory_enabled)
        if custom_labels is not None:
            pulumi.set(__self__, "custom_labels", custom_labels)
        if custom_taints is not None:
            pulumi.set(__self__, "custom_taints", custom_taints)
        if gpu is not None:
            pulumi.set(__self__, "gpu", gpu)
        if is_default is not None:
            pulumi.set(__self__, "is_default", is_default)
        if is_enabled is not None:
            pulumi.set(__self__, "is_enabled", is_enabled)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if rebalancing_config_min_nodes is not None:
            pulumi.set(__self__, "rebalancing_config_min_nodes", rebalancing_config_min_nodes)
        if should_taint is not None:
            pulumi.set(__self__, "should_taint", should_taint)

    @_builtins.property
    @pulumi.getter(name="clmEnabled")
    def clm_enabled(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Marks whether CLM should be enabled for nodes created from this template.
        """
        return pulumi.get(self, "clm_enabled")

    @clm_enabled.setter
    def clm_enabled(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "clm_enabled", value)

    @_builtins.property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        CAST AI cluster id.
        """
        return pulumi.get(self, "cluster_id")

    @cluster_id.setter
    def cluster_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cluster_id", value)

    @_builtins.property
    @pulumi.getter(name="configurationId")
    def configuration_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        CAST AI node configuration id to be used for node template.
        """
        return pulumi.get(self, "configuration_id")

    @configuration_id.setter
    def configuration_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "configuration_id", value)

    @_builtins.property
    @pulumi.getter
    def constraints(self) -> Optional[pulumi.Input['NodeTemplateConstraintsArgs']]:
        return pulumi.get(self, "constraints")

    @constraints.setter
    def constraints(self, value: Optional[pulumi.Input['NodeTemplateConstraintsArgs']]):
        pulumi.set(self, "constraints", value)

    @_builtins.property
    @pulumi.getter(name="customInstancesEnabled")
    def custom_instances_enabled(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Marks whether custom instances should be used when deciding which parts of inventory are available. Custom instances are only supported in GCP.
        """
        return pulumi.get(self, "custom_instances_enabled")

    @custom_instances_enabled.setter
    def custom_instances_enabled(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "custom_instances_enabled", value)

    @_builtins.property
    @pulumi.getter(name="customInstancesWithExtendedMemoryEnabled")
    def custom_instances_with_extended_memory_enabled(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Marks whether custom instances with extended memory should be used when deciding which parts of inventory are available. Custom instances are only supported in GCP.
        """
        return pulumi.get(self, "custom_instances_with_extended_memory_enabled")

    @custom_instances_with_extended_memory_enabled.setter
    def custom_instances_with_extended_memory_enabled(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "custom_instances_with_extended_memory_enabled", value)

    @_builtins.property
    @pulumi.getter(name="customLabels")
    def custom_labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        Custom labels to be added to nodes created from this template.
        """
        return pulumi.get(self, "custom_labels")

    @custom_labels.setter
    def custom_labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "custom_labels", value)

    @_builtins.property
    @pulumi.getter(name="customTaints")
    def custom_taints(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NodeTemplateCustomTaintArgs']]]]:
        """
        Custom taints to be added to the nodes created from this template. `shouldTaint` has to be `true` in order to create/update the node template with custom taints. If `shouldTaint` is `true`, but no custom taints are provided, the nodes will be tainted with the default node template taint.
        """
        return pulumi.get(self, "custom_taints")

    @custom_taints.setter
    def custom_taints(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NodeTemplateCustomTaintArgs']]]]):
        pulumi.set(self, "custom_taints", value)

    @_builtins.property
    @pulumi.getter
    def gpu(self) -> Optional[pulumi.Input['NodeTemplateGpuArgs']]:
        """
        GPU configuration.
        """
        return pulumi.get(self, "gpu")

    @gpu.setter
    def gpu(self, value: Optional[pulumi.Input['NodeTemplateGpuArgs']]):
        pulumi.set(self, "gpu", value)

    @_builtins.property
    @pulumi.getter(name="isDefault")
    def is_default(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Flag whether the node template is default.
        """
        return pulumi.get(self, "is_default")

    @is_default.setter
    def is_default(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "is_default", value)

    @_builtins.property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Flag whether the node template is enabled and considered for autoscaling.
        """
        return pulumi.get(self, "is_enabled")

    @is_enabled.setter
    def is_enabled(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "is_enabled", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Name of the node template.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="rebalancingConfigMinNodes")
    def rebalancing_config_min_nodes(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Minimum nodes that will be kept when rebalancing nodes using this node template.
        """
        return pulumi.get(self, "rebalancing_config_min_nodes")

    @rebalancing_config_min_nodes.setter
    def rebalancing_config_min_nodes(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "rebalancing_config_min_nodes", value)

    @_builtins.property
    @pulumi.getter(name="shouldTaint")
    def should_taint(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Marks whether the templated nodes will have a taint.
        """
        return pulumi.get(self, "should_taint")

    @should_taint.setter
    def should_taint(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "should_taint", value)


@pulumi.type_token("castai:config/node:NodeTemplate")
class NodeTemplate(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 clm_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 cluster_id: Optional[pulumi.Input[_builtins.str]] = None,
                 configuration_id: Optional[pulumi.Input[_builtins.str]] = None,
                 constraints: Optional[pulumi.Input[Union['NodeTemplateConstraintsArgs', 'NodeTemplateConstraintsArgsDict']]] = None,
                 custom_instances_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 custom_instances_with_extended_memory_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 custom_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 custom_taints: Optional[pulumi.Input[Sequence[pulumi.Input[Union['NodeTemplateCustomTaintArgs', 'NodeTemplateCustomTaintArgsDict']]]]] = None,
                 gpu: Optional[pulumi.Input[Union['NodeTemplateGpuArgs', 'NodeTemplateGpuArgsDict']]] = None,
                 is_default: Optional[pulumi.Input[_builtins.bool]] = None,
                 is_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 rebalancing_config_min_nodes: Optional[pulumi.Input[_builtins.int]] = None,
                 should_taint: Optional[pulumi.Input[_builtins.bool]] = None,
                 __props__=None):
        """
        Create a NodeTemplate resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.bool] clm_enabled: Marks whether CLM should be enabled for nodes created from this template.
        :param pulumi.Input[_builtins.str] cluster_id: CAST AI cluster id.
        :param pulumi.Input[_builtins.str] configuration_id: CAST AI node configuration id to be used for node template.
        :param pulumi.Input[_builtins.bool] custom_instances_enabled: Marks whether custom instances should be used when deciding which parts of inventory are available. Custom instances are only supported in GCP.
        :param pulumi.Input[_builtins.bool] custom_instances_with_extended_memory_enabled: Marks whether custom instances with extended memory should be used when deciding which parts of inventory are available. Custom instances are only supported in GCP.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] custom_labels: Custom labels to be added to nodes created from this template.
        :param pulumi.Input[Sequence[pulumi.Input[Union['NodeTemplateCustomTaintArgs', 'NodeTemplateCustomTaintArgsDict']]]] custom_taints: Custom taints to be added to the nodes created from this template. `shouldTaint` has to be `true` in order to create/update the node template with custom taints. If `shouldTaint` is `true`, but no custom taints are provided, the nodes will be tainted with the default node template taint.
        :param pulumi.Input[Union['NodeTemplateGpuArgs', 'NodeTemplateGpuArgsDict']] gpu: GPU configuration.
        :param pulumi.Input[_builtins.bool] is_default: Flag whether the node template is default.
        :param pulumi.Input[_builtins.bool] is_enabled: Flag whether the node template is enabled and considered for autoscaling.
        :param pulumi.Input[_builtins.str] name: Name of the node template.
        :param pulumi.Input[_builtins.int] rebalancing_config_min_nodes: Minimum nodes that will be kept when rebalancing nodes using this node template.
        :param pulumi.Input[_builtins.bool] should_taint: Marks whether the templated nodes will have a taint.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[NodeTemplateArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a NodeTemplate resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param NodeTemplateArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(NodeTemplateArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 clm_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 cluster_id: Optional[pulumi.Input[_builtins.str]] = None,
                 configuration_id: Optional[pulumi.Input[_builtins.str]] = None,
                 constraints: Optional[pulumi.Input[Union['NodeTemplateConstraintsArgs', 'NodeTemplateConstraintsArgsDict']]] = None,
                 custom_instances_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 custom_instances_with_extended_memory_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 custom_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 custom_taints: Optional[pulumi.Input[Sequence[pulumi.Input[Union['NodeTemplateCustomTaintArgs', 'NodeTemplateCustomTaintArgsDict']]]]] = None,
                 gpu: Optional[pulumi.Input[Union['NodeTemplateGpuArgs', 'NodeTemplateGpuArgsDict']]] = None,
                 is_default: Optional[pulumi.Input[_builtins.bool]] = None,
                 is_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 rebalancing_config_min_nodes: Optional[pulumi.Input[_builtins.int]] = None,
                 should_taint: Optional[pulumi.Input[_builtins.bool]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = NodeTemplateArgs.__new__(NodeTemplateArgs)

            __props__.__dict__["clm_enabled"] = clm_enabled
            __props__.__dict__["cluster_id"] = cluster_id
            __props__.__dict__["configuration_id"] = configuration_id
            __props__.__dict__["constraints"] = constraints
            __props__.__dict__["custom_instances_enabled"] = custom_instances_enabled
            __props__.__dict__["custom_instances_with_extended_memory_enabled"] = custom_instances_with_extended_memory_enabled
            __props__.__dict__["custom_labels"] = custom_labels
            __props__.__dict__["custom_taints"] = custom_taints
            __props__.__dict__["gpu"] = gpu
            __props__.__dict__["is_default"] = is_default
            __props__.__dict__["is_enabled"] = is_enabled
            __props__.__dict__["name"] = name
            __props__.__dict__["rebalancing_config_min_nodes"] = rebalancing_config_min_nodes
            __props__.__dict__["should_taint"] = should_taint
        super(NodeTemplate, __self__).__init__(
            'castai:config/node:NodeTemplate',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            clm_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
            cluster_id: Optional[pulumi.Input[_builtins.str]] = None,
            configuration_id: Optional[pulumi.Input[_builtins.str]] = None,
            constraints: Optional[pulumi.Input[Union['NodeTemplateConstraintsArgs', 'NodeTemplateConstraintsArgsDict']]] = None,
            custom_instances_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
            custom_instances_with_extended_memory_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
            custom_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
            custom_taints: Optional[pulumi.Input[Sequence[pulumi.Input[Union['NodeTemplateCustomTaintArgs', 'NodeTemplateCustomTaintArgsDict']]]]] = None,
            gpu: Optional[pulumi.Input[Union['NodeTemplateGpuArgs', 'NodeTemplateGpuArgsDict']]] = None,
            is_default: Optional[pulumi.Input[_builtins.bool]] = None,
            is_enabled: Optional[pulumi.Input[_builtins.bool]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            rebalancing_config_min_nodes: Optional[pulumi.Input[_builtins.int]] = None,
            should_taint: Optional[pulumi.Input[_builtins.bool]] = None) -> 'NodeTemplate':
        """
        Get an existing NodeTemplate resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.bool] clm_enabled: Marks whether CLM should be enabled for nodes created from this template.
        :param pulumi.Input[_builtins.str] cluster_id: CAST AI cluster id.
        :param pulumi.Input[_builtins.str] configuration_id: CAST AI node configuration id to be used for node template.
        :param pulumi.Input[_builtins.bool] custom_instances_enabled: Marks whether custom instances should be used when deciding which parts of inventory are available. Custom instances are only supported in GCP.
        :param pulumi.Input[_builtins.bool] custom_instances_with_extended_memory_enabled: Marks whether custom instances with extended memory should be used when deciding which parts of inventory are available. Custom instances are only supported in GCP.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] custom_labels: Custom labels to be added to nodes created from this template.
        :param pulumi.Input[Sequence[pulumi.Input[Union['NodeTemplateCustomTaintArgs', 'NodeTemplateCustomTaintArgsDict']]]] custom_taints: Custom taints to be added to the nodes created from this template. `shouldTaint` has to be `true` in order to create/update the node template with custom taints. If `shouldTaint` is `true`, but no custom taints are provided, the nodes will be tainted with the default node template taint.
        :param pulumi.Input[Union['NodeTemplateGpuArgs', 'NodeTemplateGpuArgsDict']] gpu: GPU configuration.
        :param pulumi.Input[_builtins.bool] is_default: Flag whether the node template is default.
        :param pulumi.Input[_builtins.bool] is_enabled: Flag whether the node template is enabled and considered for autoscaling.
        :param pulumi.Input[_builtins.str] name: Name of the node template.
        :param pulumi.Input[_builtins.int] rebalancing_config_min_nodes: Minimum nodes that will be kept when rebalancing nodes using this node template.
        :param pulumi.Input[_builtins.bool] should_taint: Marks whether the templated nodes will have a taint.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _NodeTemplateState.__new__(_NodeTemplateState)

        __props__.__dict__["clm_enabled"] = clm_enabled
        __props__.__dict__["cluster_id"] = cluster_id
        __props__.__dict__["configuration_id"] = configuration_id
        __props__.__dict__["constraints"] = constraints
        __props__.__dict__["custom_instances_enabled"] = custom_instances_enabled
        __props__.__dict__["custom_instances_with_extended_memory_enabled"] = custom_instances_with_extended_memory_enabled
        __props__.__dict__["custom_labels"] = custom_labels
        __props__.__dict__["custom_taints"] = custom_taints
        __props__.__dict__["gpu"] = gpu
        __props__.__dict__["is_default"] = is_default
        __props__.__dict__["is_enabled"] = is_enabled
        __props__.__dict__["name"] = name
        __props__.__dict__["rebalancing_config_min_nodes"] = rebalancing_config_min_nodes
        __props__.__dict__["should_taint"] = should_taint
        return NodeTemplate(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="clmEnabled")
    def clm_enabled(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Marks whether CLM should be enabled for nodes created from this template.
        """
        return pulumi.get(self, "clm_enabled")

    @_builtins.property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        CAST AI cluster id.
        """
        return pulumi.get(self, "cluster_id")

    @_builtins.property
    @pulumi.getter(name="configurationId")
    def configuration_id(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        CAST AI node configuration id to be used for node template.
        """
        return pulumi.get(self, "configuration_id")

    @_builtins.property
    @pulumi.getter
    def constraints(self) -> pulumi.Output[Optional['outputs.NodeTemplateConstraints']]:
        return pulumi.get(self, "constraints")

    @_builtins.property
    @pulumi.getter(name="customInstancesEnabled")
    def custom_instances_enabled(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Marks whether custom instances should be used when deciding which parts of inventory are available. Custom instances are only supported in GCP.
        """
        return pulumi.get(self, "custom_instances_enabled")

    @_builtins.property
    @pulumi.getter(name="customInstancesWithExtendedMemoryEnabled")
    def custom_instances_with_extended_memory_enabled(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Marks whether custom instances with extended memory should be used when deciding which parts of inventory are available. Custom instances are only supported in GCP.
        """
        return pulumi.get(self, "custom_instances_with_extended_memory_enabled")

    @_builtins.property
    @pulumi.getter(name="customLabels")
    def custom_labels(self) -> pulumi.Output[Optional[Mapping[str, _builtins.str]]]:
        """
        Custom labels to be added to nodes created from this template.
        """
        return pulumi.get(self, "custom_labels")

    @_builtins.property
    @pulumi.getter(name="customTaints")
    def custom_taints(self) -> pulumi.Output[Optional[Sequence['outputs.NodeTemplateCustomTaint']]]:
        """
        Custom taints to be added to the nodes created from this template. `shouldTaint` has to be `true` in order to create/update the node template with custom taints. If `shouldTaint` is `true`, but no custom taints are provided, the nodes will be tainted with the default node template taint.
        """
        return pulumi.get(self, "custom_taints")

    @_builtins.property
    @pulumi.getter
    def gpu(self) -> pulumi.Output[Optional['outputs.NodeTemplateGpu']]:
        """
        GPU configuration.
        """
        return pulumi.get(self, "gpu")

    @_builtins.property
    @pulumi.getter(name="isDefault")
    def is_default(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Flag whether the node template is default.
        """
        return pulumi.get(self, "is_default")

    @_builtins.property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> pulumi.Output[_builtins.bool]:
        """
        Flag whether the node template is enabled and considered for autoscaling.
        """
        return pulumi.get(self, "is_enabled")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        Name of the node template.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="rebalancingConfigMinNodes")
    def rebalancing_config_min_nodes(self) -> pulumi.Output[Optional[_builtins.int]]:
        """
        Minimum nodes that will be kept when rebalancing nodes using this node template.
        """
        return pulumi.get(self, "rebalancing_config_min_nodes")

    @_builtins.property
    @pulumi.getter(name="shouldTaint")
    def should_taint(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Marks whether the templated nodes will have a taint.
        """
        return pulumi.get(self, "should_taint")

