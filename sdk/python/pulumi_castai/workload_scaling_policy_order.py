# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['WorkloadScalingPolicyOrderArgs', 'WorkloadScalingPolicyOrder']

@pulumi.input_type
class WorkloadScalingPolicyOrderArgs:
    def __init__(__self__, *,
                 cluster_id: pulumi.Input[_builtins.str],
                 policy_ids: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]):
        """
        The set of arguments for constructing a WorkloadScalingPolicyOrder resource.
        :param pulumi.Input[_builtins.str] cluster_id: CAST AI cluster id
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] policy_ids: List of scaling policy IDs in the order they should be applied.
        """
        pulumi.set(__self__, "cluster_id", cluster_id)
        pulumi.set(__self__, "policy_ids", policy_ids)

    @_builtins.property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> pulumi.Input[_builtins.str]:
        """
        CAST AI cluster id
        """
        return pulumi.get(self, "cluster_id")

    @cluster_id.setter
    def cluster_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "cluster_id", value)

    @_builtins.property
    @pulumi.getter(name="policyIds")
    def policy_ids(self) -> pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]:
        """
        List of scaling policy IDs in the order they should be applied.
        """
        return pulumi.get(self, "policy_ids")

    @policy_ids.setter
    def policy_ids(self, value: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]):
        pulumi.set(self, "policy_ids", value)


@pulumi.input_type
class _WorkloadScalingPolicyOrderState:
    def __init__(__self__, *,
                 cluster_id: Optional[pulumi.Input[_builtins.str]] = None,
                 policy_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None):
        """
        Input properties used for looking up and filtering WorkloadScalingPolicyOrder resources.
        :param pulumi.Input[_builtins.str] cluster_id: CAST AI cluster id
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] policy_ids: List of scaling policy IDs in the order they should be applied.
        """
        if cluster_id is not None:
            pulumi.set(__self__, "cluster_id", cluster_id)
        if policy_ids is not None:
            pulumi.set(__self__, "policy_ids", policy_ids)

    @_builtins.property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        CAST AI cluster id
        """
        return pulumi.get(self, "cluster_id")

    @cluster_id.setter
    def cluster_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cluster_id", value)

    @_builtins.property
    @pulumi.getter(name="policyIds")
    def policy_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        List of scaling policy IDs in the order they should be applied.
        """
        return pulumi.get(self, "policy_ids")

    @policy_ids.setter
    def policy_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "policy_ids", value)


@pulumi.type_token("castai:workload:WorkloadScalingPolicyOrder")
class WorkloadScalingPolicyOrder(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cluster_id: Optional[pulumi.Input[_builtins.str]] = None,
                 policy_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 __props__=None):
        """
        Create a WorkloadScalingPolicyOrder resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] cluster_id: CAST AI cluster id
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] policy_ids: List of scaling policy IDs in the order they should be applied.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: WorkloadScalingPolicyOrderArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a WorkloadScalingPolicyOrder resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param WorkloadScalingPolicyOrderArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(WorkloadScalingPolicyOrderArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cluster_id: Optional[pulumi.Input[_builtins.str]] = None,
                 policy_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = WorkloadScalingPolicyOrderArgs.__new__(WorkloadScalingPolicyOrderArgs)

            if cluster_id is None and not opts.urn:
                raise TypeError("Missing required property 'cluster_id'")
            __props__.__dict__["cluster_id"] = cluster_id
            if policy_ids is None and not opts.urn:
                raise TypeError("Missing required property 'policy_ids'")
            __props__.__dict__["policy_ids"] = policy_ids
        super(WorkloadScalingPolicyOrder, __self__).__init__(
            'castai:workload:WorkloadScalingPolicyOrder',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            cluster_id: Optional[pulumi.Input[_builtins.str]] = None,
            policy_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None) -> 'WorkloadScalingPolicyOrder':
        """
        Get an existing WorkloadScalingPolicyOrder resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] cluster_id: CAST AI cluster id
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] policy_ids: List of scaling policy IDs in the order they should be applied.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _WorkloadScalingPolicyOrderState.__new__(_WorkloadScalingPolicyOrderState)

        __props__.__dict__["cluster_id"] = cluster_id
        __props__.__dict__["policy_ids"] = policy_ids
        return WorkloadScalingPolicyOrder(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> pulumi.Output[_builtins.str]:
        """
        CAST AI cluster id
        """
        return pulumi.get(self, "cluster_id")

    @_builtins.property
    @pulumi.getter(name="policyIds")
    def policy_ids(self) -> pulumi.Output[Sequence[_builtins.str]]:
        """
        List of scaling policy IDs in the order they should be applied.
        """
        return pulumi.get(self, "policy_ids")

