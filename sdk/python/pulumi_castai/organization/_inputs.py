# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'EnterpriseGroupMemberArgs',
    'EnterpriseGroupMemberArgsDict',
    'EnterpriseGroupMemberMemberArgs',
    'EnterpriseGroupMemberMemberArgsDict',
    'EnterpriseGroupRoleBindingArgs',
    'EnterpriseGroupRoleBindingArgsDict',
    'EnterpriseGroupRoleBindingRoleBindingArgs',
    'EnterpriseGroupRoleBindingRoleBindingArgsDict',
    'EnterpriseGroupRoleBindingRoleBindingScopeArgs',
    'EnterpriseGroupRoleBindingRoleBindingScopeArgsDict',
    'EnterpriseGroupRoleBindingRoleBindingScopeScopeArgs',
    'EnterpriseGroupRoleBindingRoleBindingScopeScopeArgsDict',
    'OrganizationGroupMemberArgs',
    'OrganizationGroupMemberArgsDict',
    'OrganizationGroupMemberMemberArgs',
    'OrganizationGroupMemberMemberArgsDict',
    'SSOConnectionAadArgs',
    'SSOConnectionAadArgsDict',
    'SSOConnectionOktaArgs',
    'SSOConnectionOktaArgsDict',
    'ServiceAccountAuthorArgs',
    'ServiceAccountAuthorArgsDict',
]

MYPY = False

if not MYPY:
    class EnterpriseGroupMemberArgsDict(TypedDict):
        members: NotRequired[pulumi.Input[Sequence[pulumi.Input['EnterpriseGroupMemberMemberArgsDict']]]]
        """
        Group member configuration.
        """
elif False:
    EnterpriseGroupMemberArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class EnterpriseGroupMemberArgs:
    def __init__(__self__, *,
                 members: Optional[pulumi.Input[Sequence[pulumi.Input['EnterpriseGroupMemberMemberArgs']]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['EnterpriseGroupMemberMemberArgs']]] members: Group member configuration.
        """
        if members is not None:
            pulumi.set(__self__, "members", members)

    @_builtins.property
    @pulumi.getter
    def members(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['EnterpriseGroupMemberMemberArgs']]]]:
        """
        Group member configuration.
        """
        return pulumi.get(self, "members")

    @members.setter
    def members(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['EnterpriseGroupMemberMemberArgs']]]]):
        pulumi.set(self, "members", value)


if not MYPY:
    class EnterpriseGroupMemberMemberArgsDict(TypedDict):
        id: pulumi.Input[_builtins.str]
        """
        Member UUID.
        """
        kind: pulumi.Input[_builtins.str]
        """
        Kind of the member. Supported values: user, service_account.
        """
elif False:
    EnterpriseGroupMemberMemberArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class EnterpriseGroupMemberMemberArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[_builtins.str],
                 kind: pulumi.Input[_builtins.str]):
        """
        :param pulumi.Input[_builtins.str] id: Member UUID.
        :param pulumi.Input[_builtins.str] kind: Kind of the member. Supported values: user, service_account.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "kind", kind)

    @_builtins.property
    @pulumi.getter
    def id(self) -> pulumi.Input[_builtins.str]:
        """
        Member UUID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "id", value)

    @_builtins.property
    @pulumi.getter
    def kind(self) -> pulumi.Input[_builtins.str]:
        """
        Kind of the member. Supported values: user, service_account.
        """
        return pulumi.get(self, "kind")

    @kind.setter
    def kind(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "kind", value)


if not MYPY:
    class EnterpriseGroupRoleBindingArgsDict(TypedDict):
        role_bindings: NotRequired[pulumi.Input[Sequence[pulumi.Input['EnterpriseGroupRoleBindingRoleBindingArgsDict']]]]
        """
        Role binding configuration.
        """
elif False:
    EnterpriseGroupRoleBindingArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class EnterpriseGroupRoleBindingArgs:
    def __init__(__self__, *,
                 role_bindings: Optional[pulumi.Input[Sequence[pulumi.Input['EnterpriseGroupRoleBindingRoleBindingArgs']]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['EnterpriseGroupRoleBindingRoleBindingArgs']]] role_bindings: Role binding configuration.
        """
        if role_bindings is not None:
            pulumi.set(__self__, "role_bindings", role_bindings)

    @_builtins.property
    @pulumi.getter(name="roleBindings")
    def role_bindings(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['EnterpriseGroupRoleBindingRoleBindingArgs']]]]:
        """
        Role binding configuration.
        """
        return pulumi.get(self, "role_bindings")

    @role_bindings.setter
    def role_bindings(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['EnterpriseGroupRoleBindingRoleBindingArgs']]]]):
        pulumi.set(self, "role_bindings", value)


if not MYPY:
    class EnterpriseGroupRoleBindingRoleBindingArgsDict(TypedDict):
        name: pulumi.Input[_builtins.str]
        """
        Role binding name.
        """
        role_id: pulumi.Input[_builtins.str]
        """
        Role UUID.
        """
        scopes: pulumi.Input[Sequence[pulumi.Input['EnterpriseGroupRoleBindingRoleBindingScopeArgsDict']]]
        """
        List of scopes for the role binding.
        """
        id: NotRequired[pulumi.Input[_builtins.str]]
        """
        Role binding ID assigned by the API.
        """
elif False:
    EnterpriseGroupRoleBindingRoleBindingArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class EnterpriseGroupRoleBindingRoleBindingArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[_builtins.str],
                 role_id: pulumi.Input[_builtins.str],
                 scopes: pulumi.Input[Sequence[pulumi.Input['EnterpriseGroupRoleBindingRoleBindingScopeArgs']]],
                 id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] name: Role binding name.
        :param pulumi.Input[_builtins.str] role_id: Role UUID.
        :param pulumi.Input[Sequence[pulumi.Input['EnterpriseGroupRoleBindingRoleBindingScopeArgs']]] scopes: List of scopes for the role binding.
        :param pulumi.Input[_builtins.str] id: Role binding ID assigned by the API.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "role_id", role_id)
        pulumi.set(__self__, "scopes", scopes)
        if id is not None:
            pulumi.set(__self__, "id", id)

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Input[_builtins.str]:
        """
        Role binding name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="roleId")
    def role_id(self) -> pulumi.Input[_builtins.str]:
        """
        Role UUID.
        """
        return pulumi.get(self, "role_id")

    @role_id.setter
    def role_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "role_id", value)

    @_builtins.property
    @pulumi.getter
    def scopes(self) -> pulumi.Input[Sequence[pulumi.Input['EnterpriseGroupRoleBindingRoleBindingScopeArgs']]]:
        """
        List of scopes for the role binding.
        """
        return pulumi.get(self, "scopes")

    @scopes.setter
    def scopes(self, value: pulumi.Input[Sequence[pulumi.Input['EnterpriseGroupRoleBindingRoleBindingScopeArgs']]]):
        pulumi.set(self, "scopes", value)

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Role binding ID assigned by the API.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "id", value)


if not MYPY:
    class EnterpriseGroupRoleBindingRoleBindingScopeArgsDict(TypedDict):
        scopes: NotRequired[pulumi.Input[Sequence[pulumi.Input['EnterpriseGroupRoleBindingRoleBindingScopeScopeArgsDict']]]]
        """
        Scope configuration.
        """
elif False:
    EnterpriseGroupRoleBindingRoleBindingScopeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class EnterpriseGroupRoleBindingRoleBindingScopeArgs:
    def __init__(__self__, *,
                 scopes: Optional[pulumi.Input[Sequence[pulumi.Input['EnterpriseGroupRoleBindingRoleBindingScopeScopeArgs']]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['EnterpriseGroupRoleBindingRoleBindingScopeScopeArgs']]] scopes: Scope configuration.
        """
        if scopes is not None:
            pulumi.set(__self__, "scopes", scopes)

    @_builtins.property
    @pulumi.getter
    def scopes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['EnterpriseGroupRoleBindingRoleBindingScopeScopeArgs']]]]:
        """
        Scope configuration.
        """
        return pulumi.get(self, "scopes")

    @scopes.setter
    def scopes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['EnterpriseGroupRoleBindingRoleBindingScopeScopeArgs']]]]):
        pulumi.set(self, "scopes", value)


if not MYPY:
    class EnterpriseGroupRoleBindingRoleBindingScopeScopeArgsDict(TypedDict):
        cluster: NotRequired[pulumi.Input[_builtins.str]]
        """
        Cluster ID scope.
        """
        organization: NotRequired[pulumi.Input[_builtins.str]]
        """
        Organization ID scope.
        """
elif False:
    EnterpriseGroupRoleBindingRoleBindingScopeScopeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class EnterpriseGroupRoleBindingRoleBindingScopeScopeArgs:
    def __init__(__self__, *,
                 cluster: Optional[pulumi.Input[_builtins.str]] = None,
                 organization: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] cluster: Cluster ID scope.
        :param pulumi.Input[_builtins.str] organization: Organization ID scope.
        """
        if cluster is not None:
            pulumi.set(__self__, "cluster", cluster)
        if organization is not None:
            pulumi.set(__self__, "organization", organization)

    @_builtins.property
    @pulumi.getter
    def cluster(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Cluster ID scope.
        """
        return pulumi.get(self, "cluster")

    @cluster.setter
    def cluster(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cluster", value)

    @_builtins.property
    @pulumi.getter
    def organization(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Organization ID scope.
        """
        return pulumi.get(self, "organization")

    @organization.setter
    def organization(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "organization", value)


if not MYPY:
    class OrganizationGroupMemberArgsDict(TypedDict):
        members: NotRequired[pulumi.Input[Sequence[pulumi.Input['OrganizationGroupMemberMemberArgsDict']]]]
elif False:
    OrganizationGroupMemberArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OrganizationGroupMemberArgs:
    def __init__(__self__, *,
                 members: Optional[pulumi.Input[Sequence[pulumi.Input['OrganizationGroupMemberMemberArgs']]]] = None):
        if members is not None:
            pulumi.set(__self__, "members", members)

    @_builtins.property
    @pulumi.getter
    def members(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['OrganizationGroupMemberMemberArgs']]]]:
        return pulumi.get(self, "members")

    @members.setter
    def members(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['OrganizationGroupMemberMemberArgs']]]]):
        pulumi.set(self, "members", value)


if not MYPY:
    class OrganizationGroupMemberMemberArgsDict(TypedDict):
        email: pulumi.Input[_builtins.str]
        id: pulumi.Input[_builtins.str]
        kind: pulumi.Input[_builtins.str]
        """
        Kind of the member. Supported values include: user, service_account.
        """
elif False:
    OrganizationGroupMemberMemberArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OrganizationGroupMemberMemberArgs:
    def __init__(__self__, *,
                 email: pulumi.Input[_builtins.str],
                 id: pulumi.Input[_builtins.str],
                 kind: pulumi.Input[_builtins.str]):
        """
        :param pulumi.Input[_builtins.str] kind: Kind of the member. Supported values include: user, service_account.
        """
        pulumi.set(__self__, "email", email)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "kind", kind)

    @_builtins.property
    @pulumi.getter
    def email(self) -> pulumi.Input[_builtins.str]:
        return pulumi.get(self, "email")

    @email.setter
    def email(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "email", value)

    @_builtins.property
    @pulumi.getter
    def id(self) -> pulumi.Input[_builtins.str]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "id", value)

    @_builtins.property
    @pulumi.getter
    def kind(self) -> pulumi.Input[_builtins.str]:
        """
        Kind of the member. Supported values include: user, service_account.
        """
        return pulumi.get(self, "kind")

    @kind.setter
    def kind(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "kind", value)


if not MYPY:
    class SSOConnectionAadArgsDict(TypedDict):
        ad_domain: pulumi.Input[_builtins.str]
        """
        Azure AD domain
        """
        client_id: pulumi.Input[_builtins.str]
        """
        Azure AD client ID
        """
        client_secret: pulumi.Input[_builtins.str]
        """
        Azure AD client secret
        """
elif False:
    SSOConnectionAadArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class SSOConnectionAadArgs:
    def __init__(__self__, *,
                 ad_domain: pulumi.Input[_builtins.str],
                 client_id: pulumi.Input[_builtins.str],
                 client_secret: pulumi.Input[_builtins.str]):
        """
        :param pulumi.Input[_builtins.str] ad_domain: Azure AD domain
        :param pulumi.Input[_builtins.str] client_id: Azure AD client ID
        :param pulumi.Input[_builtins.str] client_secret: Azure AD client secret
        """
        pulumi.set(__self__, "ad_domain", ad_domain)
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "client_secret", client_secret)

    @_builtins.property
    @pulumi.getter(name="adDomain")
    def ad_domain(self) -> pulumi.Input[_builtins.str]:
        """
        Azure AD domain
        """
        return pulumi.get(self, "ad_domain")

    @ad_domain.setter
    def ad_domain(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "ad_domain", value)

    @_builtins.property
    @pulumi.getter(name="clientId")
    def client_id(self) -> pulumi.Input[_builtins.str]:
        """
        Azure AD client ID
        """
        return pulumi.get(self, "client_id")

    @client_id.setter
    def client_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "client_id", value)

    @_builtins.property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> pulumi.Input[_builtins.str]:
        """
        Azure AD client secret
        """
        return pulumi.get(self, "client_secret")

    @client_secret.setter
    def client_secret(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "client_secret", value)


if not MYPY:
    class SSOConnectionOktaArgsDict(TypedDict):
        client_id: pulumi.Input[_builtins.str]
        """
        Okta client ID
        """
        client_secret: pulumi.Input[_builtins.str]
        """
        Okta client secret
        """
        okta_domain: pulumi.Input[_builtins.str]
        """
        Okta domain
        """
elif False:
    SSOConnectionOktaArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class SSOConnectionOktaArgs:
    def __init__(__self__, *,
                 client_id: pulumi.Input[_builtins.str],
                 client_secret: pulumi.Input[_builtins.str],
                 okta_domain: pulumi.Input[_builtins.str]):
        """
        :param pulumi.Input[_builtins.str] client_id: Okta client ID
        :param pulumi.Input[_builtins.str] client_secret: Okta client secret
        :param pulumi.Input[_builtins.str] okta_domain: Okta domain
        """
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "client_secret", client_secret)
        pulumi.set(__self__, "okta_domain", okta_domain)

    @_builtins.property
    @pulumi.getter(name="clientId")
    def client_id(self) -> pulumi.Input[_builtins.str]:
        """
        Okta client ID
        """
        return pulumi.get(self, "client_id")

    @client_id.setter
    def client_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "client_id", value)

    @_builtins.property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> pulumi.Input[_builtins.str]:
        """
        Okta client secret
        """
        return pulumi.get(self, "client_secret")

    @client_secret.setter
    def client_secret(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "client_secret", value)

    @_builtins.property
    @pulumi.getter(name="oktaDomain")
    def okta_domain(self) -> pulumi.Input[_builtins.str]:
        """
        Okta domain
        """
        return pulumi.get(self, "okta_domain")

    @okta_domain.setter
    def okta_domain(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "okta_domain", value)


if not MYPY:
    class ServiceAccountAuthorArgsDict(TypedDict):
        email: NotRequired[pulumi.Input[_builtins.str]]
        id: NotRequired[pulumi.Input[_builtins.str]]
        kind: NotRequired[pulumi.Input[_builtins.str]]
elif False:
    ServiceAccountAuthorArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ServiceAccountAuthorArgs:
    def __init__(__self__, *,
                 email: Optional[pulumi.Input[_builtins.str]] = None,
                 id: Optional[pulumi.Input[_builtins.str]] = None,
                 kind: Optional[pulumi.Input[_builtins.str]] = None):
        if email is not None:
            pulumi.set(__self__, "email", email)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if kind is not None:
            pulumi.set(__self__, "kind", kind)

    @_builtins.property
    @pulumi.getter
    def email(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "email")

    @email.setter
    def email(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "email", value)

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "id", value)

    @_builtins.property
    @pulumi.getter
    def kind(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "kind")

    @kind.setter
    def kind(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "kind", value)


