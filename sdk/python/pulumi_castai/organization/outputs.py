# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'EnterpriseGroupMember',
    'EnterpriseGroupMemberMember',
    'EnterpriseGroupRoleBinding',
    'EnterpriseGroupRoleBindingRoleBinding',
    'EnterpriseGroupRoleBindingRoleBindingScope',
    'EnterpriseGroupRoleBindingRoleBindingScopeScope',
    'OrganizationGroupMember',
    'OrganizationGroupMemberMember',
    'SSOConnectionAad',
    'SSOConnectionOkta',
    'ServiceAccountAuthor',
]

@pulumi.output_type
class EnterpriseGroupMember(dict):
    def __init__(__self__, *,
                 members: Optional[Sequence['outputs.EnterpriseGroupMemberMember']] = None):
        """
        :param Sequence['EnterpriseGroupMemberMemberArgs'] members: Group member configuration.
        """
        if members is not None:
            pulumi.set(__self__, "members", members)

    @_builtins.property
    @pulumi.getter
    def members(self) -> Optional[Sequence['outputs.EnterpriseGroupMemberMember']]:
        """
        Group member configuration.
        """
        return pulumi.get(self, "members")


@pulumi.output_type
class EnterpriseGroupMemberMember(dict):
    def __init__(__self__, *,
                 id: _builtins.str,
                 kind: _builtins.str):
        """
        :param _builtins.str id: Member UUID.
        :param _builtins.str kind: Kind of the member. Supported values: user, service_account.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "kind", kind)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        Member UUID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def kind(self) -> _builtins.str:
        """
        Kind of the member. Supported values: user, service_account.
        """
        return pulumi.get(self, "kind")


@pulumi.output_type
class EnterpriseGroupRoleBinding(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "roleBindings":
            suggest = "role_bindings"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EnterpriseGroupRoleBinding. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EnterpriseGroupRoleBinding.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EnterpriseGroupRoleBinding.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 role_bindings: Optional[Sequence['outputs.EnterpriseGroupRoleBindingRoleBinding']] = None):
        """
        :param Sequence['EnterpriseGroupRoleBindingRoleBindingArgs'] role_bindings: Role binding configuration.
        """
        if role_bindings is not None:
            pulumi.set(__self__, "role_bindings", role_bindings)

    @_builtins.property
    @pulumi.getter(name="roleBindings")
    def role_bindings(self) -> Optional[Sequence['outputs.EnterpriseGroupRoleBindingRoleBinding']]:
        """
        Role binding configuration.
        """
        return pulumi.get(self, "role_bindings")


@pulumi.output_type
class EnterpriseGroupRoleBindingRoleBinding(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "roleId":
            suggest = "role_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EnterpriseGroupRoleBindingRoleBinding. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EnterpriseGroupRoleBindingRoleBinding.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EnterpriseGroupRoleBindingRoleBinding.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: _builtins.str,
                 role_id: _builtins.str,
                 scopes: Sequence['outputs.EnterpriseGroupRoleBindingRoleBindingScope'],
                 id: Optional[_builtins.str] = None):
        """
        :param _builtins.str name: Role binding name.
        :param _builtins.str role_id: Role UUID.
        :param Sequence['EnterpriseGroupRoleBindingRoleBindingScopeArgs'] scopes: List of scopes for the role binding.
        :param _builtins.str id: Role binding ID assigned by the API.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "role_id", role_id)
        pulumi.set(__self__, "scopes", scopes)
        if id is not None:
            pulumi.set(__self__, "id", id)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Role binding name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="roleId")
    def role_id(self) -> _builtins.str:
        """
        Role UUID.
        """
        return pulumi.get(self, "role_id")

    @_builtins.property
    @pulumi.getter
    def scopes(self) -> Sequence['outputs.EnterpriseGroupRoleBindingRoleBindingScope']:
        """
        List of scopes for the role binding.
        """
        return pulumi.get(self, "scopes")

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[_builtins.str]:
        """
        Role binding ID assigned by the API.
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class EnterpriseGroupRoleBindingRoleBindingScope(dict):
    def __init__(__self__, *,
                 scopes: Optional[Sequence['outputs.EnterpriseGroupRoleBindingRoleBindingScopeScope']] = None):
        """
        :param Sequence['EnterpriseGroupRoleBindingRoleBindingScopeScopeArgs'] scopes: Scope configuration.
        """
        if scopes is not None:
            pulumi.set(__self__, "scopes", scopes)

    @_builtins.property
    @pulumi.getter
    def scopes(self) -> Optional[Sequence['outputs.EnterpriseGroupRoleBindingRoleBindingScopeScope']]:
        """
        Scope configuration.
        """
        return pulumi.get(self, "scopes")


@pulumi.output_type
class EnterpriseGroupRoleBindingRoleBindingScopeScope(dict):
    def __init__(__self__, *,
                 cluster: Optional[_builtins.str] = None,
                 organization: Optional[_builtins.str] = None):
        """
        :param _builtins.str cluster: Cluster ID scope.
        :param _builtins.str organization: Organization ID scope.
        """
        if cluster is not None:
            pulumi.set(__self__, "cluster", cluster)
        if organization is not None:
            pulumi.set(__self__, "organization", organization)

    @_builtins.property
    @pulumi.getter
    def cluster(self) -> Optional[_builtins.str]:
        """
        Cluster ID scope.
        """
        return pulumi.get(self, "cluster")

    @_builtins.property
    @pulumi.getter
    def organization(self) -> Optional[_builtins.str]:
        """
        Organization ID scope.
        """
        return pulumi.get(self, "organization")


@pulumi.output_type
class OrganizationGroupMember(dict):
    def __init__(__self__, *,
                 members: Optional[Sequence['outputs.OrganizationGroupMemberMember']] = None):
        if members is not None:
            pulumi.set(__self__, "members", members)

    @_builtins.property
    @pulumi.getter
    def members(self) -> Optional[Sequence['outputs.OrganizationGroupMemberMember']]:
        return pulumi.get(self, "members")


@pulumi.output_type
class OrganizationGroupMemberMember(dict):
    def __init__(__self__, *,
                 email: _builtins.str,
                 id: _builtins.str,
                 kind: _builtins.str):
        """
        :param _builtins.str kind: Kind of the member. Supported values include: user, service_account.
        """
        pulumi.set(__self__, "email", email)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "kind", kind)

    @_builtins.property
    @pulumi.getter
    def email(self) -> _builtins.str:
        return pulumi.get(self, "email")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def kind(self) -> _builtins.str:
        """
        Kind of the member. Supported values include: user, service_account.
        """
        return pulumi.get(self, "kind")


@pulumi.output_type
class SSOConnectionAad(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "adDomain":
            suggest = "ad_domain"
        elif key == "clientId":
            suggest = "client_id"
        elif key == "clientSecret":
            suggest = "client_secret"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SSOConnectionAad. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SSOConnectionAad.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SSOConnectionAad.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ad_domain: _builtins.str,
                 client_id: _builtins.str,
                 client_secret: _builtins.str):
        """
        :param _builtins.str ad_domain: Azure AD domain
        :param _builtins.str client_id: Azure AD client ID
        :param _builtins.str client_secret: Azure AD client secret
        """
        pulumi.set(__self__, "ad_domain", ad_domain)
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "client_secret", client_secret)

    @_builtins.property
    @pulumi.getter(name="adDomain")
    def ad_domain(self) -> _builtins.str:
        """
        Azure AD domain
        """
        return pulumi.get(self, "ad_domain")

    @_builtins.property
    @pulumi.getter(name="clientId")
    def client_id(self) -> _builtins.str:
        """
        Azure AD client ID
        """
        return pulumi.get(self, "client_id")

    @_builtins.property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> _builtins.str:
        """
        Azure AD client secret
        """
        return pulumi.get(self, "client_secret")


@pulumi.output_type
class SSOConnectionOkta(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "clientId":
            suggest = "client_id"
        elif key == "clientSecret":
            suggest = "client_secret"
        elif key == "oktaDomain":
            suggest = "okta_domain"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SSOConnectionOkta. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SSOConnectionOkta.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SSOConnectionOkta.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 client_id: _builtins.str,
                 client_secret: _builtins.str,
                 okta_domain: _builtins.str):
        """
        :param _builtins.str client_id: Okta client ID
        :param _builtins.str client_secret: Okta client secret
        :param _builtins.str okta_domain: Okta domain
        """
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "client_secret", client_secret)
        pulumi.set(__self__, "okta_domain", okta_domain)

    @_builtins.property
    @pulumi.getter(name="clientId")
    def client_id(self) -> _builtins.str:
        """
        Okta client ID
        """
        return pulumi.get(self, "client_id")

    @_builtins.property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> _builtins.str:
        """
        Okta client secret
        """
        return pulumi.get(self, "client_secret")

    @_builtins.property
    @pulumi.getter(name="oktaDomain")
    def okta_domain(self) -> _builtins.str:
        """
        Okta domain
        """
        return pulumi.get(self, "okta_domain")


@pulumi.output_type
class ServiceAccountAuthor(dict):
    def __init__(__self__, *,
                 email: Optional[_builtins.str] = None,
                 id: Optional[_builtins.str] = None,
                 kind: Optional[_builtins.str] = None):
        if email is not None:
            pulumi.set(__self__, "email", email)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if kind is not None:
            pulumi.set(__self__, "kind", kind)

    @_builtins.property
    @pulumi.getter
    def email(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "email")

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def kind(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "kind")


