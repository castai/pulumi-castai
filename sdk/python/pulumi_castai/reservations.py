# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ReservationsArgs', 'Reservations']

@pulumi.input_type
class ReservationsArgs:
    def __init__(__self__, *,
                 reservations_csv: pulumi.Input[_builtins.str],
                 organization_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a Reservations resource.
        :param pulumi.Input[_builtins.str] reservations_csv: csv file containing reservations
        :param pulumi.Input[_builtins.str] organization_id: organization
        """
        pulumi.set(__self__, "reservations_csv", reservations_csv)
        if organization_id is not None:
            pulumi.set(__self__, "organization_id", organization_id)

    @_builtins.property
    @pulumi.getter(name="reservationsCsv")
    def reservations_csv(self) -> pulumi.Input[_builtins.str]:
        """
        csv file containing reservations
        """
        return pulumi.get(self, "reservations_csv")

    @reservations_csv.setter
    def reservations_csv(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "reservations_csv", value)

    @_builtins.property
    @pulumi.getter(name="organizationId")
    def organization_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        organization
        """
        return pulumi.get(self, "organization_id")

    @organization_id.setter
    def organization_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "organization_id", value)


@pulumi.input_type
class _ReservationsState:
    def __init__(__self__, *,
                 organization_id: Optional[pulumi.Input[_builtins.str]] = None,
                 reservations: Optional[pulumi.Input[Sequence[pulumi.Input['ReservationsReservationArgs']]]] = None,
                 reservations_csv: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering Reservations resources.
        :param pulumi.Input[_builtins.str] organization_id: organization
        :param pulumi.Input[_builtins.str] reservations_csv: csv file containing reservations
        """
        if organization_id is not None:
            pulumi.set(__self__, "organization_id", organization_id)
        if reservations is not None:
            pulumi.set(__self__, "reservations", reservations)
        if reservations_csv is not None:
            pulumi.set(__self__, "reservations_csv", reservations_csv)

    @_builtins.property
    @pulumi.getter(name="organizationId")
    def organization_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        organization
        """
        return pulumi.get(self, "organization_id")

    @organization_id.setter
    def organization_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "organization_id", value)

    @_builtins.property
    @pulumi.getter
    def reservations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ReservationsReservationArgs']]]]:
        return pulumi.get(self, "reservations")

    @reservations.setter
    def reservations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ReservationsReservationArgs']]]]):
        pulumi.set(self, "reservations", value)

    @_builtins.property
    @pulumi.getter(name="reservationsCsv")
    def reservations_csv(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        csv file containing reservations
        """
        return pulumi.get(self, "reservations_csv")

    @reservations_csv.setter
    def reservations_csv(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "reservations_csv", value)


@pulumi.type_token("castai:index:Reservations")
class Reservations(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 organization_id: Optional[pulumi.Input[_builtins.str]] = None,
                 reservations_csv: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Create a Reservations resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] organization_id: organization
        :param pulumi.Input[_builtins.str] reservations_csv: csv file containing reservations
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ReservationsArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a Reservations resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param ReservationsArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ReservationsArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 organization_id: Optional[pulumi.Input[_builtins.str]] = None,
                 reservations_csv: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ReservationsArgs.__new__(ReservationsArgs)

            __props__.__dict__["organization_id"] = organization_id
            if reservations_csv is None and not opts.urn:
                raise TypeError("Missing required property 'reservations_csv'")
            __props__.__dict__["reservations_csv"] = reservations_csv
            __props__.__dict__["reservations"] = None
        super(Reservations, __self__).__init__(
            'castai:index:Reservations',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            organization_id: Optional[pulumi.Input[_builtins.str]] = None,
            reservations: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ReservationsReservationArgs', 'ReservationsReservationArgsDict']]]]] = None,
            reservations_csv: Optional[pulumi.Input[_builtins.str]] = None) -> 'Reservations':
        """
        Get an existing Reservations resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] organization_id: organization
        :param pulumi.Input[_builtins.str] reservations_csv: csv file containing reservations
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ReservationsState.__new__(_ReservationsState)

        __props__.__dict__["organization_id"] = organization_id
        __props__.__dict__["reservations"] = reservations
        __props__.__dict__["reservations_csv"] = reservations_csv
        return Reservations(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="organizationId")
    def organization_id(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        organization
        """
        return pulumi.get(self, "organization_id")

    @_builtins.property
    @pulumi.getter
    def reservations(self) -> pulumi.Output[Sequence['outputs.ReservationsReservation']]:
        return pulumi.get(self, "reservations")

    @_builtins.property
    @pulumi.getter(name="reservationsCsv")
    def reservations_csv(self) -> pulumi.Output[_builtins.str]:
        """
        csv file containing reservations
        """
        return pulumi.get(self, "reservations_csv")

