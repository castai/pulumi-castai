# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetWorkloadScalingPolicyOrderDataSourceResult',
    'AwaitableGetWorkloadScalingPolicyOrderDataSourceResult',
    'get_workload_scaling_policy_order_data_source',
    'get_workload_scaling_policy_order_data_source_output',
]

@pulumi.output_type
class GetWorkloadScalingPolicyOrderDataSourceResult:
    """
    A collection of values returned by GetWorkloadScalingPolicyOrderDataSource.
    """
    def __init__(__self__, cluster_id=None, id=None, policy_ids=None):
        if cluster_id and not isinstance(cluster_id, str):
            raise TypeError("Expected argument 'cluster_id' to be a str")
        pulumi.set(__self__, "cluster_id", cluster_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if policy_ids and not isinstance(policy_ids, list):
            raise TypeError("Expected argument 'policy_ids' to be a list")
        pulumi.set(__self__, "policy_ids", policy_ids)

    @_builtins.property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> _builtins.str:
        return pulumi.get(self, "cluster_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="policyIds")
    def policy_ids(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "policy_ids")


class AwaitableGetWorkloadScalingPolicyOrderDataSourceResult(GetWorkloadScalingPolicyOrderDataSourceResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetWorkloadScalingPolicyOrderDataSourceResult(
            cluster_id=self.cluster_id,
            id=self.id,
            policy_ids=self.policy_ids)


def get_workload_scaling_policy_order_data_source(cluster_id: Optional[_builtins.str] = None,
                                                  opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetWorkloadScalingPolicyOrderDataSourceResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['clusterId'] = cluster_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('castai:workload:GetWorkloadScalingPolicyOrderDataSource', __args__, opts=opts, typ=GetWorkloadScalingPolicyOrderDataSourceResult).value

    return AwaitableGetWorkloadScalingPolicyOrderDataSourceResult(
        cluster_id=pulumi.get(__ret__, 'cluster_id'),
        id=pulumi.get(__ret__, 'id'),
        policy_ids=pulumi.get(__ret__, 'policy_ids'))
def get_workload_scaling_policy_order_data_source_output(cluster_id: Optional[pulumi.Input[_builtins.str]] = None,
                                                         opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetWorkloadScalingPolicyOrderDataSourceResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['clusterId'] = cluster_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('castai:workload:GetWorkloadScalingPolicyOrderDataSource', __args__, opts=opts, typ=GetWorkloadScalingPolicyOrderDataSourceResult)
    return __ret__.apply(lambda __response__: GetWorkloadScalingPolicyOrderDataSourceResult(
        cluster_id=pulumi.get(__response__, 'cluster_id'),
        id=pulumi.get(__response__, 'id'),
        policy_ids=pulumi.get(__response__, 'policy_ids')))
