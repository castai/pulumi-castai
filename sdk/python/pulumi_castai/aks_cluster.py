# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import azure as _azure

__all__ = ['AksClusterArgs', 'AksCluster']

@pulumi.input_type
class AksClusterArgs:
    def __init__(__self__, *,
                 client_id: pulumi.Input[_builtins.str],
                 client_secret: pulumi.Input[_builtins.str],
                 node_resource_group: pulumi.Input[_builtins.str],
                 region: pulumi.Input[_builtins.str],
                 subscription_id: pulumi.Input[_builtins.str],
                 tenant_id: pulumi.Input[_builtins.str],
                 delete_nodes_on_disconnect: Optional[pulumi.Input[_builtins.bool]] = None,
                 http_proxy_config: Optional[pulumi.Input['_azure.AksClusterHttpProxyConfigArgs']] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a AksCluster resource.
        :param pulumi.Input[_builtins.str] client_id: Azure AD application ID that is created and used by CAST AI.
        :param pulumi.Input[_builtins.str] client_secret: Azure AD application password that will be used by CAST AI.
        :param pulumi.Input[_builtins.str] node_resource_group: Azure resource group in which nodes are and will be created.
        :param pulumi.Input[_builtins.str] region: AKS cluster region.
        :param pulumi.Input[_builtins.str] subscription_id: ID of the Azure subscription.
        :param pulumi.Input[_builtins.str] tenant_id: Azure AD tenant ID from the used subscription.
        :param pulumi.Input[_builtins.bool] delete_nodes_on_disconnect: Should CAST AI remove nodes managed by CAST.AI on disconnect.
        :param pulumi.Input['_azure.AksClusterHttpProxyConfigArgs'] http_proxy_config: HTTP proxy configuration for CAST AI nodes and node components.
        :param pulumi.Input[_builtins.str] name: AKS cluster name.
        """
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "client_secret", client_secret)
        pulumi.set(__self__, "node_resource_group", node_resource_group)
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "subscription_id", subscription_id)
        pulumi.set(__self__, "tenant_id", tenant_id)
        if delete_nodes_on_disconnect is not None:
            pulumi.set(__self__, "delete_nodes_on_disconnect", delete_nodes_on_disconnect)
        if http_proxy_config is not None:
            pulumi.set(__self__, "http_proxy_config", http_proxy_config)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @_builtins.property
    @pulumi.getter(name="clientId")
    def client_id(self) -> pulumi.Input[_builtins.str]:
        """
        Azure AD application ID that is created and used by CAST AI.
        """
        return pulumi.get(self, "client_id")

    @client_id.setter
    def client_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "client_id", value)

    @_builtins.property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> pulumi.Input[_builtins.str]:
        """
        Azure AD application password that will be used by CAST AI.
        """
        return pulumi.get(self, "client_secret")

    @client_secret.setter
    def client_secret(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "client_secret", value)

    @_builtins.property
    @pulumi.getter(name="nodeResourceGroup")
    def node_resource_group(self) -> pulumi.Input[_builtins.str]:
        """
        Azure resource group in which nodes are and will be created.
        """
        return pulumi.get(self, "node_resource_group")

    @node_resource_group.setter
    def node_resource_group(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "node_resource_group", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Input[_builtins.str]:
        """
        AKS cluster region.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="subscriptionId")
    def subscription_id(self) -> pulumi.Input[_builtins.str]:
        """
        ID of the Azure subscription.
        """
        return pulumi.get(self, "subscription_id")

    @subscription_id.setter
    def subscription_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "subscription_id", value)

    @_builtins.property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> pulumi.Input[_builtins.str]:
        """
        Azure AD tenant ID from the used subscription.
        """
        return pulumi.get(self, "tenant_id")

    @tenant_id.setter
    def tenant_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "tenant_id", value)

    @_builtins.property
    @pulumi.getter(name="deleteNodesOnDisconnect")
    def delete_nodes_on_disconnect(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Should CAST AI remove nodes managed by CAST.AI on disconnect.
        """
        return pulumi.get(self, "delete_nodes_on_disconnect")

    @delete_nodes_on_disconnect.setter
    def delete_nodes_on_disconnect(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "delete_nodes_on_disconnect", value)

    @_builtins.property
    @pulumi.getter(name="httpProxyConfig")
    def http_proxy_config(self) -> Optional[pulumi.Input['_azure.AksClusterHttpProxyConfigArgs']]:
        """
        HTTP proxy configuration for CAST AI nodes and node components.
        """
        return pulumi.get(self, "http_proxy_config")

    @http_proxy_config.setter
    def http_proxy_config(self, value: Optional[pulumi.Input['_azure.AksClusterHttpProxyConfigArgs']]):
        pulumi.set(self, "http_proxy_config", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        AKS cluster name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class _AksClusterState:
    def __init__(__self__, *,
                 client_id: Optional[pulumi.Input[_builtins.str]] = None,
                 client_secret: Optional[pulumi.Input[_builtins.str]] = None,
                 cluster_token: Optional[pulumi.Input[_builtins.str]] = None,
                 credentials_id: Optional[pulumi.Input[_builtins.str]] = None,
                 delete_nodes_on_disconnect: Optional[pulumi.Input[_builtins.bool]] = None,
                 http_proxy_config: Optional[pulumi.Input['_azure.AksClusterHttpProxyConfigArgs']] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 node_resource_group: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 subscription_id: Optional[pulumi.Input[_builtins.str]] = None,
                 tenant_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering AksCluster resources.
        :param pulumi.Input[_builtins.str] client_id: Azure AD application ID that is created and used by CAST AI.
        :param pulumi.Input[_builtins.str] client_secret: Azure AD application password that will be used by CAST AI.
        :param pulumi.Input[_builtins.str] cluster_token: CAST AI cluster token.
        :param pulumi.Input[_builtins.str] credentials_id: CAST AI internal credentials ID
        :param pulumi.Input[_builtins.bool] delete_nodes_on_disconnect: Should CAST AI remove nodes managed by CAST.AI on disconnect.
        :param pulumi.Input['_azure.AksClusterHttpProxyConfigArgs'] http_proxy_config: HTTP proxy configuration for CAST AI nodes and node components.
        :param pulumi.Input[_builtins.str] name: AKS cluster name.
        :param pulumi.Input[_builtins.str] node_resource_group: Azure resource group in which nodes are and will be created.
        :param pulumi.Input[_builtins.str] region: AKS cluster region.
        :param pulumi.Input[_builtins.str] subscription_id: ID of the Azure subscription.
        :param pulumi.Input[_builtins.str] tenant_id: Azure AD tenant ID from the used subscription.
        """
        if client_id is not None:
            pulumi.set(__self__, "client_id", client_id)
        if client_secret is not None:
            pulumi.set(__self__, "client_secret", client_secret)
        if cluster_token is not None:
            pulumi.set(__self__, "cluster_token", cluster_token)
        if credentials_id is not None:
            pulumi.set(__self__, "credentials_id", credentials_id)
        if delete_nodes_on_disconnect is not None:
            pulumi.set(__self__, "delete_nodes_on_disconnect", delete_nodes_on_disconnect)
        if http_proxy_config is not None:
            pulumi.set(__self__, "http_proxy_config", http_proxy_config)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if node_resource_group is not None:
            pulumi.set(__self__, "node_resource_group", node_resource_group)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if subscription_id is not None:
            pulumi.set(__self__, "subscription_id", subscription_id)
        if tenant_id is not None:
            pulumi.set(__self__, "tenant_id", tenant_id)

    @_builtins.property
    @pulumi.getter(name="clientId")
    def client_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Azure AD application ID that is created and used by CAST AI.
        """
        return pulumi.get(self, "client_id")

    @client_id.setter
    def client_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "client_id", value)

    @_builtins.property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Azure AD application password that will be used by CAST AI.
        """
        return pulumi.get(self, "client_secret")

    @client_secret.setter
    def client_secret(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "client_secret", value)

    @_builtins.property
    @pulumi.getter(name="clusterToken")
    def cluster_token(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        CAST AI cluster token.
        """
        return pulumi.get(self, "cluster_token")

    @cluster_token.setter
    def cluster_token(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cluster_token", value)

    @_builtins.property
    @pulumi.getter(name="credentialsId")
    def credentials_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        CAST AI internal credentials ID
        """
        return pulumi.get(self, "credentials_id")

    @credentials_id.setter
    def credentials_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "credentials_id", value)

    @_builtins.property
    @pulumi.getter(name="deleteNodesOnDisconnect")
    def delete_nodes_on_disconnect(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Should CAST AI remove nodes managed by CAST.AI on disconnect.
        """
        return pulumi.get(self, "delete_nodes_on_disconnect")

    @delete_nodes_on_disconnect.setter
    def delete_nodes_on_disconnect(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "delete_nodes_on_disconnect", value)

    @_builtins.property
    @pulumi.getter(name="httpProxyConfig")
    def http_proxy_config(self) -> Optional[pulumi.Input['_azure.AksClusterHttpProxyConfigArgs']]:
        """
        HTTP proxy configuration for CAST AI nodes and node components.
        """
        return pulumi.get(self, "http_proxy_config")

    @http_proxy_config.setter
    def http_proxy_config(self, value: Optional[pulumi.Input['_azure.AksClusterHttpProxyConfigArgs']]):
        pulumi.set(self, "http_proxy_config", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        AKS cluster name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="nodeResourceGroup")
    def node_resource_group(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Azure resource group in which nodes are and will be created.
        """
        return pulumi.get(self, "node_resource_group")

    @node_resource_group.setter
    def node_resource_group(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "node_resource_group", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        AKS cluster region.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="subscriptionId")
    def subscription_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        ID of the Azure subscription.
        """
        return pulumi.get(self, "subscription_id")

    @subscription_id.setter
    def subscription_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "subscription_id", value)

    @_builtins.property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Azure AD tenant ID from the used subscription.
        """
        return pulumi.get(self, "tenant_id")

    @tenant_id.setter
    def tenant_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "tenant_id", value)


@pulumi.type_token("castai:azure:AksCluster")
class AksCluster(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 client_id: Optional[pulumi.Input[_builtins.str]] = None,
                 client_secret: Optional[pulumi.Input[_builtins.str]] = None,
                 delete_nodes_on_disconnect: Optional[pulumi.Input[_builtins.bool]] = None,
                 http_proxy_config: Optional[pulumi.Input[Union['_azure.AksClusterHttpProxyConfigArgs', '_azure.AksClusterHttpProxyConfigArgsDict']]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 node_resource_group: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 subscription_id: Optional[pulumi.Input[_builtins.str]] = None,
                 tenant_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Create a AksCluster resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] client_id: Azure AD application ID that is created and used by CAST AI.
        :param pulumi.Input[_builtins.str] client_secret: Azure AD application password that will be used by CAST AI.
        :param pulumi.Input[_builtins.bool] delete_nodes_on_disconnect: Should CAST AI remove nodes managed by CAST.AI on disconnect.
        :param pulumi.Input[Union['_azure.AksClusterHttpProxyConfigArgs', '_azure.AksClusterHttpProxyConfigArgsDict']] http_proxy_config: HTTP proxy configuration for CAST AI nodes and node components.
        :param pulumi.Input[_builtins.str] name: AKS cluster name.
        :param pulumi.Input[_builtins.str] node_resource_group: Azure resource group in which nodes are and will be created.
        :param pulumi.Input[_builtins.str] region: AKS cluster region.
        :param pulumi.Input[_builtins.str] subscription_id: ID of the Azure subscription.
        :param pulumi.Input[_builtins.str] tenant_id: Azure AD tenant ID from the used subscription.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: AksClusterArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a AksCluster resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param AksClusterArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(AksClusterArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 client_id: Optional[pulumi.Input[_builtins.str]] = None,
                 client_secret: Optional[pulumi.Input[_builtins.str]] = None,
                 delete_nodes_on_disconnect: Optional[pulumi.Input[_builtins.bool]] = None,
                 http_proxy_config: Optional[pulumi.Input[Union['_azure.AksClusterHttpProxyConfigArgs', '_azure.AksClusterHttpProxyConfigArgsDict']]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 node_resource_group: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 subscription_id: Optional[pulumi.Input[_builtins.str]] = None,
                 tenant_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = AksClusterArgs.__new__(AksClusterArgs)

            if client_id is None and not opts.urn:
                raise TypeError("Missing required property 'client_id'")
            __props__.__dict__["client_id"] = client_id
            if client_secret is None and not opts.urn:
                raise TypeError("Missing required property 'client_secret'")
            __props__.__dict__["client_secret"] = None if client_secret is None else pulumi.Output.secret(client_secret)
            __props__.__dict__["delete_nodes_on_disconnect"] = delete_nodes_on_disconnect
            __props__.__dict__["http_proxy_config"] = http_proxy_config
            __props__.__dict__["name"] = name
            if node_resource_group is None and not opts.urn:
                raise TypeError("Missing required property 'node_resource_group'")
            __props__.__dict__["node_resource_group"] = node_resource_group
            if region is None and not opts.urn:
                raise TypeError("Missing required property 'region'")
            __props__.__dict__["region"] = region
            if subscription_id is None and not opts.urn:
                raise TypeError("Missing required property 'subscription_id'")
            __props__.__dict__["subscription_id"] = subscription_id
            if tenant_id is None and not opts.urn:
                raise TypeError("Missing required property 'tenant_id'")
            __props__.__dict__["tenant_id"] = tenant_id
            __props__.__dict__["cluster_token"] = None
            __props__.__dict__["credentials_id"] = None
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["clientSecret", "clusterToken"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(AksCluster, __self__).__init__(
            'castai:azure:AksCluster',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            client_id: Optional[pulumi.Input[_builtins.str]] = None,
            client_secret: Optional[pulumi.Input[_builtins.str]] = None,
            cluster_token: Optional[pulumi.Input[_builtins.str]] = None,
            credentials_id: Optional[pulumi.Input[_builtins.str]] = None,
            delete_nodes_on_disconnect: Optional[pulumi.Input[_builtins.bool]] = None,
            http_proxy_config: Optional[pulumi.Input[Union['_azure.AksClusterHttpProxyConfigArgs', '_azure.AksClusterHttpProxyConfigArgsDict']]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            node_resource_group: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            subscription_id: Optional[pulumi.Input[_builtins.str]] = None,
            tenant_id: Optional[pulumi.Input[_builtins.str]] = None) -> 'AksCluster':
        """
        Get an existing AksCluster resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] client_id: Azure AD application ID that is created and used by CAST AI.
        :param pulumi.Input[_builtins.str] client_secret: Azure AD application password that will be used by CAST AI.
        :param pulumi.Input[_builtins.str] cluster_token: CAST AI cluster token.
        :param pulumi.Input[_builtins.str] credentials_id: CAST AI internal credentials ID
        :param pulumi.Input[_builtins.bool] delete_nodes_on_disconnect: Should CAST AI remove nodes managed by CAST.AI on disconnect.
        :param pulumi.Input[Union['_azure.AksClusterHttpProxyConfigArgs', '_azure.AksClusterHttpProxyConfigArgsDict']] http_proxy_config: HTTP proxy configuration for CAST AI nodes and node components.
        :param pulumi.Input[_builtins.str] name: AKS cluster name.
        :param pulumi.Input[_builtins.str] node_resource_group: Azure resource group in which nodes are and will be created.
        :param pulumi.Input[_builtins.str] region: AKS cluster region.
        :param pulumi.Input[_builtins.str] subscription_id: ID of the Azure subscription.
        :param pulumi.Input[_builtins.str] tenant_id: Azure AD tenant ID from the used subscription.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _AksClusterState.__new__(_AksClusterState)

        __props__.__dict__["client_id"] = client_id
        __props__.__dict__["client_secret"] = client_secret
        __props__.__dict__["cluster_token"] = cluster_token
        __props__.__dict__["credentials_id"] = credentials_id
        __props__.__dict__["delete_nodes_on_disconnect"] = delete_nodes_on_disconnect
        __props__.__dict__["http_proxy_config"] = http_proxy_config
        __props__.__dict__["name"] = name
        __props__.__dict__["node_resource_group"] = node_resource_group
        __props__.__dict__["region"] = region
        __props__.__dict__["subscription_id"] = subscription_id
        __props__.__dict__["tenant_id"] = tenant_id
        return AksCluster(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="clientId")
    def client_id(self) -> pulumi.Output[_builtins.str]:
        """
        Azure AD application ID that is created and used by CAST AI.
        """
        return pulumi.get(self, "client_id")

    @_builtins.property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> pulumi.Output[_builtins.str]:
        """
        Azure AD application password that will be used by CAST AI.
        """
        return pulumi.get(self, "client_secret")

    @_builtins.property
    @pulumi.getter(name="clusterToken")
    def cluster_token(self) -> pulumi.Output[_builtins.str]:
        """
        CAST AI cluster token.
        """
        return pulumi.get(self, "cluster_token")

    @_builtins.property
    @pulumi.getter(name="credentialsId")
    def credentials_id(self) -> pulumi.Output[_builtins.str]:
        """
        CAST AI internal credentials ID
        """
        return pulumi.get(self, "credentials_id")

    @_builtins.property
    @pulumi.getter(name="deleteNodesOnDisconnect")
    def delete_nodes_on_disconnect(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Should CAST AI remove nodes managed by CAST.AI on disconnect.
        """
        return pulumi.get(self, "delete_nodes_on_disconnect")

    @_builtins.property
    @pulumi.getter(name="httpProxyConfig")
    def http_proxy_config(self) -> pulumi.Output[Optional['_azure.outputs.AksClusterHttpProxyConfig']]:
        """
        HTTP proxy configuration for CAST AI nodes and node components.
        """
        return pulumi.get(self, "http_proxy_config")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        AKS cluster name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="nodeResourceGroup")
    def node_resource_group(self) -> pulumi.Output[_builtins.str]:
        """
        Azure resource group in which nodes are and will be created.
        """
        return pulumi.get(self, "node_resource_group")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        AKS cluster region.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="subscriptionId")
    def subscription_id(self) -> pulumi.Output[_builtins.str]:
        """
        ID of the Azure subscription.
        """
        return pulumi.get(self, "subscription_id")

    @_builtins.property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> pulumi.Output[_builtins.str]:
        """
        Azure AD tenant ID from the used subscription.
        """
        return pulumi.get(self, "tenant_id")

