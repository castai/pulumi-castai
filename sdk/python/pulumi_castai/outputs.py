# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'CommitmentsAzureReservation',
    'CommitmentsAzureReservationAssignment',
    'CommitmentsCommitmentConfig',
    'CommitmentsCommitmentConfigAssignment',
    'CommitmentsCommitmentConfigMatcher',
    'CommitmentsGcpCud',
    'CommitmentsGcpCudAssignment',
    'ReservationsReservation',
]

@pulumi.output_type
class CommitmentsAzureReservation(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "endTimestamp":
            suggest = "end_timestamp"
        elif key == "instanceType":
            suggest = "instance_type"
        elif key == "reservationId":
            suggest = "reservation_id"
        elif key == "reservationStatus":
            suggest = "reservation_status"
        elif key == "scopeResourceGroup":
            suggest = "scope_resource_group"
        elif key == "scopeSubscription":
            suggest = "scope_subscription"
        elif key == "startTimestamp":
            suggest = "start_timestamp"
        elif key == "allowedUsage":
            suggest = "allowed_usage"
        elif key == "scalingStrategy":
            suggest = "scaling_strategy"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CommitmentsAzureReservation. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CommitmentsAzureReservation.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CommitmentsAzureReservation.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 count: _builtins.int,
                 end_timestamp: _builtins.str,
                 instance_type: _builtins.str,
                 name: _builtins.str,
                 plan: _builtins.str,
                 region: _builtins.str,
                 reservation_id: _builtins.str,
                 reservation_status: _builtins.str,
                 scope: _builtins.str,
                 scope_resource_group: _builtins.str,
                 scope_subscription: _builtins.str,
                 start_timestamp: _builtins.str,
                 allowed_usage: Optional[_builtins.float] = None,
                 assignments: Optional[Sequence['outputs.CommitmentsAzureReservationAssignment']] = None,
                 id: Optional[_builtins.str] = None,
                 prioritization: Optional[_builtins.bool] = None,
                 scaling_strategy: Optional[_builtins.str] = None,
                 status: Optional[_builtins.str] = None):
        """
        :param _builtins.int count: Number of instances covered by the reservation.
        :param _builtins.str end_timestamp: End timestamp of the CUD.
        :param _builtins.str instance_type: Type of the instance covered by the reservation.
        :param _builtins.str name: Name of the CUD.
        :param _builtins.str plan: Plan of the reservation.
        :param _builtins.str region: Region in which the CUD is available.
        :param _builtins.str reservation_id: ID of the reservation in Azure.
        :param _builtins.str reservation_status: Status of the reservation in Azure.
        :param _builtins.str start_timestamp: Start timestamp of the CUD.
        :param _builtins.float allowed_usage: Allowed usage of the commitment. The value is between 0 (0%) and 1 (100%).
        :param Sequence['CommitmentsAzureReservationAssignmentArgs'] assignments: List of assigned clusters for the commitment. If prioritization is enabled, the order of the assignments indicates the priority. The first assignment has the highest priority.
        :param _builtins.str id: ID of the commitment in CAST AI.
        :param _builtins.bool prioritization: If enabled, it's possible to assign priorities to the assigned clusters.
        :param _builtins.str scaling_strategy: Scaling strategy of the commitment in CAST AI. One of: Default, CPUBased, RamBased
        :param _builtins.str status: Status of the commitment in CAST AI.
        """
        pulumi.set(__self__, "count", count)
        pulumi.set(__self__, "end_timestamp", end_timestamp)
        pulumi.set(__self__, "instance_type", instance_type)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "plan", plan)
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "reservation_id", reservation_id)
        pulumi.set(__self__, "reservation_status", reservation_status)
        pulumi.set(__self__, "scope", scope)
        pulumi.set(__self__, "scope_resource_group", scope_resource_group)
        pulumi.set(__self__, "scope_subscription", scope_subscription)
        pulumi.set(__self__, "start_timestamp", start_timestamp)
        if allowed_usage is not None:
            pulumi.set(__self__, "allowed_usage", allowed_usage)
        if assignments is not None:
            pulumi.set(__self__, "assignments", assignments)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if prioritization is not None:
            pulumi.set(__self__, "prioritization", prioritization)
        if scaling_strategy is not None:
            pulumi.set(__self__, "scaling_strategy", scaling_strategy)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @_builtins.property
    @pulumi.getter
    def count(self) -> _builtins.int:
        """
        Number of instances covered by the reservation.
        """
        return pulumi.get(self, "count")

    @_builtins.property
    @pulumi.getter(name="endTimestamp")
    def end_timestamp(self) -> _builtins.str:
        """
        End timestamp of the CUD.
        """
        return pulumi.get(self, "end_timestamp")

    @_builtins.property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> _builtins.str:
        """
        Type of the instance covered by the reservation.
        """
        return pulumi.get(self, "instance_type")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Name of the CUD.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def plan(self) -> _builtins.str:
        """
        Plan of the reservation.
        """
        return pulumi.get(self, "plan")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        """
        Region in which the CUD is available.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="reservationId")
    def reservation_id(self) -> _builtins.str:
        """
        ID of the reservation in Azure.
        """
        return pulumi.get(self, "reservation_id")

    @_builtins.property
    @pulumi.getter(name="reservationStatus")
    def reservation_status(self) -> _builtins.str:
        """
        Status of the reservation in Azure.
        """
        return pulumi.get(self, "reservation_status")

    @_builtins.property
    @pulumi.getter
    def scope(self) -> _builtins.str:
        return pulumi.get(self, "scope")

    @_builtins.property
    @pulumi.getter(name="scopeResourceGroup")
    def scope_resource_group(self) -> _builtins.str:
        return pulumi.get(self, "scope_resource_group")

    @_builtins.property
    @pulumi.getter(name="scopeSubscription")
    def scope_subscription(self) -> _builtins.str:
        return pulumi.get(self, "scope_subscription")

    @_builtins.property
    @pulumi.getter(name="startTimestamp")
    def start_timestamp(self) -> _builtins.str:
        """
        Start timestamp of the CUD.
        """
        return pulumi.get(self, "start_timestamp")

    @_builtins.property
    @pulumi.getter(name="allowedUsage")
    def allowed_usage(self) -> Optional[_builtins.float]:
        """
        Allowed usage of the commitment. The value is between 0 (0%) and 1 (100%).
        """
        return pulumi.get(self, "allowed_usage")

    @_builtins.property
    @pulumi.getter
    def assignments(self) -> Optional[Sequence['outputs.CommitmentsAzureReservationAssignment']]:
        """
        List of assigned clusters for the commitment. If prioritization is enabled, the order of the assignments indicates the priority. The first assignment has the highest priority.
        """
        return pulumi.get(self, "assignments")

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[_builtins.str]:
        """
        ID of the commitment in CAST AI.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def prioritization(self) -> Optional[_builtins.bool]:
        """
        If enabled, it's possible to assign priorities to the assigned clusters.
        """
        return pulumi.get(self, "prioritization")

    @_builtins.property
    @pulumi.getter(name="scalingStrategy")
    def scaling_strategy(self) -> Optional[_builtins.str]:
        """
        Scaling strategy of the commitment in CAST AI. One of: Default, CPUBased, RamBased
        """
        return pulumi.get(self, "scaling_strategy")

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[_builtins.str]:
        """
        Status of the commitment in CAST AI.
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class CommitmentsAzureReservationAssignment(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "clusterId":
            suggest = "cluster_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CommitmentsAzureReservationAssignment. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CommitmentsAzureReservationAssignment.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CommitmentsAzureReservationAssignment.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cluster_id: Optional[_builtins.str] = None,
                 priority: Optional[_builtins.int] = None):
        """
        :param _builtins.str cluster_id: ID of the cluster to assign the commitment to.
        :param _builtins.int priority: Priority of the assignment. The lower the value, the higher the priority. 1 is the highest priority.
        """
        if cluster_id is not None:
            pulumi.set(__self__, "cluster_id", cluster_id)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)

    @_builtins.property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> Optional[_builtins.str]:
        """
        ID of the cluster to assign the commitment to.
        """
        return pulumi.get(self, "cluster_id")

    @_builtins.property
    @pulumi.getter
    def priority(self) -> Optional[_builtins.int]:
        """
        Priority of the assignment. The lower the value, the higher the priority. 1 is the highest priority.
        """
        return pulumi.get(self, "priority")


@pulumi.output_type
class CommitmentsCommitmentConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allowedUsage":
            suggest = "allowed_usage"
        elif key == "scalingStrategy":
            suggest = "scaling_strategy"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CommitmentsCommitmentConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CommitmentsCommitmentConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CommitmentsCommitmentConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 matcher: 'outputs.CommitmentsCommitmentConfigMatcher',
                 allowed_usage: Optional[_builtins.float] = None,
                 assignments: Optional[Sequence['outputs.CommitmentsCommitmentConfigAssignment']] = None,
                 prioritization: Optional[_builtins.bool] = None,
                 scaling_strategy: Optional[_builtins.str] = None,
                 status: Optional[_builtins.str] = None):
        """
        :param 'CommitmentsCommitmentConfigMatcherArgs' matcher: Matcher used to map config to a commitment.
        :param _builtins.float allowed_usage: Allowed usage of the commitment. The value is between 0 (0%) and 1 (100%).
        :param Sequence['CommitmentsCommitmentConfigAssignmentArgs'] assignments: List of assigned clusters for the commitment. If prioritization is enabled, the order of the assignments indicates the priority. The first assignment has the highest priority.
        :param _builtins.bool prioritization: If enabled, it's possible to assign priorities to the assigned clusters.
        :param _builtins.str scaling_strategy: Scaling strategy of the commitment in CAST AI. One of: Default, CPUBased, RamBased
        :param _builtins.str status: Status of the commitment in CAST AI.
        """
        pulumi.set(__self__, "matcher", matcher)
        if allowed_usage is not None:
            pulumi.set(__self__, "allowed_usage", allowed_usage)
        if assignments is not None:
            pulumi.set(__self__, "assignments", assignments)
        if prioritization is not None:
            pulumi.set(__self__, "prioritization", prioritization)
        if scaling_strategy is not None:
            pulumi.set(__self__, "scaling_strategy", scaling_strategy)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @_builtins.property
    @pulumi.getter
    def matcher(self) -> 'outputs.CommitmentsCommitmentConfigMatcher':
        """
        Matcher used to map config to a commitment.
        """
        return pulumi.get(self, "matcher")

    @_builtins.property
    @pulumi.getter(name="allowedUsage")
    def allowed_usage(self) -> Optional[_builtins.float]:
        """
        Allowed usage of the commitment. The value is between 0 (0%) and 1 (100%).
        """
        return pulumi.get(self, "allowed_usage")

    @_builtins.property
    @pulumi.getter
    def assignments(self) -> Optional[Sequence['outputs.CommitmentsCommitmentConfigAssignment']]:
        """
        List of assigned clusters for the commitment. If prioritization is enabled, the order of the assignments indicates the priority. The first assignment has the highest priority.
        """
        return pulumi.get(self, "assignments")

    @_builtins.property
    @pulumi.getter
    def prioritization(self) -> Optional[_builtins.bool]:
        """
        If enabled, it's possible to assign priorities to the assigned clusters.
        """
        return pulumi.get(self, "prioritization")

    @_builtins.property
    @pulumi.getter(name="scalingStrategy")
    def scaling_strategy(self) -> Optional[_builtins.str]:
        """
        Scaling strategy of the commitment in CAST AI. One of: Default, CPUBased, RamBased
        """
        return pulumi.get(self, "scaling_strategy")

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[_builtins.str]:
        """
        Status of the commitment in CAST AI.
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class CommitmentsCommitmentConfigAssignment(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "clusterId":
            suggest = "cluster_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CommitmentsCommitmentConfigAssignment. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CommitmentsCommitmentConfigAssignment.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CommitmentsCommitmentConfigAssignment.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cluster_id: _builtins.str,
                 priority: Optional[_builtins.int] = None):
        """
        :param _builtins.str cluster_id: ID of the cluster to assign the commitment to.
        :param _builtins.int priority: Priority of the assignment. The lower the value, the higher the priority. 1 is the highest priority.
        """
        pulumi.set(__self__, "cluster_id", cluster_id)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)

    @_builtins.property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> _builtins.str:
        """
        ID of the cluster to assign the commitment to.
        """
        return pulumi.get(self, "cluster_id")

    @_builtins.property
    @pulumi.getter
    def priority(self) -> Optional[_builtins.int]:
        """
        Priority of the assignment. The lower the value, the higher the priority. 1 is the highest priority.
        """
        return pulumi.get(self, "priority")


@pulumi.output_type
class CommitmentsCommitmentConfigMatcher(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 region: _builtins.str,
                 type: Optional[_builtins.str] = None):
        """
        :param _builtins.str name: Name of the commitment to match.
        :param _builtins.str region: Region of the commitment to match.
        :param _builtins.str type: Type of the commitment to match. For compute resources, it's the type of the machine.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "region", region)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Name of the commitment to match.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        """
        Region of the commitment to match.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[_builtins.str]:
        """
        Type of the commitment to match. For compute resources, it's the type of the machine.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class CommitmentsGcpCud(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cudId":
            suggest = "cud_id"
        elif key == "cudStatus":
            suggest = "cud_status"
        elif key == "endTimestamp":
            suggest = "end_timestamp"
        elif key == "memoryMb":
            suggest = "memory_mb"
        elif key == "startTimestamp":
            suggest = "start_timestamp"
        elif key == "allowedUsage":
            suggest = "allowed_usage"
        elif key == "scalingStrategy":
            suggest = "scaling_strategy"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CommitmentsGcpCud. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CommitmentsGcpCud.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CommitmentsGcpCud.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cpu: _builtins.int,
                 cud_id: _builtins.str,
                 cud_status: _builtins.str,
                 end_timestamp: _builtins.str,
                 memory_mb: _builtins.int,
                 name: _builtins.str,
                 plan: _builtins.str,
                 region: _builtins.str,
                 start_timestamp: _builtins.str,
                 type: _builtins.str,
                 allowed_usage: Optional[_builtins.float] = None,
                 assignments: Optional[Sequence['outputs.CommitmentsGcpCudAssignment']] = None,
                 id: Optional[_builtins.str] = None,
                 prioritization: Optional[_builtins.bool] = None,
                 scaling_strategy: Optional[_builtins.str] = None,
                 status: Optional[_builtins.str] = None):
        """
        :param _builtins.int cpu: Number of CPUs covered by the CUD.
        :param _builtins.str cud_id: ID of the CUD in GCP.
        :param _builtins.str cud_status: Status of the CUD in GCP.
        :param _builtins.str end_timestamp: End timestamp of the CUD.
        :param _builtins.int memory_mb: Amount of memory in MB covered by the CUD.
        :param _builtins.str name: Name of the CUD.
        :param _builtins.str plan: CUD plan e.g. 'TWELVE_MONTH'.
        :param _builtins.str region: Region in which the CUD is available.
        :param _builtins.str start_timestamp: Start timestamp of the CUD.
        :param _builtins.str type: Type of the CUD, e.g. determines the covered resource type e.g. 'COMPUTE_OPTIMIZED_C2D'.
        :param _builtins.float allowed_usage: Allowed usage of the commitment. The value is between 0 (0%) and 1 (100%).
        :param Sequence['CommitmentsGcpCudAssignmentArgs'] assignments: List of assigned clusters for the commitment. If prioritization is enabled, the order of the assignments indicates the priority. The first assignment has the highest priority.
        :param _builtins.str id: ID of the commitment in CAST AI.
        :param _builtins.bool prioritization: If enabled, it's possible to assign priorities to the assigned clusters.
        :param _builtins.str scaling_strategy: Scaling strategy of the commitment in CAST AI. One of: Default, CPUBased, RamBased
        :param _builtins.str status: Status of the commitment in CAST AI.
        """
        pulumi.set(__self__, "cpu", cpu)
        pulumi.set(__self__, "cud_id", cud_id)
        pulumi.set(__self__, "cud_status", cud_status)
        pulumi.set(__self__, "end_timestamp", end_timestamp)
        pulumi.set(__self__, "memory_mb", memory_mb)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "plan", plan)
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "start_timestamp", start_timestamp)
        pulumi.set(__self__, "type", type)
        if allowed_usage is not None:
            pulumi.set(__self__, "allowed_usage", allowed_usage)
        if assignments is not None:
            pulumi.set(__self__, "assignments", assignments)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if prioritization is not None:
            pulumi.set(__self__, "prioritization", prioritization)
        if scaling_strategy is not None:
            pulumi.set(__self__, "scaling_strategy", scaling_strategy)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @_builtins.property
    @pulumi.getter
    def cpu(self) -> _builtins.int:
        """
        Number of CPUs covered by the CUD.
        """
        return pulumi.get(self, "cpu")

    @_builtins.property
    @pulumi.getter(name="cudId")
    def cud_id(self) -> _builtins.str:
        """
        ID of the CUD in GCP.
        """
        return pulumi.get(self, "cud_id")

    @_builtins.property
    @pulumi.getter(name="cudStatus")
    def cud_status(self) -> _builtins.str:
        """
        Status of the CUD in GCP.
        """
        return pulumi.get(self, "cud_status")

    @_builtins.property
    @pulumi.getter(name="endTimestamp")
    def end_timestamp(self) -> _builtins.str:
        """
        End timestamp of the CUD.
        """
        return pulumi.get(self, "end_timestamp")

    @_builtins.property
    @pulumi.getter(name="memoryMb")
    def memory_mb(self) -> _builtins.int:
        """
        Amount of memory in MB covered by the CUD.
        """
        return pulumi.get(self, "memory_mb")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Name of the CUD.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def plan(self) -> _builtins.str:
        """
        CUD plan e.g. 'TWELVE_MONTH'.
        """
        return pulumi.get(self, "plan")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        """
        Region in which the CUD is available.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="startTimestamp")
    def start_timestamp(self) -> _builtins.str:
        """
        Start timestamp of the CUD.
        """
        return pulumi.get(self, "start_timestamp")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Type of the CUD, e.g. determines the covered resource type e.g. 'COMPUTE_OPTIMIZED_C2D'.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="allowedUsage")
    def allowed_usage(self) -> Optional[_builtins.float]:
        """
        Allowed usage of the commitment. The value is between 0 (0%) and 1 (100%).
        """
        return pulumi.get(self, "allowed_usage")

    @_builtins.property
    @pulumi.getter
    def assignments(self) -> Optional[Sequence['outputs.CommitmentsGcpCudAssignment']]:
        """
        List of assigned clusters for the commitment. If prioritization is enabled, the order of the assignments indicates the priority. The first assignment has the highest priority.
        """
        return pulumi.get(self, "assignments")

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[_builtins.str]:
        """
        ID of the commitment in CAST AI.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def prioritization(self) -> Optional[_builtins.bool]:
        """
        If enabled, it's possible to assign priorities to the assigned clusters.
        """
        return pulumi.get(self, "prioritization")

    @_builtins.property
    @pulumi.getter(name="scalingStrategy")
    def scaling_strategy(self) -> Optional[_builtins.str]:
        """
        Scaling strategy of the commitment in CAST AI. One of: Default, CPUBased, RamBased
        """
        return pulumi.get(self, "scaling_strategy")

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[_builtins.str]:
        """
        Status of the commitment in CAST AI.
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class CommitmentsGcpCudAssignment(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "clusterId":
            suggest = "cluster_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CommitmentsGcpCudAssignment. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CommitmentsGcpCudAssignment.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CommitmentsGcpCudAssignment.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cluster_id: Optional[_builtins.str] = None,
                 priority: Optional[_builtins.int] = None):
        """
        :param _builtins.str cluster_id: ID of the cluster to assign the commitment to.
        :param _builtins.int priority: Priority of the assignment. The lower the value, the higher the priority. 1 is the highest priority.
        """
        if cluster_id is not None:
            pulumi.set(__self__, "cluster_id", cluster_id)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)

    @_builtins.property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> Optional[_builtins.str]:
        """
        ID of the cluster to assign the commitment to.
        """
        return pulumi.get(self, "cluster_id")

    @_builtins.property
    @pulumi.getter
    def priority(self) -> Optional[_builtins.int]:
        """
        Priority of the assignment. The lower the value, the higher the priority. 1 is the highest priority.
        """
        return pulumi.get(self, "priority")


@pulumi.output_type
class ReservationsReservation(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "instanceType":
            suggest = "instance_type"
        elif key == "startDate":
            suggest = "start_date"
        elif key == "endDate":
            suggest = "end_date"
        elif key == "zoneId":
            suggest = "zone_id"
        elif key == "zoneName":
            suggest = "zone_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ReservationsReservation. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ReservationsReservation.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ReservationsReservation.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 count: _builtins.str,
                 instance_type: _builtins.str,
                 name: _builtins.str,
                 price: _builtins.str,
                 provider: _builtins.str,
                 region: _builtins.str,
                 start_date: _builtins.str,
                 end_date: Optional[_builtins.str] = None,
                 zone_id: Optional[_builtins.str] = None,
                 zone_name: Optional[_builtins.str] = None):
        """
        :param _builtins.str count: amount of reserved instances
        :param _builtins.str instance_type: reserved instance type
        :param _builtins.str name: unique reservation name in region for specific instance type
        :param _builtins.str price: reservation price
        :param _builtins.str provider: reservation cloud provider (gcp, aws, azure)
        :param _builtins.str region: reservation region
        :param _builtins.str start_date: start date of reservation
        :param _builtins.str end_date: end date of reservation
        :param _builtins.str zone_id: reservation zone id
        :param _builtins.str zone_name: reservation zone name
        """
        pulumi.set(__self__, "count", count)
        pulumi.set(__self__, "instance_type", instance_type)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "price", price)
        pulumi.set(__self__, "provider", provider)
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "start_date", start_date)
        if end_date is not None:
            pulumi.set(__self__, "end_date", end_date)
        if zone_id is not None:
            pulumi.set(__self__, "zone_id", zone_id)
        if zone_name is not None:
            pulumi.set(__self__, "zone_name", zone_name)

    @_builtins.property
    @pulumi.getter
    def count(self) -> _builtins.str:
        """
        amount of reserved instances
        """
        return pulumi.get(self, "count")

    @_builtins.property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> _builtins.str:
        """
        reserved instance type
        """
        return pulumi.get(self, "instance_type")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        unique reservation name in region for specific instance type
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def price(self) -> _builtins.str:
        """
        reservation price
        """
        return pulumi.get(self, "price")

    @_builtins.property
    @pulumi.getter
    def provider(self) -> _builtins.str:
        """
        reservation cloud provider (gcp, aws, azure)
        """
        return pulumi.get(self, "provider")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        """
        reservation region
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="startDate")
    def start_date(self) -> _builtins.str:
        """
        start date of reservation
        """
        return pulumi.get(self, "start_date")

    @_builtins.property
    @pulumi.getter(name="endDate")
    def end_date(self) -> Optional[_builtins.str]:
        """
        end date of reservation
        """
        return pulumi.get(self, "end_date")

    @_builtins.property
    @pulumi.getter(name="zoneId")
    def zone_id(self) -> Optional[_builtins.str]:
        """
        reservation zone id
        """
        return pulumi.get(self, "zone_id")

    @_builtins.property
    @pulumi.getter(name="zoneName")
    def zone_name(self) -> Optional[_builtins.str]:
        """
        reservation zone name
        """
        return pulumi.get(self, "zone_name")


