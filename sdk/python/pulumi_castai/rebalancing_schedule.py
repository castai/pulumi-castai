# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import rebalancing as _rebalancing

__all__ = ['RebalancingScheduleArgs', 'RebalancingSchedule']

@pulumi.input_type
class RebalancingScheduleArgs:
    def __init__(__self__, *,
                 launch_configuration: pulumi.Input['_rebalancing.RebalancingScheduleLaunchConfigurationArgs'],
                 schedule: pulumi.Input['_rebalancing.RebalancingScheduleScheduleArgs'],
                 trigger_conditions: pulumi.Input['_rebalancing.RebalancingScheduleTriggerConditionsArgs'],
                 name: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a RebalancingSchedule resource.
        :param pulumi.Input[_builtins.str] name: Name of the schedule.
        """
        pulumi.set(__self__, "launch_configuration", launch_configuration)
        pulumi.set(__self__, "schedule", schedule)
        pulumi.set(__self__, "trigger_conditions", trigger_conditions)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @_builtins.property
    @pulumi.getter(name="launchConfiguration")
    def launch_configuration(self) -> pulumi.Input['_rebalancing.RebalancingScheduleLaunchConfigurationArgs']:
        return pulumi.get(self, "launch_configuration")

    @launch_configuration.setter
    def launch_configuration(self, value: pulumi.Input['_rebalancing.RebalancingScheduleLaunchConfigurationArgs']):
        pulumi.set(self, "launch_configuration", value)

    @_builtins.property
    @pulumi.getter
    def schedule(self) -> pulumi.Input['_rebalancing.RebalancingScheduleScheduleArgs']:
        return pulumi.get(self, "schedule")

    @schedule.setter
    def schedule(self, value: pulumi.Input['_rebalancing.RebalancingScheduleScheduleArgs']):
        pulumi.set(self, "schedule", value)

    @_builtins.property
    @pulumi.getter(name="triggerConditions")
    def trigger_conditions(self) -> pulumi.Input['_rebalancing.RebalancingScheduleTriggerConditionsArgs']:
        return pulumi.get(self, "trigger_conditions")

    @trigger_conditions.setter
    def trigger_conditions(self, value: pulumi.Input['_rebalancing.RebalancingScheduleTriggerConditionsArgs']):
        pulumi.set(self, "trigger_conditions", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Name of the schedule.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class _RebalancingScheduleState:
    def __init__(__self__, *,
                 launch_configuration: Optional[pulumi.Input['_rebalancing.RebalancingScheduleLaunchConfigurationArgs']] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 schedule: Optional[pulumi.Input['_rebalancing.RebalancingScheduleScheduleArgs']] = None,
                 trigger_conditions: Optional[pulumi.Input['_rebalancing.RebalancingScheduleTriggerConditionsArgs']] = None):
        """
        Input properties used for looking up and filtering RebalancingSchedule resources.
        :param pulumi.Input[_builtins.str] name: Name of the schedule.
        """
        if launch_configuration is not None:
            pulumi.set(__self__, "launch_configuration", launch_configuration)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if schedule is not None:
            pulumi.set(__self__, "schedule", schedule)
        if trigger_conditions is not None:
            pulumi.set(__self__, "trigger_conditions", trigger_conditions)

    @_builtins.property
    @pulumi.getter(name="launchConfiguration")
    def launch_configuration(self) -> Optional[pulumi.Input['_rebalancing.RebalancingScheduleLaunchConfigurationArgs']]:
        return pulumi.get(self, "launch_configuration")

    @launch_configuration.setter
    def launch_configuration(self, value: Optional[pulumi.Input['_rebalancing.RebalancingScheduleLaunchConfigurationArgs']]):
        pulumi.set(self, "launch_configuration", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Name of the schedule.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def schedule(self) -> Optional[pulumi.Input['_rebalancing.RebalancingScheduleScheduleArgs']]:
        return pulumi.get(self, "schedule")

    @schedule.setter
    def schedule(self, value: Optional[pulumi.Input['_rebalancing.RebalancingScheduleScheduleArgs']]):
        pulumi.set(self, "schedule", value)

    @_builtins.property
    @pulumi.getter(name="triggerConditions")
    def trigger_conditions(self) -> Optional[pulumi.Input['_rebalancing.RebalancingScheduleTriggerConditionsArgs']]:
        return pulumi.get(self, "trigger_conditions")

    @trigger_conditions.setter
    def trigger_conditions(self, value: Optional[pulumi.Input['_rebalancing.RebalancingScheduleTriggerConditionsArgs']]):
        pulumi.set(self, "trigger_conditions", value)


@pulumi.type_token("castai:rebalancing:RebalancingSchedule")
class RebalancingSchedule(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 launch_configuration: Optional[pulumi.Input[Union['_rebalancing.RebalancingScheduleLaunchConfigurationArgs', '_rebalancing.RebalancingScheduleLaunchConfigurationArgsDict']]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 schedule: Optional[pulumi.Input[Union['_rebalancing.RebalancingScheduleScheduleArgs', '_rebalancing.RebalancingScheduleScheduleArgsDict']]] = None,
                 trigger_conditions: Optional[pulumi.Input[Union['_rebalancing.RebalancingScheduleTriggerConditionsArgs', '_rebalancing.RebalancingScheduleTriggerConditionsArgsDict']]] = None,
                 __props__=None):
        """
        Create a RebalancingSchedule resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] name: Name of the schedule.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: RebalancingScheduleArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a RebalancingSchedule resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param RebalancingScheduleArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(RebalancingScheduleArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 launch_configuration: Optional[pulumi.Input[Union['_rebalancing.RebalancingScheduleLaunchConfigurationArgs', '_rebalancing.RebalancingScheduleLaunchConfigurationArgsDict']]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 schedule: Optional[pulumi.Input[Union['_rebalancing.RebalancingScheduleScheduleArgs', '_rebalancing.RebalancingScheduleScheduleArgsDict']]] = None,
                 trigger_conditions: Optional[pulumi.Input[Union['_rebalancing.RebalancingScheduleTriggerConditionsArgs', '_rebalancing.RebalancingScheduleTriggerConditionsArgsDict']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = RebalancingScheduleArgs.__new__(RebalancingScheduleArgs)

            if launch_configuration is None and not opts.urn:
                raise TypeError("Missing required property 'launch_configuration'")
            __props__.__dict__["launch_configuration"] = launch_configuration
            __props__.__dict__["name"] = name
            if schedule is None and not opts.urn:
                raise TypeError("Missing required property 'schedule'")
            __props__.__dict__["schedule"] = schedule
            if trigger_conditions is None and not opts.urn:
                raise TypeError("Missing required property 'trigger_conditions'")
            __props__.__dict__["trigger_conditions"] = trigger_conditions
        super(RebalancingSchedule, __self__).__init__(
            'castai:rebalancing:RebalancingSchedule',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            launch_configuration: Optional[pulumi.Input[Union['_rebalancing.RebalancingScheduleLaunchConfigurationArgs', '_rebalancing.RebalancingScheduleLaunchConfigurationArgsDict']]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            schedule: Optional[pulumi.Input[Union['_rebalancing.RebalancingScheduleScheduleArgs', '_rebalancing.RebalancingScheduleScheduleArgsDict']]] = None,
            trigger_conditions: Optional[pulumi.Input[Union['_rebalancing.RebalancingScheduleTriggerConditionsArgs', '_rebalancing.RebalancingScheduleTriggerConditionsArgsDict']]] = None) -> 'RebalancingSchedule':
        """
        Get an existing RebalancingSchedule resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] name: Name of the schedule.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _RebalancingScheduleState.__new__(_RebalancingScheduleState)

        __props__.__dict__["launch_configuration"] = launch_configuration
        __props__.__dict__["name"] = name
        __props__.__dict__["schedule"] = schedule
        __props__.__dict__["trigger_conditions"] = trigger_conditions
        return RebalancingSchedule(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="launchConfiguration")
    def launch_configuration(self) -> pulumi.Output['_rebalancing.outputs.RebalancingScheduleLaunchConfiguration']:
        return pulumi.get(self, "launch_configuration")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        Name of the schedule.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def schedule(self) -> pulumi.Output['_rebalancing.outputs.RebalancingScheduleSchedule']:
        return pulumi.get(self, "schedule")

    @_builtins.property
    @pulumi.getter(name="triggerConditions")
    def trigger_conditions(self) -> pulumi.Output['_rebalancing.outputs.RebalancingScheduleTriggerConditions']:
        return pulumi.get(self, "trigger_conditions")

