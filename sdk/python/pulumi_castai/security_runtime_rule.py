# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['SecurityRuntimeRuleArgs', 'SecurityRuntimeRule']

@pulumi.input_type
class SecurityRuntimeRuleArgs:
    def __init__(__self__, *,
                 rule_text: pulumi.Input[_builtins.str],
                 severity: pulumi.Input[_builtins.str],
                 category: Optional[pulumi.Input[_builtins.str]] = None,
                 enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_selector: Optional[pulumi.Input[_builtins.str]] = None,
                 rule_engine_type: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a SecurityRuntimeRule resource.
        :param pulumi.Input[_builtins.str] rule_text: CEL rule expression text.
        :param pulumi.Input[_builtins.str] severity: Severity of the rule. One of SEVERITY_CRITICAL, SEVERITY_HIGH, SEVERITY_MEDIUM, SEVERITY_LOW, SEVERITY_NONE.
        :param pulumi.Input[_builtins.str] category: Category of the rule.
        :param pulumi.Input[_builtins.bool] enabled: Whether the rule is enabled.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] labels: Key-value labels attached to the rule.
        :param pulumi.Input[_builtins.str] resource_selector: Optional CEL expression for resource selection.
        :param pulumi.Input[_builtins.str] rule_engine_type: The engine type used to evaluate the rule. Only RULE_ENGINE_TYPE_CEL is currently supported.
        """
        pulumi.set(__self__, "rule_text", rule_text)
        pulumi.set(__self__, "severity", severity)
        if category is not None:
            pulumi.set(__self__, "category", category)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if resource_selector is not None:
            pulumi.set(__self__, "resource_selector", resource_selector)
        if rule_engine_type is not None:
            pulumi.set(__self__, "rule_engine_type", rule_engine_type)

    @_builtins.property
    @pulumi.getter(name="ruleText")
    def rule_text(self) -> pulumi.Input[_builtins.str]:
        """
        CEL rule expression text.
        """
        return pulumi.get(self, "rule_text")

    @rule_text.setter
    def rule_text(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "rule_text", value)

    @_builtins.property
    @pulumi.getter
    def severity(self) -> pulumi.Input[_builtins.str]:
        """
        Severity of the rule. One of SEVERITY_CRITICAL, SEVERITY_HIGH, SEVERITY_MEDIUM, SEVERITY_LOW, SEVERITY_NONE.
        """
        return pulumi.get(self, "severity")

    @severity.setter
    def severity(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "severity", value)

    @_builtins.property
    @pulumi.getter
    def category(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Category of the rule.
        """
        return pulumi.get(self, "category")

    @category.setter
    def category(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "category", value)

    @_builtins.property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Whether the rule is enabled.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "enabled", value)

    @_builtins.property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        Key-value labels attached to the rule.
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "labels", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="resourceSelector")
    def resource_selector(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Optional CEL expression for resource selection.
        """
        return pulumi.get(self, "resource_selector")

    @resource_selector.setter
    def resource_selector(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_selector", value)

    @_builtins.property
    @pulumi.getter(name="ruleEngineType")
    def rule_engine_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The engine type used to evaluate the rule. Only RULE_ENGINE_TYPE_CEL is currently supported.
        """
        return pulumi.get(self, "rule_engine_type")

    @rule_engine_type.setter
    def rule_engine_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "rule_engine_type", value)


@pulumi.input_type
class _SecurityRuntimeRuleState:
    def __init__(__self__, *,
                 anomalies_count: Optional[pulumi.Input[_builtins.int]] = None,
                 category: Optional[pulumi.Input[_builtins.str]] = None,
                 enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 is_built_in: Optional[pulumi.Input[_builtins.bool]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_selector: Optional[pulumi.Input[_builtins.str]] = None,
                 rule_engine_type: Optional[pulumi.Input[_builtins.str]] = None,
                 rule_text: Optional[pulumi.Input[_builtins.str]] = None,
                 severity: Optional[pulumi.Input[_builtins.str]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 used_custom_lists: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None):
        """
        Input properties used for looking up and filtering SecurityRuntimeRule resources.
        :param pulumi.Input[_builtins.int] anomalies_count: Number of anomalies detected using this rule.
        :param pulumi.Input[_builtins.str] category: Category of the rule.
        :param pulumi.Input[_builtins.bool] enabled: Whether the rule is enabled.
        :param pulumi.Input[_builtins.bool] is_built_in: Indicates whether the rule is a built-in rule.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] labels: Key-value labels attached to the rule.
        :param pulumi.Input[_builtins.str] resource_selector: Optional CEL expression for resource selection.
        :param pulumi.Input[_builtins.str] rule_engine_type: The engine type used to evaluate the rule. Only RULE_ENGINE_TYPE_CEL is currently supported.
        :param pulumi.Input[_builtins.str] rule_text: CEL rule expression text.
        :param pulumi.Input[_builtins.str] severity: Severity of the rule. One of SEVERITY_CRITICAL, SEVERITY_HIGH, SEVERITY_MEDIUM, SEVERITY_LOW, SEVERITY_NONE.
        :param pulumi.Input[_builtins.str] type: Type of the rule (internal value).
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] used_custom_lists: Custom lists used in this rule, if any.
        """
        if anomalies_count is not None:
            pulumi.set(__self__, "anomalies_count", anomalies_count)
        if category is not None:
            pulumi.set(__self__, "category", category)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if is_built_in is not None:
            pulumi.set(__self__, "is_built_in", is_built_in)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if resource_selector is not None:
            pulumi.set(__self__, "resource_selector", resource_selector)
        if rule_engine_type is not None:
            pulumi.set(__self__, "rule_engine_type", rule_engine_type)
        if rule_text is not None:
            pulumi.set(__self__, "rule_text", rule_text)
        if severity is not None:
            pulumi.set(__self__, "severity", severity)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if used_custom_lists is not None:
            pulumi.set(__self__, "used_custom_lists", used_custom_lists)

    @_builtins.property
    @pulumi.getter(name="anomaliesCount")
    def anomalies_count(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Number of anomalies detected using this rule.
        """
        return pulumi.get(self, "anomalies_count")

    @anomalies_count.setter
    def anomalies_count(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "anomalies_count", value)

    @_builtins.property
    @pulumi.getter
    def category(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Category of the rule.
        """
        return pulumi.get(self, "category")

    @category.setter
    def category(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "category", value)

    @_builtins.property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Whether the rule is enabled.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "enabled", value)

    @_builtins.property
    @pulumi.getter(name="isBuiltIn")
    def is_built_in(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Indicates whether the rule is a built-in rule.
        """
        return pulumi.get(self, "is_built_in")

    @is_built_in.setter
    def is_built_in(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "is_built_in", value)

    @_builtins.property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        Key-value labels attached to the rule.
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "labels", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="resourceSelector")
    def resource_selector(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Optional CEL expression for resource selection.
        """
        return pulumi.get(self, "resource_selector")

    @resource_selector.setter
    def resource_selector(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_selector", value)

    @_builtins.property
    @pulumi.getter(name="ruleEngineType")
    def rule_engine_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The engine type used to evaluate the rule. Only RULE_ENGINE_TYPE_CEL is currently supported.
        """
        return pulumi.get(self, "rule_engine_type")

    @rule_engine_type.setter
    def rule_engine_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "rule_engine_type", value)

    @_builtins.property
    @pulumi.getter(name="ruleText")
    def rule_text(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        CEL rule expression text.
        """
        return pulumi.get(self, "rule_text")

    @rule_text.setter
    def rule_text(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "rule_text", value)

    @_builtins.property
    @pulumi.getter
    def severity(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Severity of the rule. One of SEVERITY_CRITICAL, SEVERITY_HIGH, SEVERITY_MEDIUM, SEVERITY_LOW, SEVERITY_NONE.
        """
        return pulumi.get(self, "severity")

    @severity.setter
    def severity(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "severity", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Type of the rule (internal value).
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter(name="usedCustomLists")
    def used_custom_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Custom lists used in this rule, if any.
        """
        return pulumi.get(self, "used_custom_lists")

    @used_custom_lists.setter
    def used_custom_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "used_custom_lists", value)


@pulumi.type_token("castai:index:SecurityRuntimeRule")
class SecurityRuntimeRule(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 category: Optional[pulumi.Input[_builtins.str]] = None,
                 enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_selector: Optional[pulumi.Input[_builtins.str]] = None,
                 rule_engine_type: Optional[pulumi.Input[_builtins.str]] = None,
                 rule_text: Optional[pulumi.Input[_builtins.str]] = None,
                 severity: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Create a SecurityRuntimeRule resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] category: Category of the rule.
        :param pulumi.Input[_builtins.bool] enabled: Whether the rule is enabled.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] labels: Key-value labels attached to the rule.
        :param pulumi.Input[_builtins.str] resource_selector: Optional CEL expression for resource selection.
        :param pulumi.Input[_builtins.str] rule_engine_type: The engine type used to evaluate the rule. Only RULE_ENGINE_TYPE_CEL is currently supported.
        :param pulumi.Input[_builtins.str] rule_text: CEL rule expression text.
        :param pulumi.Input[_builtins.str] severity: Severity of the rule. One of SEVERITY_CRITICAL, SEVERITY_HIGH, SEVERITY_MEDIUM, SEVERITY_LOW, SEVERITY_NONE.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: SecurityRuntimeRuleArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a SecurityRuntimeRule resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param SecurityRuntimeRuleArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(SecurityRuntimeRuleArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 category: Optional[pulumi.Input[_builtins.str]] = None,
                 enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_selector: Optional[pulumi.Input[_builtins.str]] = None,
                 rule_engine_type: Optional[pulumi.Input[_builtins.str]] = None,
                 rule_text: Optional[pulumi.Input[_builtins.str]] = None,
                 severity: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = SecurityRuntimeRuleArgs.__new__(SecurityRuntimeRuleArgs)

            __props__.__dict__["category"] = category
            __props__.__dict__["enabled"] = enabled
            __props__.__dict__["labels"] = labels
            __props__.__dict__["name"] = name
            __props__.__dict__["resource_selector"] = resource_selector
            __props__.__dict__["rule_engine_type"] = rule_engine_type
            if rule_text is None and not opts.urn:
                raise TypeError("Missing required property 'rule_text'")
            __props__.__dict__["rule_text"] = rule_text
            if severity is None and not opts.urn:
                raise TypeError("Missing required property 'severity'")
            __props__.__dict__["severity"] = severity
            __props__.__dict__["anomalies_count"] = None
            __props__.__dict__["is_built_in"] = None
            __props__.__dict__["type"] = None
            __props__.__dict__["used_custom_lists"] = None
        super(SecurityRuntimeRule, __self__).__init__(
            'castai:index:SecurityRuntimeRule',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            anomalies_count: Optional[pulumi.Input[_builtins.int]] = None,
            category: Optional[pulumi.Input[_builtins.str]] = None,
            enabled: Optional[pulumi.Input[_builtins.bool]] = None,
            is_built_in: Optional[pulumi.Input[_builtins.bool]] = None,
            labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            resource_selector: Optional[pulumi.Input[_builtins.str]] = None,
            rule_engine_type: Optional[pulumi.Input[_builtins.str]] = None,
            rule_text: Optional[pulumi.Input[_builtins.str]] = None,
            severity: Optional[pulumi.Input[_builtins.str]] = None,
            type: Optional[pulumi.Input[_builtins.str]] = None,
            used_custom_lists: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None) -> 'SecurityRuntimeRule':
        """
        Get an existing SecurityRuntimeRule resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.int] anomalies_count: Number of anomalies detected using this rule.
        :param pulumi.Input[_builtins.str] category: Category of the rule.
        :param pulumi.Input[_builtins.bool] enabled: Whether the rule is enabled.
        :param pulumi.Input[_builtins.bool] is_built_in: Indicates whether the rule is a built-in rule.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] labels: Key-value labels attached to the rule.
        :param pulumi.Input[_builtins.str] resource_selector: Optional CEL expression for resource selection.
        :param pulumi.Input[_builtins.str] rule_engine_type: The engine type used to evaluate the rule. Only RULE_ENGINE_TYPE_CEL is currently supported.
        :param pulumi.Input[_builtins.str] rule_text: CEL rule expression text.
        :param pulumi.Input[_builtins.str] severity: Severity of the rule. One of SEVERITY_CRITICAL, SEVERITY_HIGH, SEVERITY_MEDIUM, SEVERITY_LOW, SEVERITY_NONE.
        :param pulumi.Input[_builtins.str] type: Type of the rule (internal value).
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] used_custom_lists: Custom lists used in this rule, if any.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _SecurityRuntimeRuleState.__new__(_SecurityRuntimeRuleState)

        __props__.__dict__["anomalies_count"] = anomalies_count
        __props__.__dict__["category"] = category
        __props__.__dict__["enabled"] = enabled
        __props__.__dict__["is_built_in"] = is_built_in
        __props__.__dict__["labels"] = labels
        __props__.__dict__["name"] = name
        __props__.__dict__["resource_selector"] = resource_selector
        __props__.__dict__["rule_engine_type"] = rule_engine_type
        __props__.__dict__["rule_text"] = rule_text
        __props__.__dict__["severity"] = severity
        __props__.__dict__["type"] = type
        __props__.__dict__["used_custom_lists"] = used_custom_lists
        return SecurityRuntimeRule(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="anomaliesCount")
    def anomalies_count(self) -> pulumi.Output[_builtins.int]:
        """
        Number of anomalies detected using this rule.
        """
        return pulumi.get(self, "anomalies_count")

    @_builtins.property
    @pulumi.getter
    def category(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Category of the rule.
        """
        return pulumi.get(self, "category")

    @_builtins.property
    @pulumi.getter
    def enabled(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        Whether the rule is enabled.
        """
        return pulumi.get(self, "enabled")

    @_builtins.property
    @pulumi.getter(name="isBuiltIn")
    def is_built_in(self) -> pulumi.Output[_builtins.bool]:
        """
        Indicates whether the rule is a built-in rule.
        """
        return pulumi.get(self, "is_built_in")

    @_builtins.property
    @pulumi.getter
    def labels(self) -> pulumi.Output[Optional[Mapping[str, _builtins.str]]]:
        """
        Key-value labels attached to the rule.
        """
        return pulumi.get(self, "labels")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="resourceSelector")
    def resource_selector(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Optional CEL expression for resource selection.
        """
        return pulumi.get(self, "resource_selector")

    @_builtins.property
    @pulumi.getter(name="ruleEngineType")
    def rule_engine_type(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        The engine type used to evaluate the rule. Only RULE_ENGINE_TYPE_CEL is currently supported.
        """
        return pulumi.get(self, "rule_engine_type")

    @_builtins.property
    @pulumi.getter(name="ruleText")
    def rule_text(self) -> pulumi.Output[_builtins.str]:
        """
        CEL rule expression text.
        """
        return pulumi.get(self, "rule_text")

    @_builtins.property
    @pulumi.getter
    def severity(self) -> pulumi.Output[_builtins.str]:
        """
        Severity of the rule. One of SEVERITY_CRITICAL, SEVERITY_HIGH, SEVERITY_MEDIUM, SEVERITY_LOW, SEVERITY_NONE.
        """
        return pulumi.get(self, "severity")

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Output[_builtins.str]:
        """
        Type of the rule (internal value).
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="usedCustomLists")
    def used_custom_lists(self) -> pulumi.Output[Sequence[_builtins.str]]:
        """
        Custom lists used in this rule, if any.
        """
        return pulumi.get(self, "used_custom_lists")

