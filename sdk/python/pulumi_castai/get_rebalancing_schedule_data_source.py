# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import rebalancing as _rebalancing

__all__ = [
    'GetRebalancingScheduleDataSourceResult',
    'AwaitableGetRebalancingScheduleDataSourceResult',
    'get_rebalancing_schedule_data_source',
    'get_rebalancing_schedule_data_source_output',
]

@pulumi.output_type
class GetRebalancingScheduleDataSourceResult:
    """
    A collection of values returned by GetRebalancingScheduleDataSource.
    """
    def __init__(__self__, id=None, launch_configurations=None, name=None, schedules=None, trigger_conditions=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if launch_configurations and not isinstance(launch_configurations, list):
            raise TypeError("Expected argument 'launch_configurations' to be a list")
        pulumi.set(__self__, "launch_configurations", launch_configurations)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if schedules and not isinstance(schedules, list):
            raise TypeError("Expected argument 'schedules' to be a list")
        pulumi.set(__self__, "schedules", schedules)
        if trigger_conditions and not isinstance(trigger_conditions, list):
            raise TypeError("Expected argument 'trigger_conditions' to be a list")
        pulumi.set(__self__, "trigger_conditions", trigger_conditions)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="launchConfigurations")
    def launch_configurations(self) -> Sequence['_rebalancing.outputs.GetRebalancingScheduleDataSourceLaunchConfigurationResult']:
        return pulumi.get(self, "launch_configurations")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def schedules(self) -> Sequence['_rebalancing.outputs.GetRebalancingScheduleDataSourceScheduleResult']:
        return pulumi.get(self, "schedules")

    @_builtins.property
    @pulumi.getter(name="triggerConditions")
    def trigger_conditions(self) -> Sequence['_rebalancing.outputs.GetRebalancingScheduleDataSourceTriggerConditionResult']:
        return pulumi.get(self, "trigger_conditions")


class AwaitableGetRebalancingScheduleDataSourceResult(GetRebalancingScheduleDataSourceResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetRebalancingScheduleDataSourceResult(
            id=self.id,
            launch_configurations=self.launch_configurations,
            name=self.name,
            schedules=self.schedules,
            trigger_conditions=self.trigger_conditions)


def get_rebalancing_schedule_data_source(name: Optional[_builtins.str] = None,
                                         opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetRebalancingScheduleDataSourceResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['name'] = name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('castai:rebalancing:GetRebalancingScheduleDataSource', __args__, opts=opts, typ=GetRebalancingScheduleDataSourceResult).value

    return AwaitableGetRebalancingScheduleDataSourceResult(
        id=pulumi.get(__ret__, 'id'),
        launch_configurations=pulumi.get(__ret__, 'launch_configurations'),
        name=pulumi.get(__ret__, 'name'),
        schedules=pulumi.get(__ret__, 'schedules'),
        trigger_conditions=pulumi.get(__ret__, 'trigger_conditions'))
def get_rebalancing_schedule_data_source_output(name: Optional[pulumi.Input[_builtins.str]] = None,
                                                opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetRebalancingScheduleDataSourceResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['name'] = name
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('castai:rebalancing:GetRebalancingScheduleDataSource', __args__, opts=opts, typ=GetRebalancingScheduleDataSourceResult)
    return __ret__.apply(lambda __response__: GetRebalancingScheduleDataSourceResult(
        id=pulumi.get(__response__, 'id'),
        launch_configurations=pulumi.get(__response__, 'launch_configurations'),
        name=pulumi.get(__response__, 'name'),
        schedules=pulumi.get(__response__, 'schedules'),
        trigger_conditions=pulumi.get(__response__, 'trigger_conditions')))
