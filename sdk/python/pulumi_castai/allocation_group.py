# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['AllocationGroupArgs', 'AllocationGroup']

@pulumi.input_type
class AllocationGroupArgs:
    def __init__(__self__, *,
                 cluster_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 labels_operator: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 namespaces: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None):
        """
        The set of arguments for constructing a AllocationGroup resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] cluster_ids: List of CAST AI cluster ids
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] labels: Labels used to select workloads to track
        :param pulumi.Input[_builtins.str] labels_operator: Operator with which to connect the labels
               	OR (default) - workload needs to have at least one label to be included
               	AND - workload needs to have all the labels to be included
        :param pulumi.Input[_builtins.str] name: Allocation group name
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] namespaces: List of cluster namespaces to track
        """
        if cluster_ids is not None:
            pulumi.set(__self__, "cluster_ids", cluster_ids)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if labels_operator is not None:
            pulumi.set(__self__, "labels_operator", labels_operator)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespaces is not None:
            pulumi.set(__self__, "namespaces", namespaces)

    @_builtins.property
    @pulumi.getter(name="clusterIds")
    def cluster_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        List of CAST AI cluster ids
        """
        return pulumi.get(self, "cluster_ids")

    @cluster_ids.setter
    def cluster_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "cluster_ids", value)

    @_builtins.property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        Labels used to select workloads to track
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "labels", value)

    @_builtins.property
    @pulumi.getter(name="labelsOperator")
    def labels_operator(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Operator with which to connect the labels
        	OR (default) - workload needs to have at least one label to be included
        	AND - workload needs to have all the labels to be included
        """
        return pulumi.get(self, "labels_operator")

    @labels_operator.setter
    def labels_operator(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "labels_operator", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Allocation group name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def namespaces(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        List of cluster namespaces to track
        """
        return pulumi.get(self, "namespaces")

    @namespaces.setter
    def namespaces(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "namespaces", value)


@pulumi.input_type
class _AllocationGroupState:
    def __init__(__self__, *,
                 cluster_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 labels_operator: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 namespaces: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None):
        """
        Input properties used for looking up and filtering AllocationGroup resources.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] cluster_ids: List of CAST AI cluster ids
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] labels: Labels used to select workloads to track
        :param pulumi.Input[_builtins.str] labels_operator: Operator with which to connect the labels
               	OR (default) - workload needs to have at least one label to be included
               	AND - workload needs to have all the labels to be included
        :param pulumi.Input[_builtins.str] name: Allocation group name
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] namespaces: List of cluster namespaces to track
        """
        if cluster_ids is not None:
            pulumi.set(__self__, "cluster_ids", cluster_ids)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if labels_operator is not None:
            pulumi.set(__self__, "labels_operator", labels_operator)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespaces is not None:
            pulumi.set(__self__, "namespaces", namespaces)

    @_builtins.property
    @pulumi.getter(name="clusterIds")
    def cluster_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        List of CAST AI cluster ids
        """
        return pulumi.get(self, "cluster_ids")

    @cluster_ids.setter
    def cluster_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "cluster_ids", value)

    @_builtins.property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        Labels used to select workloads to track
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "labels", value)

    @_builtins.property
    @pulumi.getter(name="labelsOperator")
    def labels_operator(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Operator with which to connect the labels
        	OR (default) - workload needs to have at least one label to be included
        	AND - workload needs to have all the labels to be included
        """
        return pulumi.get(self, "labels_operator")

    @labels_operator.setter
    def labels_operator(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "labels_operator", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Allocation group name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def namespaces(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        List of cluster namespaces to track
        """
        return pulumi.get(self, "namespaces")

    @namespaces.setter
    def namespaces(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "namespaces", value)


@pulumi.type_token("castai:index:AllocationGroup")
class AllocationGroup(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cluster_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 labels_operator: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 namespaces: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 __props__=None):
        """
        Create a AllocationGroup resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] cluster_ids: List of CAST AI cluster ids
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] labels: Labels used to select workloads to track
        :param pulumi.Input[_builtins.str] labels_operator: Operator with which to connect the labels
               	OR (default) - workload needs to have at least one label to be included
               	AND - workload needs to have all the labels to be included
        :param pulumi.Input[_builtins.str] name: Allocation group name
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] namespaces: List of cluster namespaces to track
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[AllocationGroupArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a AllocationGroup resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param AllocationGroupArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(AllocationGroupArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cluster_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 labels_operator: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 namespaces: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = AllocationGroupArgs.__new__(AllocationGroupArgs)

            __props__.__dict__["cluster_ids"] = cluster_ids
            __props__.__dict__["labels"] = labels
            __props__.__dict__["labels_operator"] = labels_operator
            __props__.__dict__["name"] = name
            __props__.__dict__["namespaces"] = namespaces
        super(AllocationGroup, __self__).__init__(
            'castai:index:AllocationGroup',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            cluster_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
            labels_operator: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            namespaces: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None) -> 'AllocationGroup':
        """
        Get an existing AllocationGroup resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] cluster_ids: List of CAST AI cluster ids
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] labels: Labels used to select workloads to track
        :param pulumi.Input[_builtins.str] labels_operator: Operator with which to connect the labels
               	OR (default) - workload needs to have at least one label to be included
               	AND - workload needs to have all the labels to be included
        :param pulumi.Input[_builtins.str] name: Allocation group name
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] namespaces: List of cluster namespaces to track
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _AllocationGroupState.__new__(_AllocationGroupState)

        __props__.__dict__["cluster_ids"] = cluster_ids
        __props__.__dict__["labels"] = labels
        __props__.__dict__["labels_operator"] = labels_operator
        __props__.__dict__["name"] = name
        __props__.__dict__["namespaces"] = namespaces
        return AllocationGroup(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="clusterIds")
    def cluster_ids(self) -> pulumi.Output[Optional[Sequence[_builtins.str]]]:
        """
        List of CAST AI cluster ids
        """
        return pulumi.get(self, "cluster_ids")

    @_builtins.property
    @pulumi.getter
    def labels(self) -> pulumi.Output[Optional[Mapping[str, _builtins.str]]]:
        """
        Labels used to select workloads to track
        """
        return pulumi.get(self, "labels")

    @_builtins.property
    @pulumi.getter(name="labelsOperator")
    def labels_operator(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Operator with which to connect the labels
        	OR (default) - workload needs to have at least one label to be included
        	AND - workload needs to have all the labels to be included
        """
        return pulumi.get(self, "labels_operator")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        Allocation group name
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def namespaces(self) -> pulumi.Output[Optional[Sequence[_builtins.str]]]:
        """
        List of cluster namespaces to track
        """
        return pulumi.get(self, "namespaces")

