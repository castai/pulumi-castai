# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'EnterpriseRoleBindingScopesArgs',
    'EnterpriseRoleBindingScopesArgsDict',
    'EnterpriseRoleBindingScopesClusterArgs',
    'EnterpriseRoleBindingScopesClusterArgsDict',
    'EnterpriseRoleBindingScopesOrganizationArgs',
    'EnterpriseRoleBindingScopesOrganizationArgsDict',
    'EnterpriseRoleBindingSubjectsArgs',
    'EnterpriseRoleBindingSubjectsArgsDict',
    'EnterpriseRoleBindingSubjectsGroupArgs',
    'EnterpriseRoleBindingSubjectsGroupArgsDict',
    'EnterpriseRoleBindingSubjectsServiceAccountArgs',
    'EnterpriseRoleBindingSubjectsServiceAccountArgsDict',
    'EnterpriseRoleBindingSubjectsUserArgs',
    'EnterpriseRoleBindingSubjectsUserArgsDict',
    'RoleBindingsScopeArgs',
    'RoleBindingsScopeArgsDict',
    'RoleBindingsSubjectArgs',
    'RoleBindingsSubjectArgsDict',
    'RoleBindingsSubjectSubjectArgs',
    'RoleBindingsSubjectSubjectArgsDict',
]

MYPY = False

if not MYPY:
    class EnterpriseRoleBindingScopesArgsDict(TypedDict):
        clusters: NotRequired[pulumi.Input[Sequence[pulumi.Input['EnterpriseRoleBindingScopesClusterArgsDict']]]]
        """
        Cluster scopes.
        """
        organizations: NotRequired[pulumi.Input[Sequence[pulumi.Input['EnterpriseRoleBindingScopesOrganizationArgsDict']]]]
        """
        Organization scopes.
        """
elif False:
    EnterpriseRoleBindingScopesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class EnterpriseRoleBindingScopesArgs:
    def __init__(__self__, *,
                 clusters: Optional[pulumi.Input[Sequence[pulumi.Input['EnterpriseRoleBindingScopesClusterArgs']]]] = None,
                 organizations: Optional[pulumi.Input[Sequence[pulumi.Input['EnterpriseRoleBindingScopesOrganizationArgs']]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['EnterpriseRoleBindingScopesClusterArgs']]] clusters: Cluster scopes.
        :param pulumi.Input[Sequence[pulumi.Input['EnterpriseRoleBindingScopesOrganizationArgs']]] organizations: Organization scopes.
        """
        if clusters is not None:
            pulumi.set(__self__, "clusters", clusters)
        if organizations is not None:
            pulumi.set(__self__, "organizations", organizations)

    @_builtins.property
    @pulumi.getter
    def clusters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['EnterpriseRoleBindingScopesClusterArgs']]]]:
        """
        Cluster scopes.
        """
        return pulumi.get(self, "clusters")

    @clusters.setter
    def clusters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['EnterpriseRoleBindingScopesClusterArgs']]]]):
        pulumi.set(self, "clusters", value)

    @_builtins.property
    @pulumi.getter
    def organizations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['EnterpriseRoleBindingScopesOrganizationArgs']]]]:
        """
        Organization scopes.
        """
        return pulumi.get(self, "organizations")

    @organizations.setter
    def organizations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['EnterpriseRoleBindingScopesOrganizationArgs']]]]):
        pulumi.set(self, "organizations", value)


if not MYPY:
    class EnterpriseRoleBindingScopesClusterArgsDict(TypedDict):
        id: pulumi.Input[_builtins.str]
        """
        Cluster ID.
        """
elif False:
    EnterpriseRoleBindingScopesClusterArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class EnterpriseRoleBindingScopesClusterArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[_builtins.str]):
        """
        :param pulumi.Input[_builtins.str] id: Cluster ID.
        """
        pulumi.set(__self__, "id", id)

    @_builtins.property
    @pulumi.getter
    def id(self) -> pulumi.Input[_builtins.str]:
        """
        Cluster ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "id", value)


if not MYPY:
    class EnterpriseRoleBindingScopesOrganizationArgsDict(TypedDict):
        id: pulumi.Input[_builtins.str]
        """
        Organization ID.
        """
elif False:
    EnterpriseRoleBindingScopesOrganizationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class EnterpriseRoleBindingScopesOrganizationArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[_builtins.str]):
        """
        :param pulumi.Input[_builtins.str] id: Organization ID.
        """
        pulumi.set(__self__, "id", id)

    @_builtins.property
    @pulumi.getter
    def id(self) -> pulumi.Input[_builtins.str]:
        """
        Organization ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "id", value)


if not MYPY:
    class EnterpriseRoleBindingSubjectsArgsDict(TypedDict):
        groups: NotRequired[pulumi.Input[Sequence[pulumi.Input['EnterpriseRoleBindingSubjectsGroupArgsDict']]]]
        """
        Group subjects.
        """
        service_accounts: NotRequired[pulumi.Input[Sequence[pulumi.Input['EnterpriseRoleBindingSubjectsServiceAccountArgsDict']]]]
        """
        Service account subjects.
        """
        users: NotRequired[pulumi.Input[Sequence[pulumi.Input['EnterpriseRoleBindingSubjectsUserArgsDict']]]]
        """
        User subjects.
        """
elif False:
    EnterpriseRoleBindingSubjectsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class EnterpriseRoleBindingSubjectsArgs:
    def __init__(__self__, *,
                 groups: Optional[pulumi.Input[Sequence[pulumi.Input['EnterpriseRoleBindingSubjectsGroupArgs']]]] = None,
                 service_accounts: Optional[pulumi.Input[Sequence[pulumi.Input['EnterpriseRoleBindingSubjectsServiceAccountArgs']]]] = None,
                 users: Optional[pulumi.Input[Sequence[pulumi.Input['EnterpriseRoleBindingSubjectsUserArgs']]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['EnterpriseRoleBindingSubjectsGroupArgs']]] groups: Group subjects.
        :param pulumi.Input[Sequence[pulumi.Input['EnterpriseRoleBindingSubjectsServiceAccountArgs']]] service_accounts: Service account subjects.
        :param pulumi.Input[Sequence[pulumi.Input['EnterpriseRoleBindingSubjectsUserArgs']]] users: User subjects.
        """
        if groups is not None:
            pulumi.set(__self__, "groups", groups)
        if service_accounts is not None:
            pulumi.set(__self__, "service_accounts", service_accounts)
        if users is not None:
            pulumi.set(__self__, "users", users)

    @_builtins.property
    @pulumi.getter
    def groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['EnterpriseRoleBindingSubjectsGroupArgs']]]]:
        """
        Group subjects.
        """
        return pulumi.get(self, "groups")

    @groups.setter
    def groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['EnterpriseRoleBindingSubjectsGroupArgs']]]]):
        pulumi.set(self, "groups", value)

    @_builtins.property
    @pulumi.getter(name="serviceAccounts")
    def service_accounts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['EnterpriseRoleBindingSubjectsServiceAccountArgs']]]]:
        """
        Service account subjects.
        """
        return pulumi.get(self, "service_accounts")

    @service_accounts.setter
    def service_accounts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['EnterpriseRoleBindingSubjectsServiceAccountArgs']]]]):
        pulumi.set(self, "service_accounts", value)

    @_builtins.property
    @pulumi.getter
    def users(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['EnterpriseRoleBindingSubjectsUserArgs']]]]:
        """
        User subjects.
        """
        return pulumi.get(self, "users")

    @users.setter
    def users(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['EnterpriseRoleBindingSubjectsUserArgs']]]]):
        pulumi.set(self, "users", value)


if not MYPY:
    class EnterpriseRoleBindingSubjectsGroupArgsDict(TypedDict):
        id: pulumi.Input[_builtins.str]
        """
        Group ID.
        """
elif False:
    EnterpriseRoleBindingSubjectsGroupArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class EnterpriseRoleBindingSubjectsGroupArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[_builtins.str]):
        """
        :param pulumi.Input[_builtins.str] id: Group ID.
        """
        pulumi.set(__self__, "id", id)

    @_builtins.property
    @pulumi.getter
    def id(self) -> pulumi.Input[_builtins.str]:
        """
        Group ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "id", value)


if not MYPY:
    class EnterpriseRoleBindingSubjectsServiceAccountArgsDict(TypedDict):
        id: pulumi.Input[_builtins.str]
        """
        Service account ID.
        """
elif False:
    EnterpriseRoleBindingSubjectsServiceAccountArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class EnterpriseRoleBindingSubjectsServiceAccountArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[_builtins.str]):
        """
        :param pulumi.Input[_builtins.str] id: Service account ID.
        """
        pulumi.set(__self__, "id", id)

    @_builtins.property
    @pulumi.getter
    def id(self) -> pulumi.Input[_builtins.str]:
        """
        Service account ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "id", value)


if not MYPY:
    class EnterpriseRoleBindingSubjectsUserArgsDict(TypedDict):
        id: pulumi.Input[_builtins.str]
        """
        User ID.
        """
elif False:
    EnterpriseRoleBindingSubjectsUserArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class EnterpriseRoleBindingSubjectsUserArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[_builtins.str]):
        """
        :param pulumi.Input[_builtins.str] id: User ID.
        """
        pulumi.set(__self__, "id", id)

    @_builtins.property
    @pulumi.getter
    def id(self) -> pulumi.Input[_builtins.str]:
        """
        User ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "id", value)


if not MYPY:
    class RoleBindingsScopeArgsDict(TypedDict):
        kind: pulumi.Input[_builtins.str]
        """
        Scope of the role binding Supported values include: organization, cluster.
        """
        resource_id: pulumi.Input[_builtins.str]
        """
        ID of the scope resource.
        """
elif False:
    RoleBindingsScopeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class RoleBindingsScopeArgs:
    def __init__(__self__, *,
                 kind: pulumi.Input[_builtins.str],
                 resource_id: pulumi.Input[_builtins.str]):
        """
        :param pulumi.Input[_builtins.str] kind: Scope of the role binding Supported values include: organization, cluster.
        :param pulumi.Input[_builtins.str] resource_id: ID of the scope resource.
        """
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "resource_id", resource_id)

    @_builtins.property
    @pulumi.getter
    def kind(self) -> pulumi.Input[_builtins.str]:
        """
        Scope of the role binding Supported values include: organization, cluster.
        """
        return pulumi.get(self, "kind")

    @kind.setter
    def kind(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "kind", value)

    @_builtins.property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> pulumi.Input[_builtins.str]:
        """
        ID of the scope resource.
        """
        return pulumi.get(self, "resource_id")

    @resource_id.setter
    def resource_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "resource_id", value)


if not MYPY:
    class RoleBindingsSubjectArgsDict(TypedDict):
        subjects: NotRequired[pulumi.Input[Sequence[pulumi.Input['RoleBindingsSubjectSubjectArgsDict']]]]
elif False:
    RoleBindingsSubjectArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class RoleBindingsSubjectArgs:
    def __init__(__self__, *,
                 subjects: Optional[pulumi.Input[Sequence[pulumi.Input['RoleBindingsSubjectSubjectArgs']]]] = None):
        if subjects is not None:
            pulumi.set(__self__, "subjects", subjects)

    @_builtins.property
    @pulumi.getter
    def subjects(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RoleBindingsSubjectSubjectArgs']]]]:
        return pulumi.get(self, "subjects")

    @subjects.setter
    def subjects(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RoleBindingsSubjectSubjectArgs']]]]):
        pulumi.set(self, "subjects", value)


if not MYPY:
    class RoleBindingsSubjectSubjectArgsDict(TypedDict):
        kind: pulumi.Input[_builtins.str]
        """
        Kind of the subject. Supported values include: user, service_account, group.
        """
        group_id: NotRequired[pulumi.Input[_builtins.str]]
        """
        Optional, required only if `kind` is `group`.
        """
        service_account_id: NotRequired[pulumi.Input[_builtins.str]]
        """
        Optional, required only if `kind` is `service_account`.
        """
        user_id: NotRequired[pulumi.Input[_builtins.str]]
        """
        Optional, required only if `kind` is `user`.
        """
elif False:
    RoleBindingsSubjectSubjectArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class RoleBindingsSubjectSubjectArgs:
    def __init__(__self__, *,
                 kind: pulumi.Input[_builtins.str],
                 group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 service_account_id: Optional[pulumi.Input[_builtins.str]] = None,
                 user_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] kind: Kind of the subject. Supported values include: user, service_account, group.
        :param pulumi.Input[_builtins.str] group_id: Optional, required only if `kind` is `group`.
        :param pulumi.Input[_builtins.str] service_account_id: Optional, required only if `kind` is `service_account`.
        :param pulumi.Input[_builtins.str] user_id: Optional, required only if `kind` is `user`.
        """
        pulumi.set(__self__, "kind", kind)
        if group_id is not None:
            pulumi.set(__self__, "group_id", group_id)
        if service_account_id is not None:
            pulumi.set(__self__, "service_account_id", service_account_id)
        if user_id is not None:
            pulumi.set(__self__, "user_id", user_id)

    @_builtins.property
    @pulumi.getter
    def kind(self) -> pulumi.Input[_builtins.str]:
        """
        Kind of the subject. Supported values include: user, service_account, group.
        """
        return pulumi.get(self, "kind")

    @kind.setter
    def kind(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "kind", value)

    @_builtins.property
    @pulumi.getter(name="groupId")
    def group_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Optional, required only if `kind` is `group`.
        """
        return pulumi.get(self, "group_id")

    @group_id.setter
    def group_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "group_id", value)

    @_builtins.property
    @pulumi.getter(name="serviceAccountId")
    def service_account_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Optional, required only if `kind` is `service_account`.
        """
        return pulumi.get(self, "service_account_id")

    @service_account_id.setter
    def service_account_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "service_account_id", value)

    @_builtins.property
    @pulumi.getter(name="userId")
    def user_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Optional, required only if `kind` is `user`.
        """
        return pulumi.get(self, "user_id")

    @user_id.setter
    def user_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "user_id", value)


