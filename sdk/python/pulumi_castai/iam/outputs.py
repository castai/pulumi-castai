# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'EnterpriseRoleBindingScopes',
    'EnterpriseRoleBindingScopesCluster',
    'EnterpriseRoleBindingScopesOrganization',
    'EnterpriseRoleBindingSubjects',
    'EnterpriseRoleBindingSubjectsGroup',
    'EnterpriseRoleBindingSubjectsServiceAccount',
    'EnterpriseRoleBindingSubjectsUser',
    'RoleBindingsScope',
    'RoleBindingsSubject',
    'RoleBindingsSubjectSubject',
]

@pulumi.output_type
class EnterpriseRoleBindingScopes(dict):
    def __init__(__self__, *,
                 clusters: Optional[Sequence['outputs.EnterpriseRoleBindingScopesCluster']] = None,
                 organizations: Optional[Sequence['outputs.EnterpriseRoleBindingScopesOrganization']] = None):
        """
        :param Sequence['EnterpriseRoleBindingScopesClusterArgs'] clusters: Cluster scopes.
        :param Sequence['EnterpriseRoleBindingScopesOrganizationArgs'] organizations: Organization scopes.
        """
        if clusters is not None:
            pulumi.set(__self__, "clusters", clusters)
        if organizations is not None:
            pulumi.set(__self__, "organizations", organizations)

    @_builtins.property
    @pulumi.getter
    def clusters(self) -> Optional[Sequence['outputs.EnterpriseRoleBindingScopesCluster']]:
        """
        Cluster scopes.
        """
        return pulumi.get(self, "clusters")

    @_builtins.property
    @pulumi.getter
    def organizations(self) -> Optional[Sequence['outputs.EnterpriseRoleBindingScopesOrganization']]:
        """
        Organization scopes.
        """
        return pulumi.get(self, "organizations")


@pulumi.output_type
class EnterpriseRoleBindingScopesCluster(dict):
    def __init__(__self__, *,
                 id: _builtins.str):
        """
        :param _builtins.str id: Cluster ID.
        """
        pulumi.set(__self__, "id", id)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        Cluster ID.
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class EnterpriseRoleBindingScopesOrganization(dict):
    def __init__(__self__, *,
                 id: _builtins.str):
        """
        :param _builtins.str id: Organization ID.
        """
        pulumi.set(__self__, "id", id)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        Organization ID.
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class EnterpriseRoleBindingSubjects(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "serviceAccounts":
            suggest = "service_accounts"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EnterpriseRoleBindingSubjects. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EnterpriseRoleBindingSubjects.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EnterpriseRoleBindingSubjects.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 groups: Optional[Sequence['outputs.EnterpriseRoleBindingSubjectsGroup']] = None,
                 service_accounts: Optional[Sequence['outputs.EnterpriseRoleBindingSubjectsServiceAccount']] = None,
                 users: Optional[Sequence['outputs.EnterpriseRoleBindingSubjectsUser']] = None):
        """
        :param Sequence['EnterpriseRoleBindingSubjectsGroupArgs'] groups: Group subjects.
        :param Sequence['EnterpriseRoleBindingSubjectsServiceAccountArgs'] service_accounts: Service account subjects.
        :param Sequence['EnterpriseRoleBindingSubjectsUserArgs'] users: User subjects.
        """
        if groups is not None:
            pulumi.set(__self__, "groups", groups)
        if service_accounts is not None:
            pulumi.set(__self__, "service_accounts", service_accounts)
        if users is not None:
            pulumi.set(__self__, "users", users)

    @_builtins.property
    @pulumi.getter
    def groups(self) -> Optional[Sequence['outputs.EnterpriseRoleBindingSubjectsGroup']]:
        """
        Group subjects.
        """
        return pulumi.get(self, "groups")

    @_builtins.property
    @pulumi.getter(name="serviceAccounts")
    def service_accounts(self) -> Optional[Sequence['outputs.EnterpriseRoleBindingSubjectsServiceAccount']]:
        """
        Service account subjects.
        """
        return pulumi.get(self, "service_accounts")

    @_builtins.property
    @pulumi.getter
    def users(self) -> Optional[Sequence['outputs.EnterpriseRoleBindingSubjectsUser']]:
        """
        User subjects.
        """
        return pulumi.get(self, "users")


@pulumi.output_type
class EnterpriseRoleBindingSubjectsGroup(dict):
    def __init__(__self__, *,
                 id: _builtins.str):
        """
        :param _builtins.str id: Group ID.
        """
        pulumi.set(__self__, "id", id)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        Group ID.
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class EnterpriseRoleBindingSubjectsServiceAccount(dict):
    def __init__(__self__, *,
                 id: _builtins.str):
        """
        :param _builtins.str id: Service account ID.
        """
        pulumi.set(__self__, "id", id)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        Service account ID.
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class EnterpriseRoleBindingSubjectsUser(dict):
    def __init__(__self__, *,
                 id: _builtins.str):
        """
        :param _builtins.str id: User ID.
        """
        pulumi.set(__self__, "id", id)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        User ID.
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class RoleBindingsScope(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "resourceId":
            suggest = "resource_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RoleBindingsScope. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RoleBindingsScope.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RoleBindingsScope.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 kind: _builtins.str,
                 resource_id: _builtins.str):
        """
        :param _builtins.str kind: Scope of the role binding Supported values include: organization, cluster.
        :param _builtins.str resource_id: ID of the scope resource.
        """
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "resource_id", resource_id)

    @_builtins.property
    @pulumi.getter
    def kind(self) -> _builtins.str:
        """
        Scope of the role binding Supported values include: organization, cluster.
        """
        return pulumi.get(self, "kind")

    @_builtins.property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> _builtins.str:
        """
        ID of the scope resource.
        """
        return pulumi.get(self, "resource_id")


@pulumi.output_type
class RoleBindingsSubject(dict):
    def __init__(__self__, *,
                 subjects: Optional[Sequence['outputs.RoleBindingsSubjectSubject']] = None):
        if subjects is not None:
            pulumi.set(__self__, "subjects", subjects)

    @_builtins.property
    @pulumi.getter
    def subjects(self) -> Optional[Sequence['outputs.RoleBindingsSubjectSubject']]:
        return pulumi.get(self, "subjects")


@pulumi.output_type
class RoleBindingsSubjectSubject(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "groupId":
            suggest = "group_id"
        elif key == "serviceAccountId":
            suggest = "service_account_id"
        elif key == "userId":
            suggest = "user_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RoleBindingsSubjectSubject. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RoleBindingsSubjectSubject.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RoleBindingsSubjectSubject.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 kind: _builtins.str,
                 group_id: Optional[_builtins.str] = None,
                 service_account_id: Optional[_builtins.str] = None,
                 user_id: Optional[_builtins.str] = None):
        """
        :param _builtins.str kind: Kind of the subject. Supported values include: user, service_account, group.
        :param _builtins.str group_id: Optional, required only if `kind` is `group`.
        :param _builtins.str service_account_id: Optional, required only if `kind` is `service_account`.
        :param _builtins.str user_id: Optional, required only if `kind` is `user`.
        """
        pulumi.set(__self__, "kind", kind)
        if group_id is not None:
            pulumi.set(__self__, "group_id", group_id)
        if service_account_id is not None:
            pulumi.set(__self__, "service_account_id", service_account_id)
        if user_id is not None:
            pulumi.set(__self__, "user_id", user_id)

    @_builtins.property
    @pulumi.getter
    def kind(self) -> _builtins.str:
        """
        Kind of the subject. Supported values include: user, service_account, group.
        """
        return pulumi.get(self, "kind")

    @_builtins.property
    @pulumi.getter(name="groupId")
    def group_id(self) -> Optional[_builtins.str]:
        """
        Optional, required only if `kind` is `group`.
        """
        return pulumi.get(self, "group_id")

    @_builtins.property
    @pulumi.getter(name="serviceAccountId")
    def service_account_id(self) -> Optional[_builtins.str]:
        """
        Optional, required only if `kind` is `service_account`.
        """
        return pulumi.get(self, "service_account_id")

    @_builtins.property
    @pulumi.getter(name="userId")
    def user_id(self) -> Optional[_builtins.str]:
        """
        Optional, required only if `kind` is `user`.
        """
        return pulumi.get(self, "user_id")


