# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import workload as _workload

__all__ = ['WorkloadScalingPolicyArgs', 'WorkloadScalingPolicy']

@pulumi.input_type
class WorkloadScalingPolicyArgs:
    def __init__(__self__, *,
                 apply_type: pulumi.Input[_builtins.str],
                 cluster_id: pulumi.Input[_builtins.str],
                 cpu: pulumi.Input['_workload.WorkloadScalingPolicyCpuArgs'],
                 management_option: pulumi.Input[_builtins.str],
                 memory: pulumi.Input['_workload.WorkloadScalingPolicyMemoryArgs'],
                 anti_affinity: Optional[pulumi.Input['_workload.WorkloadScalingPolicyAntiAffinityArgs']] = None,
                 assignment_rules: Optional[pulumi.Input[Sequence[pulumi.Input['_workload.WorkloadScalingPolicyAssignmentRuleArgs']]]] = None,
                 confidence: Optional[pulumi.Input['_workload.WorkloadScalingPolicyConfidenceArgs']] = None,
                 downscaling: Optional[pulumi.Input['_workload.WorkloadScalingPolicyDownscalingArgs']] = None,
                 memory_event: Optional[pulumi.Input['_workload.WorkloadScalingPolicyMemoryEventArgs']] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 predictive_scaling: Optional[pulumi.Input['_workload.WorkloadScalingPolicyPredictiveScalingArgs']] = None,
                 rollout_behavior: Optional[pulumi.Input['_workload.WorkloadScalingPolicyRolloutBehaviorArgs']] = None,
                 startup: Optional[pulumi.Input['_workload.WorkloadScalingPolicyStartupArgs']] = None):
        """
        The set of arguments for constructing a WorkloadScalingPolicy resource.
        :param pulumi.Input[_builtins.str] apply_type: Recommendation apply type.
               	- IMMEDIATE - pods are restarted immediately when new recommendation is generated.
               	- DEFERRED - pods are not restarted and recommendation values are applied during natural restarts only (new deployment, etc.)
        :param pulumi.Input[_builtins.str] cluster_id: CAST AI cluster id
        :param pulumi.Input[_builtins.str] management_option: Defines possible options for workload management.
               	- READ_ONLY - workload watched (metrics collected), but no actions performed by CAST AI.
               	- MANAGED - workload watched (metrics collected), CAST AI may perform actions on the workload.
        :param pulumi.Input[Sequence[pulumi.Input['_workload.WorkloadScalingPolicyAssignmentRuleArgs']]] assignment_rules: Allows defining conditions for automatically assigning workloads to this scaling policy.
        :param pulumi.Input['_workload.WorkloadScalingPolicyConfidenceArgs'] confidence: Defines the confidence settings for applying recommendations.
        :param pulumi.Input[_builtins.str] name: Scaling policy name
        :param pulumi.Input['_workload.WorkloadScalingPolicyRolloutBehaviorArgs'] rollout_behavior: Defines the rollout behavior used when applying recommendations. Prerequisites:
               	- Applicable to Deployment resources that support running as multi-replica.
               	- Deployment is running with single replica (replica count = 1).
               	- Deployment's rollout strategy allows for downtime.
               	- Recommendation apply type is "immediate".
               	- Cluster has workload-autoscaler component version v0.35.3 or higher.
        """
        pulumi.set(__self__, "apply_type", apply_type)
        pulumi.set(__self__, "cluster_id", cluster_id)
        pulumi.set(__self__, "cpu", cpu)
        pulumi.set(__self__, "management_option", management_option)
        pulumi.set(__self__, "memory", memory)
        if anti_affinity is not None:
            pulumi.set(__self__, "anti_affinity", anti_affinity)
        if assignment_rules is not None:
            pulumi.set(__self__, "assignment_rules", assignment_rules)
        if confidence is not None:
            pulumi.set(__self__, "confidence", confidence)
        if downscaling is not None:
            pulumi.set(__self__, "downscaling", downscaling)
        if memory_event is not None:
            pulumi.set(__self__, "memory_event", memory_event)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if predictive_scaling is not None:
            pulumi.set(__self__, "predictive_scaling", predictive_scaling)
        if rollout_behavior is not None:
            pulumi.set(__self__, "rollout_behavior", rollout_behavior)
        if startup is not None:
            pulumi.set(__self__, "startup", startup)

    @_builtins.property
    @pulumi.getter(name="applyType")
    def apply_type(self) -> pulumi.Input[_builtins.str]:
        """
        Recommendation apply type.
        	- IMMEDIATE - pods are restarted immediately when new recommendation is generated.
        	- DEFERRED - pods are not restarted and recommendation values are applied during natural restarts only (new deployment, etc.)
        """
        return pulumi.get(self, "apply_type")

    @apply_type.setter
    def apply_type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "apply_type", value)

    @_builtins.property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> pulumi.Input[_builtins.str]:
        """
        CAST AI cluster id
        """
        return pulumi.get(self, "cluster_id")

    @cluster_id.setter
    def cluster_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "cluster_id", value)

    @_builtins.property
    @pulumi.getter
    def cpu(self) -> pulumi.Input['_workload.WorkloadScalingPolicyCpuArgs']:
        return pulumi.get(self, "cpu")

    @cpu.setter
    def cpu(self, value: pulumi.Input['_workload.WorkloadScalingPolicyCpuArgs']):
        pulumi.set(self, "cpu", value)

    @_builtins.property
    @pulumi.getter(name="managementOption")
    def management_option(self) -> pulumi.Input[_builtins.str]:
        """
        Defines possible options for workload management.
        	- READ_ONLY - workload watched (metrics collected), but no actions performed by CAST AI.
        	- MANAGED - workload watched (metrics collected), CAST AI may perform actions on the workload.
        """
        return pulumi.get(self, "management_option")

    @management_option.setter
    def management_option(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "management_option", value)

    @_builtins.property
    @pulumi.getter
    def memory(self) -> pulumi.Input['_workload.WorkloadScalingPolicyMemoryArgs']:
        return pulumi.get(self, "memory")

    @memory.setter
    def memory(self, value: pulumi.Input['_workload.WorkloadScalingPolicyMemoryArgs']):
        pulumi.set(self, "memory", value)

    @_builtins.property
    @pulumi.getter(name="antiAffinity")
    def anti_affinity(self) -> Optional[pulumi.Input['_workload.WorkloadScalingPolicyAntiAffinityArgs']]:
        return pulumi.get(self, "anti_affinity")

    @anti_affinity.setter
    def anti_affinity(self, value: Optional[pulumi.Input['_workload.WorkloadScalingPolicyAntiAffinityArgs']]):
        pulumi.set(self, "anti_affinity", value)

    @_builtins.property
    @pulumi.getter(name="assignmentRules")
    def assignment_rules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['_workload.WorkloadScalingPolicyAssignmentRuleArgs']]]]:
        """
        Allows defining conditions for automatically assigning workloads to this scaling policy.
        """
        return pulumi.get(self, "assignment_rules")

    @assignment_rules.setter
    def assignment_rules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['_workload.WorkloadScalingPolicyAssignmentRuleArgs']]]]):
        pulumi.set(self, "assignment_rules", value)

    @_builtins.property
    @pulumi.getter
    def confidence(self) -> Optional[pulumi.Input['_workload.WorkloadScalingPolicyConfidenceArgs']]:
        """
        Defines the confidence settings for applying recommendations.
        """
        return pulumi.get(self, "confidence")

    @confidence.setter
    def confidence(self, value: Optional[pulumi.Input['_workload.WorkloadScalingPolicyConfidenceArgs']]):
        pulumi.set(self, "confidence", value)

    @_builtins.property
    @pulumi.getter
    def downscaling(self) -> Optional[pulumi.Input['_workload.WorkloadScalingPolicyDownscalingArgs']]:
        return pulumi.get(self, "downscaling")

    @downscaling.setter
    def downscaling(self, value: Optional[pulumi.Input['_workload.WorkloadScalingPolicyDownscalingArgs']]):
        pulumi.set(self, "downscaling", value)

    @_builtins.property
    @pulumi.getter(name="memoryEvent")
    def memory_event(self) -> Optional[pulumi.Input['_workload.WorkloadScalingPolicyMemoryEventArgs']]:
        return pulumi.get(self, "memory_event")

    @memory_event.setter
    def memory_event(self, value: Optional[pulumi.Input['_workload.WorkloadScalingPolicyMemoryEventArgs']]):
        pulumi.set(self, "memory_event", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Scaling policy name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="predictiveScaling")
    def predictive_scaling(self) -> Optional[pulumi.Input['_workload.WorkloadScalingPolicyPredictiveScalingArgs']]:
        return pulumi.get(self, "predictive_scaling")

    @predictive_scaling.setter
    def predictive_scaling(self, value: Optional[pulumi.Input['_workload.WorkloadScalingPolicyPredictiveScalingArgs']]):
        pulumi.set(self, "predictive_scaling", value)

    @_builtins.property
    @pulumi.getter(name="rolloutBehavior")
    def rollout_behavior(self) -> Optional[pulumi.Input['_workload.WorkloadScalingPolicyRolloutBehaviorArgs']]:
        """
        Defines the rollout behavior used when applying recommendations. Prerequisites:
        	- Applicable to Deployment resources that support running as multi-replica.
        	- Deployment is running with single replica (replica count = 1).
        	- Deployment's rollout strategy allows for downtime.
        	- Recommendation apply type is "immediate".
        	- Cluster has workload-autoscaler component version v0.35.3 or higher.
        """
        return pulumi.get(self, "rollout_behavior")

    @rollout_behavior.setter
    def rollout_behavior(self, value: Optional[pulumi.Input['_workload.WorkloadScalingPolicyRolloutBehaviorArgs']]):
        pulumi.set(self, "rollout_behavior", value)

    @_builtins.property
    @pulumi.getter
    def startup(self) -> Optional[pulumi.Input['_workload.WorkloadScalingPolicyStartupArgs']]:
        return pulumi.get(self, "startup")

    @startup.setter
    def startup(self, value: Optional[pulumi.Input['_workload.WorkloadScalingPolicyStartupArgs']]):
        pulumi.set(self, "startup", value)


@pulumi.input_type
class _WorkloadScalingPolicyState:
    def __init__(__self__, *,
                 anti_affinity: Optional[pulumi.Input['_workload.WorkloadScalingPolicyAntiAffinityArgs']] = None,
                 apply_type: Optional[pulumi.Input[_builtins.str]] = None,
                 assignment_rules: Optional[pulumi.Input[Sequence[pulumi.Input['_workload.WorkloadScalingPolicyAssignmentRuleArgs']]]] = None,
                 cluster_id: Optional[pulumi.Input[_builtins.str]] = None,
                 confidence: Optional[pulumi.Input['_workload.WorkloadScalingPolicyConfidenceArgs']] = None,
                 cpu: Optional[pulumi.Input['_workload.WorkloadScalingPolicyCpuArgs']] = None,
                 downscaling: Optional[pulumi.Input['_workload.WorkloadScalingPolicyDownscalingArgs']] = None,
                 management_option: Optional[pulumi.Input[_builtins.str]] = None,
                 memory: Optional[pulumi.Input['_workload.WorkloadScalingPolicyMemoryArgs']] = None,
                 memory_event: Optional[pulumi.Input['_workload.WorkloadScalingPolicyMemoryEventArgs']] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 predictive_scaling: Optional[pulumi.Input['_workload.WorkloadScalingPolicyPredictiveScalingArgs']] = None,
                 rollout_behavior: Optional[pulumi.Input['_workload.WorkloadScalingPolicyRolloutBehaviorArgs']] = None,
                 startup: Optional[pulumi.Input['_workload.WorkloadScalingPolicyStartupArgs']] = None):
        """
        Input properties used for looking up and filtering WorkloadScalingPolicy resources.
        :param pulumi.Input[_builtins.str] apply_type: Recommendation apply type.
               	- IMMEDIATE - pods are restarted immediately when new recommendation is generated.
               	- DEFERRED - pods are not restarted and recommendation values are applied during natural restarts only (new deployment, etc.)
        :param pulumi.Input[Sequence[pulumi.Input['_workload.WorkloadScalingPolicyAssignmentRuleArgs']]] assignment_rules: Allows defining conditions for automatically assigning workloads to this scaling policy.
        :param pulumi.Input[_builtins.str] cluster_id: CAST AI cluster id
        :param pulumi.Input['_workload.WorkloadScalingPolicyConfidenceArgs'] confidence: Defines the confidence settings for applying recommendations.
        :param pulumi.Input[_builtins.str] management_option: Defines possible options for workload management.
               	- READ_ONLY - workload watched (metrics collected), but no actions performed by CAST AI.
               	- MANAGED - workload watched (metrics collected), CAST AI may perform actions on the workload.
        :param pulumi.Input[_builtins.str] name: Scaling policy name
        :param pulumi.Input['_workload.WorkloadScalingPolicyRolloutBehaviorArgs'] rollout_behavior: Defines the rollout behavior used when applying recommendations. Prerequisites:
               	- Applicable to Deployment resources that support running as multi-replica.
               	- Deployment is running with single replica (replica count = 1).
               	- Deployment's rollout strategy allows for downtime.
               	- Recommendation apply type is "immediate".
               	- Cluster has workload-autoscaler component version v0.35.3 or higher.
        """
        if anti_affinity is not None:
            pulumi.set(__self__, "anti_affinity", anti_affinity)
        if apply_type is not None:
            pulumi.set(__self__, "apply_type", apply_type)
        if assignment_rules is not None:
            pulumi.set(__self__, "assignment_rules", assignment_rules)
        if cluster_id is not None:
            pulumi.set(__self__, "cluster_id", cluster_id)
        if confidence is not None:
            pulumi.set(__self__, "confidence", confidence)
        if cpu is not None:
            pulumi.set(__self__, "cpu", cpu)
        if downscaling is not None:
            pulumi.set(__self__, "downscaling", downscaling)
        if management_option is not None:
            pulumi.set(__self__, "management_option", management_option)
        if memory is not None:
            pulumi.set(__self__, "memory", memory)
        if memory_event is not None:
            pulumi.set(__self__, "memory_event", memory_event)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if predictive_scaling is not None:
            pulumi.set(__self__, "predictive_scaling", predictive_scaling)
        if rollout_behavior is not None:
            pulumi.set(__self__, "rollout_behavior", rollout_behavior)
        if startup is not None:
            pulumi.set(__self__, "startup", startup)

    @_builtins.property
    @pulumi.getter(name="antiAffinity")
    def anti_affinity(self) -> Optional[pulumi.Input['_workload.WorkloadScalingPolicyAntiAffinityArgs']]:
        return pulumi.get(self, "anti_affinity")

    @anti_affinity.setter
    def anti_affinity(self, value: Optional[pulumi.Input['_workload.WorkloadScalingPolicyAntiAffinityArgs']]):
        pulumi.set(self, "anti_affinity", value)

    @_builtins.property
    @pulumi.getter(name="applyType")
    def apply_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Recommendation apply type.
        	- IMMEDIATE - pods are restarted immediately when new recommendation is generated.
        	- DEFERRED - pods are not restarted and recommendation values are applied during natural restarts only (new deployment, etc.)
        """
        return pulumi.get(self, "apply_type")

    @apply_type.setter
    def apply_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "apply_type", value)

    @_builtins.property
    @pulumi.getter(name="assignmentRules")
    def assignment_rules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['_workload.WorkloadScalingPolicyAssignmentRuleArgs']]]]:
        """
        Allows defining conditions for automatically assigning workloads to this scaling policy.
        """
        return pulumi.get(self, "assignment_rules")

    @assignment_rules.setter
    def assignment_rules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['_workload.WorkloadScalingPolicyAssignmentRuleArgs']]]]):
        pulumi.set(self, "assignment_rules", value)

    @_builtins.property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        CAST AI cluster id
        """
        return pulumi.get(self, "cluster_id")

    @cluster_id.setter
    def cluster_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cluster_id", value)

    @_builtins.property
    @pulumi.getter
    def confidence(self) -> Optional[pulumi.Input['_workload.WorkloadScalingPolicyConfidenceArgs']]:
        """
        Defines the confidence settings for applying recommendations.
        """
        return pulumi.get(self, "confidence")

    @confidence.setter
    def confidence(self, value: Optional[pulumi.Input['_workload.WorkloadScalingPolicyConfidenceArgs']]):
        pulumi.set(self, "confidence", value)

    @_builtins.property
    @pulumi.getter
    def cpu(self) -> Optional[pulumi.Input['_workload.WorkloadScalingPolicyCpuArgs']]:
        return pulumi.get(self, "cpu")

    @cpu.setter
    def cpu(self, value: Optional[pulumi.Input['_workload.WorkloadScalingPolicyCpuArgs']]):
        pulumi.set(self, "cpu", value)

    @_builtins.property
    @pulumi.getter
    def downscaling(self) -> Optional[pulumi.Input['_workload.WorkloadScalingPolicyDownscalingArgs']]:
        return pulumi.get(self, "downscaling")

    @downscaling.setter
    def downscaling(self, value: Optional[pulumi.Input['_workload.WorkloadScalingPolicyDownscalingArgs']]):
        pulumi.set(self, "downscaling", value)

    @_builtins.property
    @pulumi.getter(name="managementOption")
    def management_option(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Defines possible options for workload management.
        	- READ_ONLY - workload watched (metrics collected), but no actions performed by CAST AI.
        	- MANAGED - workload watched (metrics collected), CAST AI may perform actions on the workload.
        """
        return pulumi.get(self, "management_option")

    @management_option.setter
    def management_option(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "management_option", value)

    @_builtins.property
    @pulumi.getter
    def memory(self) -> Optional[pulumi.Input['_workload.WorkloadScalingPolicyMemoryArgs']]:
        return pulumi.get(self, "memory")

    @memory.setter
    def memory(self, value: Optional[pulumi.Input['_workload.WorkloadScalingPolicyMemoryArgs']]):
        pulumi.set(self, "memory", value)

    @_builtins.property
    @pulumi.getter(name="memoryEvent")
    def memory_event(self) -> Optional[pulumi.Input['_workload.WorkloadScalingPolicyMemoryEventArgs']]:
        return pulumi.get(self, "memory_event")

    @memory_event.setter
    def memory_event(self, value: Optional[pulumi.Input['_workload.WorkloadScalingPolicyMemoryEventArgs']]):
        pulumi.set(self, "memory_event", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Scaling policy name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="predictiveScaling")
    def predictive_scaling(self) -> Optional[pulumi.Input['_workload.WorkloadScalingPolicyPredictiveScalingArgs']]:
        return pulumi.get(self, "predictive_scaling")

    @predictive_scaling.setter
    def predictive_scaling(self, value: Optional[pulumi.Input['_workload.WorkloadScalingPolicyPredictiveScalingArgs']]):
        pulumi.set(self, "predictive_scaling", value)

    @_builtins.property
    @pulumi.getter(name="rolloutBehavior")
    def rollout_behavior(self) -> Optional[pulumi.Input['_workload.WorkloadScalingPolicyRolloutBehaviorArgs']]:
        """
        Defines the rollout behavior used when applying recommendations. Prerequisites:
        	- Applicable to Deployment resources that support running as multi-replica.
        	- Deployment is running with single replica (replica count = 1).
        	- Deployment's rollout strategy allows for downtime.
        	- Recommendation apply type is "immediate".
        	- Cluster has workload-autoscaler component version v0.35.3 or higher.
        """
        return pulumi.get(self, "rollout_behavior")

    @rollout_behavior.setter
    def rollout_behavior(self, value: Optional[pulumi.Input['_workload.WorkloadScalingPolicyRolloutBehaviorArgs']]):
        pulumi.set(self, "rollout_behavior", value)

    @_builtins.property
    @pulumi.getter
    def startup(self) -> Optional[pulumi.Input['_workload.WorkloadScalingPolicyStartupArgs']]:
        return pulumi.get(self, "startup")

    @startup.setter
    def startup(self, value: Optional[pulumi.Input['_workload.WorkloadScalingPolicyStartupArgs']]):
        pulumi.set(self, "startup", value)


@pulumi.type_token("castai:workload:WorkloadScalingPolicy")
class WorkloadScalingPolicy(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 anti_affinity: Optional[pulumi.Input[Union['_workload.WorkloadScalingPolicyAntiAffinityArgs', '_workload.WorkloadScalingPolicyAntiAffinityArgsDict']]] = None,
                 apply_type: Optional[pulumi.Input[_builtins.str]] = None,
                 assignment_rules: Optional[pulumi.Input[Sequence[pulumi.Input[Union['_workload.WorkloadScalingPolicyAssignmentRuleArgs', '_workload.WorkloadScalingPolicyAssignmentRuleArgsDict']]]]] = None,
                 cluster_id: Optional[pulumi.Input[_builtins.str]] = None,
                 confidence: Optional[pulumi.Input[Union['_workload.WorkloadScalingPolicyConfidenceArgs', '_workload.WorkloadScalingPolicyConfidenceArgsDict']]] = None,
                 cpu: Optional[pulumi.Input[Union['_workload.WorkloadScalingPolicyCpuArgs', '_workload.WorkloadScalingPolicyCpuArgsDict']]] = None,
                 downscaling: Optional[pulumi.Input[Union['_workload.WorkloadScalingPolicyDownscalingArgs', '_workload.WorkloadScalingPolicyDownscalingArgsDict']]] = None,
                 management_option: Optional[pulumi.Input[_builtins.str]] = None,
                 memory: Optional[pulumi.Input[Union['_workload.WorkloadScalingPolicyMemoryArgs', '_workload.WorkloadScalingPolicyMemoryArgsDict']]] = None,
                 memory_event: Optional[pulumi.Input[Union['_workload.WorkloadScalingPolicyMemoryEventArgs', '_workload.WorkloadScalingPolicyMemoryEventArgsDict']]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 predictive_scaling: Optional[pulumi.Input[Union['_workload.WorkloadScalingPolicyPredictiveScalingArgs', '_workload.WorkloadScalingPolicyPredictiveScalingArgsDict']]] = None,
                 rollout_behavior: Optional[pulumi.Input[Union['_workload.WorkloadScalingPolicyRolloutBehaviorArgs', '_workload.WorkloadScalingPolicyRolloutBehaviorArgsDict']]] = None,
                 startup: Optional[pulumi.Input[Union['_workload.WorkloadScalingPolicyStartupArgs', '_workload.WorkloadScalingPolicyStartupArgsDict']]] = None,
                 __props__=None):
        """
        Create a WorkloadScalingPolicy resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] apply_type: Recommendation apply type.
               	- IMMEDIATE - pods are restarted immediately when new recommendation is generated.
               	- DEFERRED - pods are not restarted and recommendation values are applied during natural restarts only (new deployment, etc.)
        :param pulumi.Input[Sequence[pulumi.Input[Union['_workload.WorkloadScalingPolicyAssignmentRuleArgs', '_workload.WorkloadScalingPolicyAssignmentRuleArgsDict']]]] assignment_rules: Allows defining conditions for automatically assigning workloads to this scaling policy.
        :param pulumi.Input[_builtins.str] cluster_id: CAST AI cluster id
        :param pulumi.Input[Union['_workload.WorkloadScalingPolicyConfidenceArgs', '_workload.WorkloadScalingPolicyConfidenceArgsDict']] confidence: Defines the confidence settings for applying recommendations.
        :param pulumi.Input[_builtins.str] management_option: Defines possible options for workload management.
               	- READ_ONLY - workload watched (metrics collected), but no actions performed by CAST AI.
               	- MANAGED - workload watched (metrics collected), CAST AI may perform actions on the workload.
        :param pulumi.Input[_builtins.str] name: Scaling policy name
        :param pulumi.Input[Union['_workload.WorkloadScalingPolicyRolloutBehaviorArgs', '_workload.WorkloadScalingPolicyRolloutBehaviorArgsDict']] rollout_behavior: Defines the rollout behavior used when applying recommendations. Prerequisites:
               	- Applicable to Deployment resources that support running as multi-replica.
               	- Deployment is running with single replica (replica count = 1).
               	- Deployment's rollout strategy allows for downtime.
               	- Recommendation apply type is "immediate".
               	- Cluster has workload-autoscaler component version v0.35.3 or higher.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: WorkloadScalingPolicyArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a WorkloadScalingPolicy resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param WorkloadScalingPolicyArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(WorkloadScalingPolicyArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 anti_affinity: Optional[pulumi.Input[Union['_workload.WorkloadScalingPolicyAntiAffinityArgs', '_workload.WorkloadScalingPolicyAntiAffinityArgsDict']]] = None,
                 apply_type: Optional[pulumi.Input[_builtins.str]] = None,
                 assignment_rules: Optional[pulumi.Input[Sequence[pulumi.Input[Union['_workload.WorkloadScalingPolicyAssignmentRuleArgs', '_workload.WorkloadScalingPolicyAssignmentRuleArgsDict']]]]] = None,
                 cluster_id: Optional[pulumi.Input[_builtins.str]] = None,
                 confidence: Optional[pulumi.Input[Union['_workload.WorkloadScalingPolicyConfidenceArgs', '_workload.WorkloadScalingPolicyConfidenceArgsDict']]] = None,
                 cpu: Optional[pulumi.Input[Union['_workload.WorkloadScalingPolicyCpuArgs', '_workload.WorkloadScalingPolicyCpuArgsDict']]] = None,
                 downscaling: Optional[pulumi.Input[Union['_workload.WorkloadScalingPolicyDownscalingArgs', '_workload.WorkloadScalingPolicyDownscalingArgsDict']]] = None,
                 management_option: Optional[pulumi.Input[_builtins.str]] = None,
                 memory: Optional[pulumi.Input[Union['_workload.WorkloadScalingPolicyMemoryArgs', '_workload.WorkloadScalingPolicyMemoryArgsDict']]] = None,
                 memory_event: Optional[pulumi.Input[Union['_workload.WorkloadScalingPolicyMemoryEventArgs', '_workload.WorkloadScalingPolicyMemoryEventArgsDict']]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 predictive_scaling: Optional[pulumi.Input[Union['_workload.WorkloadScalingPolicyPredictiveScalingArgs', '_workload.WorkloadScalingPolicyPredictiveScalingArgsDict']]] = None,
                 rollout_behavior: Optional[pulumi.Input[Union['_workload.WorkloadScalingPolicyRolloutBehaviorArgs', '_workload.WorkloadScalingPolicyRolloutBehaviorArgsDict']]] = None,
                 startup: Optional[pulumi.Input[Union['_workload.WorkloadScalingPolicyStartupArgs', '_workload.WorkloadScalingPolicyStartupArgsDict']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = WorkloadScalingPolicyArgs.__new__(WorkloadScalingPolicyArgs)

            __props__.__dict__["anti_affinity"] = anti_affinity
            if apply_type is None and not opts.urn:
                raise TypeError("Missing required property 'apply_type'")
            __props__.__dict__["apply_type"] = apply_type
            __props__.__dict__["assignment_rules"] = assignment_rules
            if cluster_id is None and not opts.urn:
                raise TypeError("Missing required property 'cluster_id'")
            __props__.__dict__["cluster_id"] = cluster_id
            __props__.__dict__["confidence"] = confidence
            if cpu is None and not opts.urn:
                raise TypeError("Missing required property 'cpu'")
            __props__.__dict__["cpu"] = cpu
            __props__.__dict__["downscaling"] = downscaling
            if management_option is None and not opts.urn:
                raise TypeError("Missing required property 'management_option'")
            __props__.__dict__["management_option"] = management_option
            if memory is None and not opts.urn:
                raise TypeError("Missing required property 'memory'")
            __props__.__dict__["memory"] = memory
            __props__.__dict__["memory_event"] = memory_event
            __props__.__dict__["name"] = name
            __props__.__dict__["predictive_scaling"] = predictive_scaling
            __props__.__dict__["rollout_behavior"] = rollout_behavior
            __props__.__dict__["startup"] = startup
        super(WorkloadScalingPolicy, __self__).__init__(
            'castai:workload:WorkloadScalingPolicy',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            anti_affinity: Optional[pulumi.Input[Union['_workload.WorkloadScalingPolicyAntiAffinityArgs', '_workload.WorkloadScalingPolicyAntiAffinityArgsDict']]] = None,
            apply_type: Optional[pulumi.Input[_builtins.str]] = None,
            assignment_rules: Optional[pulumi.Input[Sequence[pulumi.Input[Union['_workload.WorkloadScalingPolicyAssignmentRuleArgs', '_workload.WorkloadScalingPolicyAssignmentRuleArgsDict']]]]] = None,
            cluster_id: Optional[pulumi.Input[_builtins.str]] = None,
            confidence: Optional[pulumi.Input[Union['_workload.WorkloadScalingPolicyConfidenceArgs', '_workload.WorkloadScalingPolicyConfidenceArgsDict']]] = None,
            cpu: Optional[pulumi.Input[Union['_workload.WorkloadScalingPolicyCpuArgs', '_workload.WorkloadScalingPolicyCpuArgsDict']]] = None,
            downscaling: Optional[pulumi.Input[Union['_workload.WorkloadScalingPolicyDownscalingArgs', '_workload.WorkloadScalingPolicyDownscalingArgsDict']]] = None,
            management_option: Optional[pulumi.Input[_builtins.str]] = None,
            memory: Optional[pulumi.Input[Union['_workload.WorkloadScalingPolicyMemoryArgs', '_workload.WorkloadScalingPolicyMemoryArgsDict']]] = None,
            memory_event: Optional[pulumi.Input[Union['_workload.WorkloadScalingPolicyMemoryEventArgs', '_workload.WorkloadScalingPolicyMemoryEventArgsDict']]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            predictive_scaling: Optional[pulumi.Input[Union['_workload.WorkloadScalingPolicyPredictiveScalingArgs', '_workload.WorkloadScalingPolicyPredictiveScalingArgsDict']]] = None,
            rollout_behavior: Optional[pulumi.Input[Union['_workload.WorkloadScalingPolicyRolloutBehaviorArgs', '_workload.WorkloadScalingPolicyRolloutBehaviorArgsDict']]] = None,
            startup: Optional[pulumi.Input[Union['_workload.WorkloadScalingPolicyStartupArgs', '_workload.WorkloadScalingPolicyStartupArgsDict']]] = None) -> 'WorkloadScalingPolicy':
        """
        Get an existing WorkloadScalingPolicy resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] apply_type: Recommendation apply type.
               	- IMMEDIATE - pods are restarted immediately when new recommendation is generated.
               	- DEFERRED - pods are not restarted and recommendation values are applied during natural restarts only (new deployment, etc.)
        :param pulumi.Input[Sequence[pulumi.Input[Union['_workload.WorkloadScalingPolicyAssignmentRuleArgs', '_workload.WorkloadScalingPolicyAssignmentRuleArgsDict']]]] assignment_rules: Allows defining conditions for automatically assigning workloads to this scaling policy.
        :param pulumi.Input[_builtins.str] cluster_id: CAST AI cluster id
        :param pulumi.Input[Union['_workload.WorkloadScalingPolicyConfidenceArgs', '_workload.WorkloadScalingPolicyConfidenceArgsDict']] confidence: Defines the confidence settings for applying recommendations.
        :param pulumi.Input[_builtins.str] management_option: Defines possible options for workload management.
               	- READ_ONLY - workload watched (metrics collected), but no actions performed by CAST AI.
               	- MANAGED - workload watched (metrics collected), CAST AI may perform actions on the workload.
        :param pulumi.Input[_builtins.str] name: Scaling policy name
        :param pulumi.Input[Union['_workload.WorkloadScalingPolicyRolloutBehaviorArgs', '_workload.WorkloadScalingPolicyRolloutBehaviorArgsDict']] rollout_behavior: Defines the rollout behavior used when applying recommendations. Prerequisites:
               	- Applicable to Deployment resources that support running as multi-replica.
               	- Deployment is running with single replica (replica count = 1).
               	- Deployment's rollout strategy allows for downtime.
               	- Recommendation apply type is "immediate".
               	- Cluster has workload-autoscaler component version v0.35.3 or higher.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _WorkloadScalingPolicyState.__new__(_WorkloadScalingPolicyState)

        __props__.__dict__["anti_affinity"] = anti_affinity
        __props__.__dict__["apply_type"] = apply_type
        __props__.__dict__["assignment_rules"] = assignment_rules
        __props__.__dict__["cluster_id"] = cluster_id
        __props__.__dict__["confidence"] = confidence
        __props__.__dict__["cpu"] = cpu
        __props__.__dict__["downscaling"] = downscaling
        __props__.__dict__["management_option"] = management_option
        __props__.__dict__["memory"] = memory
        __props__.__dict__["memory_event"] = memory_event
        __props__.__dict__["name"] = name
        __props__.__dict__["predictive_scaling"] = predictive_scaling
        __props__.__dict__["rollout_behavior"] = rollout_behavior
        __props__.__dict__["startup"] = startup
        return WorkloadScalingPolicy(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="antiAffinity")
    def anti_affinity(self) -> pulumi.Output[Optional['_workload.outputs.WorkloadScalingPolicyAntiAffinity']]:
        return pulumi.get(self, "anti_affinity")

    @_builtins.property
    @pulumi.getter(name="applyType")
    def apply_type(self) -> pulumi.Output[_builtins.str]:
        """
        Recommendation apply type.
        	- IMMEDIATE - pods are restarted immediately when new recommendation is generated.
        	- DEFERRED - pods are not restarted and recommendation values are applied during natural restarts only (new deployment, etc.)
        """
        return pulumi.get(self, "apply_type")

    @_builtins.property
    @pulumi.getter(name="assignmentRules")
    def assignment_rules(self) -> pulumi.Output[Optional[Sequence['_workload.outputs.WorkloadScalingPolicyAssignmentRule']]]:
        """
        Allows defining conditions for automatically assigning workloads to this scaling policy.
        """
        return pulumi.get(self, "assignment_rules")

    @_builtins.property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> pulumi.Output[_builtins.str]:
        """
        CAST AI cluster id
        """
        return pulumi.get(self, "cluster_id")

    @_builtins.property
    @pulumi.getter
    def confidence(self) -> pulumi.Output[Optional['_workload.outputs.WorkloadScalingPolicyConfidence']]:
        """
        Defines the confidence settings for applying recommendations.
        """
        return pulumi.get(self, "confidence")

    @_builtins.property
    @pulumi.getter
    def cpu(self) -> pulumi.Output['_workload.outputs.WorkloadScalingPolicyCpu']:
        return pulumi.get(self, "cpu")

    @_builtins.property
    @pulumi.getter
    def downscaling(self) -> pulumi.Output[Optional['_workload.outputs.WorkloadScalingPolicyDownscaling']]:
        return pulumi.get(self, "downscaling")

    @_builtins.property
    @pulumi.getter(name="managementOption")
    def management_option(self) -> pulumi.Output[_builtins.str]:
        """
        Defines possible options for workload management.
        	- READ_ONLY - workload watched (metrics collected), but no actions performed by CAST AI.
        	- MANAGED - workload watched (metrics collected), CAST AI may perform actions on the workload.
        """
        return pulumi.get(self, "management_option")

    @_builtins.property
    @pulumi.getter
    def memory(self) -> pulumi.Output['_workload.outputs.WorkloadScalingPolicyMemory']:
        return pulumi.get(self, "memory")

    @_builtins.property
    @pulumi.getter(name="memoryEvent")
    def memory_event(self) -> pulumi.Output[Optional['_workload.outputs.WorkloadScalingPolicyMemoryEvent']]:
        return pulumi.get(self, "memory_event")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        Scaling policy name
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="predictiveScaling")
    def predictive_scaling(self) -> pulumi.Output[Optional['_workload.outputs.WorkloadScalingPolicyPredictiveScaling']]:
        return pulumi.get(self, "predictive_scaling")

    @_builtins.property
    @pulumi.getter(name="rolloutBehavior")
    def rollout_behavior(self) -> pulumi.Output[Optional['_workload.outputs.WorkloadScalingPolicyRolloutBehavior']]:
        """
        Defines the rollout behavior used when applying recommendations. Prerequisites:
        	- Applicable to Deployment resources that support running as multi-replica.
        	- Deployment is running with single replica (replica count = 1).
        	- Deployment's rollout strategy allows for downtime.
        	- Recommendation apply type is "immediate".
        	- Cluster has workload-autoscaler component version v0.35.3 or higher.
        """
        return pulumi.get(self, "rollout_behavior")

    @_builtins.property
    @pulumi.getter
    def startup(self) -> pulumi.Output[Optional['_workload.outputs.WorkloadScalingPolicyStartup']]:
        return pulumi.get(self, "startup")

