// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package castai

import (
	"context"
	"reflect"

	"github.com/castai/pulumi-castai/sdk/go/castai/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

type CommitmentsAzureReservation struct {
	// Allowed usage of the commitment. The value is between 0 (0%) and 1 (100%).
	AllowedUsage *float64 `pulumi:"allowedUsage"`
	// List of assigned clusters for the commitment. If prioritization is enabled, the order of the assignments indicates the priority. The first assignment has the highest priority.
	Assignments []CommitmentsAzureReservationAssignment `pulumi:"assignments"`
	// Number of instances covered by the reservation.
	Count int `pulumi:"count"`
	// End timestamp of the CUD.
	EndTimestamp string `pulumi:"endTimestamp"`
	// ID of the commitment in CAST AI.
	Id *string `pulumi:"id"`
	// Type of the instance covered by the reservation.
	InstanceType string `pulumi:"instanceType"`
	// Name of the CUD.
	Name string `pulumi:"name"`
	// Plan of the reservation.
	Plan string `pulumi:"plan"`
	// If enabled, it's possible to assign priorities to the assigned clusters.
	Prioritization *bool `pulumi:"prioritization"`
	// Region in which the CUD is available.
	Region string `pulumi:"region"`
	// ID of the reservation in Azure.
	ReservationId string `pulumi:"reservationId"`
	// Status of the reservation in Azure.
	ReservationStatus string `pulumi:"reservationStatus"`
	// Scaling strategy of the commitment in CAST AI. One of: Default, CPUBased, RamBased
	ScalingStrategy    *string `pulumi:"scalingStrategy"`
	Scope              string  `pulumi:"scope"`
	ScopeResourceGroup string  `pulumi:"scopeResourceGroup"`
	ScopeSubscription  string  `pulumi:"scopeSubscription"`
	// Start timestamp of the CUD.
	StartTimestamp string `pulumi:"startTimestamp"`
	// Status of the commitment in CAST AI.
	Status *string `pulumi:"status"`
}

// CommitmentsAzureReservationInput is an input type that accepts CommitmentsAzureReservationArgs and CommitmentsAzureReservationOutput values.
// You can construct a concrete instance of `CommitmentsAzureReservationInput` via:
//
//	CommitmentsAzureReservationArgs{...}
type CommitmentsAzureReservationInput interface {
	pulumi.Input

	ToCommitmentsAzureReservationOutput() CommitmentsAzureReservationOutput
	ToCommitmentsAzureReservationOutputWithContext(context.Context) CommitmentsAzureReservationOutput
}

type CommitmentsAzureReservationArgs struct {
	// Allowed usage of the commitment. The value is between 0 (0%) and 1 (100%).
	AllowedUsage pulumi.Float64PtrInput `pulumi:"allowedUsage"`
	// List of assigned clusters for the commitment. If prioritization is enabled, the order of the assignments indicates the priority. The first assignment has the highest priority.
	Assignments CommitmentsAzureReservationAssignmentArrayInput `pulumi:"assignments"`
	// Number of instances covered by the reservation.
	Count pulumi.IntInput `pulumi:"count"`
	// End timestamp of the CUD.
	EndTimestamp pulumi.StringInput `pulumi:"endTimestamp"`
	// ID of the commitment in CAST AI.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Type of the instance covered by the reservation.
	InstanceType pulumi.StringInput `pulumi:"instanceType"`
	// Name of the CUD.
	Name pulumi.StringInput `pulumi:"name"`
	// Plan of the reservation.
	Plan pulumi.StringInput `pulumi:"plan"`
	// If enabled, it's possible to assign priorities to the assigned clusters.
	Prioritization pulumi.BoolPtrInput `pulumi:"prioritization"`
	// Region in which the CUD is available.
	Region pulumi.StringInput `pulumi:"region"`
	// ID of the reservation in Azure.
	ReservationId pulumi.StringInput `pulumi:"reservationId"`
	// Status of the reservation in Azure.
	ReservationStatus pulumi.StringInput `pulumi:"reservationStatus"`
	// Scaling strategy of the commitment in CAST AI. One of: Default, CPUBased, RamBased
	ScalingStrategy    pulumi.StringPtrInput `pulumi:"scalingStrategy"`
	Scope              pulumi.StringInput    `pulumi:"scope"`
	ScopeResourceGroup pulumi.StringInput    `pulumi:"scopeResourceGroup"`
	ScopeSubscription  pulumi.StringInput    `pulumi:"scopeSubscription"`
	// Start timestamp of the CUD.
	StartTimestamp pulumi.StringInput `pulumi:"startTimestamp"`
	// Status of the commitment in CAST AI.
	Status pulumi.StringPtrInput `pulumi:"status"`
}

func (CommitmentsAzureReservationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CommitmentsAzureReservation)(nil)).Elem()
}

func (i CommitmentsAzureReservationArgs) ToCommitmentsAzureReservationOutput() CommitmentsAzureReservationOutput {
	return i.ToCommitmentsAzureReservationOutputWithContext(context.Background())
}

func (i CommitmentsAzureReservationArgs) ToCommitmentsAzureReservationOutputWithContext(ctx context.Context) CommitmentsAzureReservationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CommitmentsAzureReservationOutput)
}

// CommitmentsAzureReservationArrayInput is an input type that accepts CommitmentsAzureReservationArray and CommitmentsAzureReservationArrayOutput values.
// You can construct a concrete instance of `CommitmentsAzureReservationArrayInput` via:
//
//	CommitmentsAzureReservationArray{ CommitmentsAzureReservationArgs{...} }
type CommitmentsAzureReservationArrayInput interface {
	pulumi.Input

	ToCommitmentsAzureReservationArrayOutput() CommitmentsAzureReservationArrayOutput
	ToCommitmentsAzureReservationArrayOutputWithContext(context.Context) CommitmentsAzureReservationArrayOutput
}

type CommitmentsAzureReservationArray []CommitmentsAzureReservationInput

func (CommitmentsAzureReservationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CommitmentsAzureReservation)(nil)).Elem()
}

func (i CommitmentsAzureReservationArray) ToCommitmentsAzureReservationArrayOutput() CommitmentsAzureReservationArrayOutput {
	return i.ToCommitmentsAzureReservationArrayOutputWithContext(context.Background())
}

func (i CommitmentsAzureReservationArray) ToCommitmentsAzureReservationArrayOutputWithContext(ctx context.Context) CommitmentsAzureReservationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CommitmentsAzureReservationArrayOutput)
}

type CommitmentsAzureReservationOutput struct{ *pulumi.OutputState }

func (CommitmentsAzureReservationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CommitmentsAzureReservation)(nil)).Elem()
}

func (o CommitmentsAzureReservationOutput) ToCommitmentsAzureReservationOutput() CommitmentsAzureReservationOutput {
	return o
}

func (o CommitmentsAzureReservationOutput) ToCommitmentsAzureReservationOutputWithContext(ctx context.Context) CommitmentsAzureReservationOutput {
	return o
}

// Allowed usage of the commitment. The value is between 0 (0%) and 1 (100%).
func (o CommitmentsAzureReservationOutput) AllowedUsage() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v CommitmentsAzureReservation) *float64 { return v.AllowedUsage }).(pulumi.Float64PtrOutput)
}

// List of assigned clusters for the commitment. If prioritization is enabled, the order of the assignments indicates the priority. The first assignment has the highest priority.
func (o CommitmentsAzureReservationOutput) Assignments() CommitmentsAzureReservationAssignmentArrayOutput {
	return o.ApplyT(func(v CommitmentsAzureReservation) []CommitmentsAzureReservationAssignment { return v.Assignments }).(CommitmentsAzureReservationAssignmentArrayOutput)
}

// Number of instances covered by the reservation.
func (o CommitmentsAzureReservationOutput) Count() pulumi.IntOutput {
	return o.ApplyT(func(v CommitmentsAzureReservation) int { return v.Count }).(pulumi.IntOutput)
}

// End timestamp of the CUD.
func (o CommitmentsAzureReservationOutput) EndTimestamp() pulumi.StringOutput {
	return o.ApplyT(func(v CommitmentsAzureReservation) string { return v.EndTimestamp }).(pulumi.StringOutput)
}

// ID of the commitment in CAST AI.
func (o CommitmentsAzureReservationOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CommitmentsAzureReservation) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Type of the instance covered by the reservation.
func (o CommitmentsAzureReservationOutput) InstanceType() pulumi.StringOutput {
	return o.ApplyT(func(v CommitmentsAzureReservation) string { return v.InstanceType }).(pulumi.StringOutput)
}

// Name of the CUD.
func (o CommitmentsAzureReservationOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v CommitmentsAzureReservation) string { return v.Name }).(pulumi.StringOutput)
}

// Plan of the reservation.
func (o CommitmentsAzureReservationOutput) Plan() pulumi.StringOutput {
	return o.ApplyT(func(v CommitmentsAzureReservation) string { return v.Plan }).(pulumi.StringOutput)
}

// If enabled, it's possible to assign priorities to the assigned clusters.
func (o CommitmentsAzureReservationOutput) Prioritization() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CommitmentsAzureReservation) *bool { return v.Prioritization }).(pulumi.BoolPtrOutput)
}

// Region in which the CUD is available.
func (o CommitmentsAzureReservationOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v CommitmentsAzureReservation) string { return v.Region }).(pulumi.StringOutput)
}

// ID of the reservation in Azure.
func (o CommitmentsAzureReservationOutput) ReservationId() pulumi.StringOutput {
	return o.ApplyT(func(v CommitmentsAzureReservation) string { return v.ReservationId }).(pulumi.StringOutput)
}

// Status of the reservation in Azure.
func (o CommitmentsAzureReservationOutput) ReservationStatus() pulumi.StringOutput {
	return o.ApplyT(func(v CommitmentsAzureReservation) string { return v.ReservationStatus }).(pulumi.StringOutput)
}

// Scaling strategy of the commitment in CAST AI. One of: Default, CPUBased, RamBased
func (o CommitmentsAzureReservationOutput) ScalingStrategy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CommitmentsAzureReservation) *string { return v.ScalingStrategy }).(pulumi.StringPtrOutput)
}

func (o CommitmentsAzureReservationOutput) Scope() pulumi.StringOutput {
	return o.ApplyT(func(v CommitmentsAzureReservation) string { return v.Scope }).(pulumi.StringOutput)
}

func (o CommitmentsAzureReservationOutput) ScopeResourceGroup() pulumi.StringOutput {
	return o.ApplyT(func(v CommitmentsAzureReservation) string { return v.ScopeResourceGroup }).(pulumi.StringOutput)
}

func (o CommitmentsAzureReservationOutput) ScopeSubscription() pulumi.StringOutput {
	return o.ApplyT(func(v CommitmentsAzureReservation) string { return v.ScopeSubscription }).(pulumi.StringOutput)
}

// Start timestamp of the CUD.
func (o CommitmentsAzureReservationOutput) StartTimestamp() pulumi.StringOutput {
	return o.ApplyT(func(v CommitmentsAzureReservation) string { return v.StartTimestamp }).(pulumi.StringOutput)
}

// Status of the commitment in CAST AI.
func (o CommitmentsAzureReservationOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CommitmentsAzureReservation) *string { return v.Status }).(pulumi.StringPtrOutput)
}

type CommitmentsAzureReservationArrayOutput struct{ *pulumi.OutputState }

func (CommitmentsAzureReservationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CommitmentsAzureReservation)(nil)).Elem()
}

func (o CommitmentsAzureReservationArrayOutput) ToCommitmentsAzureReservationArrayOutput() CommitmentsAzureReservationArrayOutput {
	return o
}

func (o CommitmentsAzureReservationArrayOutput) ToCommitmentsAzureReservationArrayOutputWithContext(ctx context.Context) CommitmentsAzureReservationArrayOutput {
	return o
}

func (o CommitmentsAzureReservationArrayOutput) Index(i pulumi.IntInput) CommitmentsAzureReservationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CommitmentsAzureReservation {
		return vs[0].([]CommitmentsAzureReservation)[vs[1].(int)]
	}).(CommitmentsAzureReservationOutput)
}

type CommitmentsAzureReservationAssignment struct {
	// ID of the cluster to assign the commitment to.
	ClusterId *string `pulumi:"clusterId"`
	// Priority of the assignment. The lower the value, the higher the priority. 1 is the highest priority.
	Priority *int `pulumi:"priority"`
}

// CommitmentsAzureReservationAssignmentInput is an input type that accepts CommitmentsAzureReservationAssignmentArgs and CommitmentsAzureReservationAssignmentOutput values.
// You can construct a concrete instance of `CommitmentsAzureReservationAssignmentInput` via:
//
//	CommitmentsAzureReservationAssignmentArgs{...}
type CommitmentsAzureReservationAssignmentInput interface {
	pulumi.Input

	ToCommitmentsAzureReservationAssignmentOutput() CommitmentsAzureReservationAssignmentOutput
	ToCommitmentsAzureReservationAssignmentOutputWithContext(context.Context) CommitmentsAzureReservationAssignmentOutput
}

type CommitmentsAzureReservationAssignmentArgs struct {
	// ID of the cluster to assign the commitment to.
	ClusterId pulumi.StringPtrInput `pulumi:"clusterId"`
	// Priority of the assignment. The lower the value, the higher the priority. 1 is the highest priority.
	Priority pulumi.IntPtrInput `pulumi:"priority"`
}

func (CommitmentsAzureReservationAssignmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CommitmentsAzureReservationAssignment)(nil)).Elem()
}

func (i CommitmentsAzureReservationAssignmentArgs) ToCommitmentsAzureReservationAssignmentOutput() CommitmentsAzureReservationAssignmentOutput {
	return i.ToCommitmentsAzureReservationAssignmentOutputWithContext(context.Background())
}

func (i CommitmentsAzureReservationAssignmentArgs) ToCommitmentsAzureReservationAssignmentOutputWithContext(ctx context.Context) CommitmentsAzureReservationAssignmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CommitmentsAzureReservationAssignmentOutput)
}

// CommitmentsAzureReservationAssignmentArrayInput is an input type that accepts CommitmentsAzureReservationAssignmentArray and CommitmentsAzureReservationAssignmentArrayOutput values.
// You can construct a concrete instance of `CommitmentsAzureReservationAssignmentArrayInput` via:
//
//	CommitmentsAzureReservationAssignmentArray{ CommitmentsAzureReservationAssignmentArgs{...} }
type CommitmentsAzureReservationAssignmentArrayInput interface {
	pulumi.Input

	ToCommitmentsAzureReservationAssignmentArrayOutput() CommitmentsAzureReservationAssignmentArrayOutput
	ToCommitmentsAzureReservationAssignmentArrayOutputWithContext(context.Context) CommitmentsAzureReservationAssignmentArrayOutput
}

type CommitmentsAzureReservationAssignmentArray []CommitmentsAzureReservationAssignmentInput

func (CommitmentsAzureReservationAssignmentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CommitmentsAzureReservationAssignment)(nil)).Elem()
}

func (i CommitmentsAzureReservationAssignmentArray) ToCommitmentsAzureReservationAssignmentArrayOutput() CommitmentsAzureReservationAssignmentArrayOutput {
	return i.ToCommitmentsAzureReservationAssignmentArrayOutputWithContext(context.Background())
}

func (i CommitmentsAzureReservationAssignmentArray) ToCommitmentsAzureReservationAssignmentArrayOutputWithContext(ctx context.Context) CommitmentsAzureReservationAssignmentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CommitmentsAzureReservationAssignmentArrayOutput)
}

type CommitmentsAzureReservationAssignmentOutput struct{ *pulumi.OutputState }

func (CommitmentsAzureReservationAssignmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CommitmentsAzureReservationAssignment)(nil)).Elem()
}

func (o CommitmentsAzureReservationAssignmentOutput) ToCommitmentsAzureReservationAssignmentOutput() CommitmentsAzureReservationAssignmentOutput {
	return o
}

func (o CommitmentsAzureReservationAssignmentOutput) ToCommitmentsAzureReservationAssignmentOutputWithContext(ctx context.Context) CommitmentsAzureReservationAssignmentOutput {
	return o
}

// ID of the cluster to assign the commitment to.
func (o CommitmentsAzureReservationAssignmentOutput) ClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CommitmentsAzureReservationAssignment) *string { return v.ClusterId }).(pulumi.StringPtrOutput)
}

// Priority of the assignment. The lower the value, the higher the priority. 1 is the highest priority.
func (o CommitmentsAzureReservationAssignmentOutput) Priority() pulumi.IntPtrOutput {
	return o.ApplyT(func(v CommitmentsAzureReservationAssignment) *int { return v.Priority }).(pulumi.IntPtrOutput)
}

type CommitmentsAzureReservationAssignmentArrayOutput struct{ *pulumi.OutputState }

func (CommitmentsAzureReservationAssignmentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CommitmentsAzureReservationAssignment)(nil)).Elem()
}

func (o CommitmentsAzureReservationAssignmentArrayOutput) ToCommitmentsAzureReservationAssignmentArrayOutput() CommitmentsAzureReservationAssignmentArrayOutput {
	return o
}

func (o CommitmentsAzureReservationAssignmentArrayOutput) ToCommitmentsAzureReservationAssignmentArrayOutputWithContext(ctx context.Context) CommitmentsAzureReservationAssignmentArrayOutput {
	return o
}

func (o CommitmentsAzureReservationAssignmentArrayOutput) Index(i pulumi.IntInput) CommitmentsAzureReservationAssignmentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CommitmentsAzureReservationAssignment {
		return vs[0].([]CommitmentsAzureReservationAssignment)[vs[1].(int)]
	}).(CommitmentsAzureReservationAssignmentOutput)
}

type CommitmentsCommitmentConfig struct {
	// Allowed usage of the commitment. The value is between 0 (0%) and 1 (100%).
	AllowedUsage *float64 `pulumi:"allowedUsage"`
	// List of assigned clusters for the commitment. If prioritization is enabled, the order of the assignments indicates the priority. The first assignment has the highest priority.
	Assignments []CommitmentsCommitmentConfigAssignment `pulumi:"assignments"`
	// Matcher used to map config to a commitment.
	Matcher CommitmentsCommitmentConfigMatcher `pulumi:"matcher"`
	// If enabled, it's possible to assign priorities to the assigned clusters.
	Prioritization *bool `pulumi:"prioritization"`
	// Scaling strategy of the commitment in CAST AI. One of: Default, CPUBased, RamBased
	ScalingStrategy *string `pulumi:"scalingStrategy"`
	// Status of the commitment in CAST AI.
	Status *string `pulumi:"status"`
}

// CommitmentsCommitmentConfigInput is an input type that accepts CommitmentsCommitmentConfigArgs and CommitmentsCommitmentConfigOutput values.
// You can construct a concrete instance of `CommitmentsCommitmentConfigInput` via:
//
//	CommitmentsCommitmentConfigArgs{...}
type CommitmentsCommitmentConfigInput interface {
	pulumi.Input

	ToCommitmentsCommitmentConfigOutput() CommitmentsCommitmentConfigOutput
	ToCommitmentsCommitmentConfigOutputWithContext(context.Context) CommitmentsCommitmentConfigOutput
}

type CommitmentsCommitmentConfigArgs struct {
	// Allowed usage of the commitment. The value is between 0 (0%) and 1 (100%).
	AllowedUsage pulumi.Float64PtrInput `pulumi:"allowedUsage"`
	// List of assigned clusters for the commitment. If prioritization is enabled, the order of the assignments indicates the priority. The first assignment has the highest priority.
	Assignments CommitmentsCommitmentConfigAssignmentArrayInput `pulumi:"assignments"`
	// Matcher used to map config to a commitment.
	Matcher CommitmentsCommitmentConfigMatcherInput `pulumi:"matcher"`
	// If enabled, it's possible to assign priorities to the assigned clusters.
	Prioritization pulumi.BoolPtrInput `pulumi:"prioritization"`
	// Scaling strategy of the commitment in CAST AI. One of: Default, CPUBased, RamBased
	ScalingStrategy pulumi.StringPtrInput `pulumi:"scalingStrategy"`
	// Status of the commitment in CAST AI.
	Status pulumi.StringPtrInput `pulumi:"status"`
}

func (CommitmentsCommitmentConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CommitmentsCommitmentConfig)(nil)).Elem()
}

func (i CommitmentsCommitmentConfigArgs) ToCommitmentsCommitmentConfigOutput() CommitmentsCommitmentConfigOutput {
	return i.ToCommitmentsCommitmentConfigOutputWithContext(context.Background())
}

func (i CommitmentsCommitmentConfigArgs) ToCommitmentsCommitmentConfigOutputWithContext(ctx context.Context) CommitmentsCommitmentConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CommitmentsCommitmentConfigOutput)
}

// CommitmentsCommitmentConfigArrayInput is an input type that accepts CommitmentsCommitmentConfigArray and CommitmentsCommitmentConfigArrayOutput values.
// You can construct a concrete instance of `CommitmentsCommitmentConfigArrayInput` via:
//
//	CommitmentsCommitmentConfigArray{ CommitmentsCommitmentConfigArgs{...} }
type CommitmentsCommitmentConfigArrayInput interface {
	pulumi.Input

	ToCommitmentsCommitmentConfigArrayOutput() CommitmentsCommitmentConfigArrayOutput
	ToCommitmentsCommitmentConfigArrayOutputWithContext(context.Context) CommitmentsCommitmentConfigArrayOutput
}

type CommitmentsCommitmentConfigArray []CommitmentsCommitmentConfigInput

func (CommitmentsCommitmentConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CommitmentsCommitmentConfig)(nil)).Elem()
}

func (i CommitmentsCommitmentConfigArray) ToCommitmentsCommitmentConfigArrayOutput() CommitmentsCommitmentConfigArrayOutput {
	return i.ToCommitmentsCommitmentConfigArrayOutputWithContext(context.Background())
}

func (i CommitmentsCommitmentConfigArray) ToCommitmentsCommitmentConfigArrayOutputWithContext(ctx context.Context) CommitmentsCommitmentConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CommitmentsCommitmentConfigArrayOutput)
}

type CommitmentsCommitmentConfigOutput struct{ *pulumi.OutputState }

func (CommitmentsCommitmentConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CommitmentsCommitmentConfig)(nil)).Elem()
}

func (o CommitmentsCommitmentConfigOutput) ToCommitmentsCommitmentConfigOutput() CommitmentsCommitmentConfigOutput {
	return o
}

func (o CommitmentsCommitmentConfigOutput) ToCommitmentsCommitmentConfigOutputWithContext(ctx context.Context) CommitmentsCommitmentConfigOutput {
	return o
}

// Allowed usage of the commitment. The value is between 0 (0%) and 1 (100%).
func (o CommitmentsCommitmentConfigOutput) AllowedUsage() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v CommitmentsCommitmentConfig) *float64 { return v.AllowedUsage }).(pulumi.Float64PtrOutput)
}

// List of assigned clusters for the commitment. If prioritization is enabled, the order of the assignments indicates the priority. The first assignment has the highest priority.
func (o CommitmentsCommitmentConfigOutput) Assignments() CommitmentsCommitmentConfigAssignmentArrayOutput {
	return o.ApplyT(func(v CommitmentsCommitmentConfig) []CommitmentsCommitmentConfigAssignment { return v.Assignments }).(CommitmentsCommitmentConfigAssignmentArrayOutput)
}

// Matcher used to map config to a commitment.
func (o CommitmentsCommitmentConfigOutput) Matcher() CommitmentsCommitmentConfigMatcherOutput {
	return o.ApplyT(func(v CommitmentsCommitmentConfig) CommitmentsCommitmentConfigMatcher { return v.Matcher }).(CommitmentsCommitmentConfigMatcherOutput)
}

// If enabled, it's possible to assign priorities to the assigned clusters.
func (o CommitmentsCommitmentConfigOutput) Prioritization() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CommitmentsCommitmentConfig) *bool { return v.Prioritization }).(pulumi.BoolPtrOutput)
}

// Scaling strategy of the commitment in CAST AI. One of: Default, CPUBased, RamBased
func (o CommitmentsCommitmentConfigOutput) ScalingStrategy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CommitmentsCommitmentConfig) *string { return v.ScalingStrategy }).(pulumi.StringPtrOutput)
}

// Status of the commitment in CAST AI.
func (o CommitmentsCommitmentConfigOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CommitmentsCommitmentConfig) *string { return v.Status }).(pulumi.StringPtrOutput)
}

type CommitmentsCommitmentConfigArrayOutput struct{ *pulumi.OutputState }

func (CommitmentsCommitmentConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CommitmentsCommitmentConfig)(nil)).Elem()
}

func (o CommitmentsCommitmentConfigArrayOutput) ToCommitmentsCommitmentConfigArrayOutput() CommitmentsCommitmentConfigArrayOutput {
	return o
}

func (o CommitmentsCommitmentConfigArrayOutput) ToCommitmentsCommitmentConfigArrayOutputWithContext(ctx context.Context) CommitmentsCommitmentConfigArrayOutput {
	return o
}

func (o CommitmentsCommitmentConfigArrayOutput) Index(i pulumi.IntInput) CommitmentsCommitmentConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CommitmentsCommitmentConfig {
		return vs[0].([]CommitmentsCommitmentConfig)[vs[1].(int)]
	}).(CommitmentsCommitmentConfigOutput)
}

type CommitmentsCommitmentConfigAssignment struct {
	// ID of the cluster to assign the commitment to.
	ClusterId string `pulumi:"clusterId"`
	// Priority of the assignment. The lower the value, the higher the priority. 1 is the highest priority.
	Priority *int `pulumi:"priority"`
}

// CommitmentsCommitmentConfigAssignmentInput is an input type that accepts CommitmentsCommitmentConfigAssignmentArgs and CommitmentsCommitmentConfigAssignmentOutput values.
// You can construct a concrete instance of `CommitmentsCommitmentConfigAssignmentInput` via:
//
//	CommitmentsCommitmentConfigAssignmentArgs{...}
type CommitmentsCommitmentConfigAssignmentInput interface {
	pulumi.Input

	ToCommitmentsCommitmentConfigAssignmentOutput() CommitmentsCommitmentConfigAssignmentOutput
	ToCommitmentsCommitmentConfigAssignmentOutputWithContext(context.Context) CommitmentsCommitmentConfigAssignmentOutput
}

type CommitmentsCommitmentConfigAssignmentArgs struct {
	// ID of the cluster to assign the commitment to.
	ClusterId pulumi.StringInput `pulumi:"clusterId"`
	// Priority of the assignment. The lower the value, the higher the priority. 1 is the highest priority.
	Priority pulumi.IntPtrInput `pulumi:"priority"`
}

func (CommitmentsCommitmentConfigAssignmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CommitmentsCommitmentConfigAssignment)(nil)).Elem()
}

func (i CommitmentsCommitmentConfigAssignmentArgs) ToCommitmentsCommitmentConfigAssignmentOutput() CommitmentsCommitmentConfigAssignmentOutput {
	return i.ToCommitmentsCommitmentConfigAssignmentOutputWithContext(context.Background())
}

func (i CommitmentsCommitmentConfigAssignmentArgs) ToCommitmentsCommitmentConfigAssignmentOutputWithContext(ctx context.Context) CommitmentsCommitmentConfigAssignmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CommitmentsCommitmentConfigAssignmentOutput)
}

// CommitmentsCommitmentConfigAssignmentArrayInput is an input type that accepts CommitmentsCommitmentConfigAssignmentArray and CommitmentsCommitmentConfigAssignmentArrayOutput values.
// You can construct a concrete instance of `CommitmentsCommitmentConfigAssignmentArrayInput` via:
//
//	CommitmentsCommitmentConfigAssignmentArray{ CommitmentsCommitmentConfigAssignmentArgs{...} }
type CommitmentsCommitmentConfigAssignmentArrayInput interface {
	pulumi.Input

	ToCommitmentsCommitmentConfigAssignmentArrayOutput() CommitmentsCommitmentConfigAssignmentArrayOutput
	ToCommitmentsCommitmentConfigAssignmentArrayOutputWithContext(context.Context) CommitmentsCommitmentConfigAssignmentArrayOutput
}

type CommitmentsCommitmentConfigAssignmentArray []CommitmentsCommitmentConfigAssignmentInput

func (CommitmentsCommitmentConfigAssignmentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CommitmentsCommitmentConfigAssignment)(nil)).Elem()
}

func (i CommitmentsCommitmentConfigAssignmentArray) ToCommitmentsCommitmentConfigAssignmentArrayOutput() CommitmentsCommitmentConfigAssignmentArrayOutput {
	return i.ToCommitmentsCommitmentConfigAssignmentArrayOutputWithContext(context.Background())
}

func (i CommitmentsCommitmentConfigAssignmentArray) ToCommitmentsCommitmentConfigAssignmentArrayOutputWithContext(ctx context.Context) CommitmentsCommitmentConfigAssignmentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CommitmentsCommitmentConfigAssignmentArrayOutput)
}

type CommitmentsCommitmentConfigAssignmentOutput struct{ *pulumi.OutputState }

func (CommitmentsCommitmentConfigAssignmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CommitmentsCommitmentConfigAssignment)(nil)).Elem()
}

func (o CommitmentsCommitmentConfigAssignmentOutput) ToCommitmentsCommitmentConfigAssignmentOutput() CommitmentsCommitmentConfigAssignmentOutput {
	return o
}

func (o CommitmentsCommitmentConfigAssignmentOutput) ToCommitmentsCommitmentConfigAssignmentOutputWithContext(ctx context.Context) CommitmentsCommitmentConfigAssignmentOutput {
	return o
}

// ID of the cluster to assign the commitment to.
func (o CommitmentsCommitmentConfigAssignmentOutput) ClusterId() pulumi.StringOutput {
	return o.ApplyT(func(v CommitmentsCommitmentConfigAssignment) string { return v.ClusterId }).(pulumi.StringOutput)
}

// Priority of the assignment. The lower the value, the higher the priority. 1 is the highest priority.
func (o CommitmentsCommitmentConfigAssignmentOutput) Priority() pulumi.IntPtrOutput {
	return o.ApplyT(func(v CommitmentsCommitmentConfigAssignment) *int { return v.Priority }).(pulumi.IntPtrOutput)
}

type CommitmentsCommitmentConfigAssignmentArrayOutput struct{ *pulumi.OutputState }

func (CommitmentsCommitmentConfigAssignmentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CommitmentsCommitmentConfigAssignment)(nil)).Elem()
}

func (o CommitmentsCommitmentConfigAssignmentArrayOutput) ToCommitmentsCommitmentConfigAssignmentArrayOutput() CommitmentsCommitmentConfigAssignmentArrayOutput {
	return o
}

func (o CommitmentsCommitmentConfigAssignmentArrayOutput) ToCommitmentsCommitmentConfigAssignmentArrayOutputWithContext(ctx context.Context) CommitmentsCommitmentConfigAssignmentArrayOutput {
	return o
}

func (o CommitmentsCommitmentConfigAssignmentArrayOutput) Index(i pulumi.IntInput) CommitmentsCommitmentConfigAssignmentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CommitmentsCommitmentConfigAssignment {
		return vs[0].([]CommitmentsCommitmentConfigAssignment)[vs[1].(int)]
	}).(CommitmentsCommitmentConfigAssignmentOutput)
}

type CommitmentsCommitmentConfigMatcher struct {
	// Name of the commitment to match.
	Name string `pulumi:"name"`
	// Region of the commitment to match.
	Region string `pulumi:"region"`
	// Type of the commitment to match. For compute resources, it's the type of the machine.
	Type *string `pulumi:"type"`
}

// CommitmentsCommitmentConfigMatcherInput is an input type that accepts CommitmentsCommitmentConfigMatcherArgs and CommitmentsCommitmentConfigMatcherOutput values.
// You can construct a concrete instance of `CommitmentsCommitmentConfigMatcherInput` via:
//
//	CommitmentsCommitmentConfigMatcherArgs{...}
type CommitmentsCommitmentConfigMatcherInput interface {
	pulumi.Input

	ToCommitmentsCommitmentConfigMatcherOutput() CommitmentsCommitmentConfigMatcherOutput
	ToCommitmentsCommitmentConfigMatcherOutputWithContext(context.Context) CommitmentsCommitmentConfigMatcherOutput
}

type CommitmentsCommitmentConfigMatcherArgs struct {
	// Name of the commitment to match.
	Name pulumi.StringInput `pulumi:"name"`
	// Region of the commitment to match.
	Region pulumi.StringInput `pulumi:"region"`
	// Type of the commitment to match. For compute resources, it's the type of the machine.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (CommitmentsCommitmentConfigMatcherArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CommitmentsCommitmentConfigMatcher)(nil)).Elem()
}

func (i CommitmentsCommitmentConfigMatcherArgs) ToCommitmentsCommitmentConfigMatcherOutput() CommitmentsCommitmentConfigMatcherOutput {
	return i.ToCommitmentsCommitmentConfigMatcherOutputWithContext(context.Background())
}

func (i CommitmentsCommitmentConfigMatcherArgs) ToCommitmentsCommitmentConfigMatcherOutputWithContext(ctx context.Context) CommitmentsCommitmentConfigMatcherOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CommitmentsCommitmentConfigMatcherOutput)
}

type CommitmentsCommitmentConfigMatcherOutput struct{ *pulumi.OutputState }

func (CommitmentsCommitmentConfigMatcherOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CommitmentsCommitmentConfigMatcher)(nil)).Elem()
}

func (o CommitmentsCommitmentConfigMatcherOutput) ToCommitmentsCommitmentConfigMatcherOutput() CommitmentsCommitmentConfigMatcherOutput {
	return o
}

func (o CommitmentsCommitmentConfigMatcherOutput) ToCommitmentsCommitmentConfigMatcherOutputWithContext(ctx context.Context) CommitmentsCommitmentConfigMatcherOutput {
	return o
}

// Name of the commitment to match.
func (o CommitmentsCommitmentConfigMatcherOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v CommitmentsCommitmentConfigMatcher) string { return v.Name }).(pulumi.StringOutput)
}

// Region of the commitment to match.
func (o CommitmentsCommitmentConfigMatcherOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v CommitmentsCommitmentConfigMatcher) string { return v.Region }).(pulumi.StringOutput)
}

// Type of the commitment to match. For compute resources, it's the type of the machine.
func (o CommitmentsCommitmentConfigMatcherOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CommitmentsCommitmentConfigMatcher) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type CommitmentsGcpCud struct {
	// Allowed usage of the commitment. The value is between 0 (0%) and 1 (100%).
	AllowedUsage *float64 `pulumi:"allowedUsage"`
	// List of assigned clusters for the commitment. If prioritization is enabled, the order of the assignments indicates the priority. The first assignment has the highest priority.
	Assignments []CommitmentsGcpCudAssignment `pulumi:"assignments"`
	// Number of CPUs covered by the CUD.
	Cpu int `pulumi:"cpu"`
	// ID of the CUD in GCP.
	CudId string `pulumi:"cudId"`
	// Status of the CUD in GCP.
	CudStatus string `pulumi:"cudStatus"`
	// End timestamp of the CUD.
	EndTimestamp string `pulumi:"endTimestamp"`
	// ID of the commitment in CAST AI.
	Id *string `pulumi:"id"`
	// Amount of memory in MB covered by the CUD.
	MemoryMb int `pulumi:"memoryMb"`
	// Name of the CUD.
	Name string `pulumi:"name"`
	// CUD plan e.g. 'TWELVE_MONTH'.
	Plan string `pulumi:"plan"`
	// If enabled, it's possible to assign priorities to the assigned clusters.
	Prioritization *bool `pulumi:"prioritization"`
	// Region in which the CUD is available.
	Region string `pulumi:"region"`
	// Scaling strategy of the commitment in CAST AI. One of: Default, CPUBased, RamBased
	ScalingStrategy *string `pulumi:"scalingStrategy"`
	// Start timestamp of the CUD.
	StartTimestamp string `pulumi:"startTimestamp"`
	// Status of the commitment in CAST AI.
	Status *string `pulumi:"status"`
	// Type of the CUD, e.g. determines the covered resource type e.g. 'COMPUTE_OPTIMIZED_C2D'.
	Type string `pulumi:"type"`
}

// CommitmentsGcpCudInput is an input type that accepts CommitmentsGcpCudArgs and CommitmentsGcpCudOutput values.
// You can construct a concrete instance of `CommitmentsGcpCudInput` via:
//
//	CommitmentsGcpCudArgs{...}
type CommitmentsGcpCudInput interface {
	pulumi.Input

	ToCommitmentsGcpCudOutput() CommitmentsGcpCudOutput
	ToCommitmentsGcpCudOutputWithContext(context.Context) CommitmentsGcpCudOutput
}

type CommitmentsGcpCudArgs struct {
	// Allowed usage of the commitment. The value is between 0 (0%) and 1 (100%).
	AllowedUsage pulumi.Float64PtrInput `pulumi:"allowedUsage"`
	// List of assigned clusters for the commitment. If prioritization is enabled, the order of the assignments indicates the priority. The first assignment has the highest priority.
	Assignments CommitmentsGcpCudAssignmentArrayInput `pulumi:"assignments"`
	// Number of CPUs covered by the CUD.
	Cpu pulumi.IntInput `pulumi:"cpu"`
	// ID of the CUD in GCP.
	CudId pulumi.StringInput `pulumi:"cudId"`
	// Status of the CUD in GCP.
	CudStatus pulumi.StringInput `pulumi:"cudStatus"`
	// End timestamp of the CUD.
	EndTimestamp pulumi.StringInput `pulumi:"endTimestamp"`
	// ID of the commitment in CAST AI.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Amount of memory in MB covered by the CUD.
	MemoryMb pulumi.IntInput `pulumi:"memoryMb"`
	// Name of the CUD.
	Name pulumi.StringInput `pulumi:"name"`
	// CUD plan e.g. 'TWELVE_MONTH'.
	Plan pulumi.StringInput `pulumi:"plan"`
	// If enabled, it's possible to assign priorities to the assigned clusters.
	Prioritization pulumi.BoolPtrInput `pulumi:"prioritization"`
	// Region in which the CUD is available.
	Region pulumi.StringInput `pulumi:"region"`
	// Scaling strategy of the commitment in CAST AI. One of: Default, CPUBased, RamBased
	ScalingStrategy pulumi.StringPtrInput `pulumi:"scalingStrategy"`
	// Start timestamp of the CUD.
	StartTimestamp pulumi.StringInput `pulumi:"startTimestamp"`
	// Status of the commitment in CAST AI.
	Status pulumi.StringPtrInput `pulumi:"status"`
	// Type of the CUD, e.g. determines the covered resource type e.g. 'COMPUTE_OPTIMIZED_C2D'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (CommitmentsGcpCudArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CommitmentsGcpCud)(nil)).Elem()
}

func (i CommitmentsGcpCudArgs) ToCommitmentsGcpCudOutput() CommitmentsGcpCudOutput {
	return i.ToCommitmentsGcpCudOutputWithContext(context.Background())
}

func (i CommitmentsGcpCudArgs) ToCommitmentsGcpCudOutputWithContext(ctx context.Context) CommitmentsGcpCudOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CommitmentsGcpCudOutput)
}

// CommitmentsGcpCudArrayInput is an input type that accepts CommitmentsGcpCudArray and CommitmentsGcpCudArrayOutput values.
// You can construct a concrete instance of `CommitmentsGcpCudArrayInput` via:
//
//	CommitmentsGcpCudArray{ CommitmentsGcpCudArgs{...} }
type CommitmentsGcpCudArrayInput interface {
	pulumi.Input

	ToCommitmentsGcpCudArrayOutput() CommitmentsGcpCudArrayOutput
	ToCommitmentsGcpCudArrayOutputWithContext(context.Context) CommitmentsGcpCudArrayOutput
}

type CommitmentsGcpCudArray []CommitmentsGcpCudInput

func (CommitmentsGcpCudArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CommitmentsGcpCud)(nil)).Elem()
}

func (i CommitmentsGcpCudArray) ToCommitmentsGcpCudArrayOutput() CommitmentsGcpCudArrayOutput {
	return i.ToCommitmentsGcpCudArrayOutputWithContext(context.Background())
}

func (i CommitmentsGcpCudArray) ToCommitmentsGcpCudArrayOutputWithContext(ctx context.Context) CommitmentsGcpCudArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CommitmentsGcpCudArrayOutput)
}

type CommitmentsGcpCudOutput struct{ *pulumi.OutputState }

func (CommitmentsGcpCudOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CommitmentsGcpCud)(nil)).Elem()
}

func (o CommitmentsGcpCudOutput) ToCommitmentsGcpCudOutput() CommitmentsGcpCudOutput {
	return o
}

func (o CommitmentsGcpCudOutput) ToCommitmentsGcpCudOutputWithContext(ctx context.Context) CommitmentsGcpCudOutput {
	return o
}

// Allowed usage of the commitment. The value is between 0 (0%) and 1 (100%).
func (o CommitmentsGcpCudOutput) AllowedUsage() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v CommitmentsGcpCud) *float64 { return v.AllowedUsage }).(pulumi.Float64PtrOutput)
}

// List of assigned clusters for the commitment. If prioritization is enabled, the order of the assignments indicates the priority. The first assignment has the highest priority.
func (o CommitmentsGcpCudOutput) Assignments() CommitmentsGcpCudAssignmentArrayOutput {
	return o.ApplyT(func(v CommitmentsGcpCud) []CommitmentsGcpCudAssignment { return v.Assignments }).(CommitmentsGcpCudAssignmentArrayOutput)
}

// Number of CPUs covered by the CUD.
func (o CommitmentsGcpCudOutput) Cpu() pulumi.IntOutput {
	return o.ApplyT(func(v CommitmentsGcpCud) int { return v.Cpu }).(pulumi.IntOutput)
}

// ID of the CUD in GCP.
func (o CommitmentsGcpCudOutput) CudId() pulumi.StringOutput {
	return o.ApplyT(func(v CommitmentsGcpCud) string { return v.CudId }).(pulumi.StringOutput)
}

// Status of the CUD in GCP.
func (o CommitmentsGcpCudOutput) CudStatus() pulumi.StringOutput {
	return o.ApplyT(func(v CommitmentsGcpCud) string { return v.CudStatus }).(pulumi.StringOutput)
}

// End timestamp of the CUD.
func (o CommitmentsGcpCudOutput) EndTimestamp() pulumi.StringOutput {
	return o.ApplyT(func(v CommitmentsGcpCud) string { return v.EndTimestamp }).(pulumi.StringOutput)
}

// ID of the commitment in CAST AI.
func (o CommitmentsGcpCudOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CommitmentsGcpCud) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Amount of memory in MB covered by the CUD.
func (o CommitmentsGcpCudOutput) MemoryMb() pulumi.IntOutput {
	return o.ApplyT(func(v CommitmentsGcpCud) int { return v.MemoryMb }).(pulumi.IntOutput)
}

// Name of the CUD.
func (o CommitmentsGcpCudOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v CommitmentsGcpCud) string { return v.Name }).(pulumi.StringOutput)
}

// CUD plan e.g. 'TWELVE_MONTH'.
func (o CommitmentsGcpCudOutput) Plan() pulumi.StringOutput {
	return o.ApplyT(func(v CommitmentsGcpCud) string { return v.Plan }).(pulumi.StringOutput)
}

// If enabled, it's possible to assign priorities to the assigned clusters.
func (o CommitmentsGcpCudOutput) Prioritization() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CommitmentsGcpCud) *bool { return v.Prioritization }).(pulumi.BoolPtrOutput)
}

// Region in which the CUD is available.
func (o CommitmentsGcpCudOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v CommitmentsGcpCud) string { return v.Region }).(pulumi.StringOutput)
}

// Scaling strategy of the commitment in CAST AI. One of: Default, CPUBased, RamBased
func (o CommitmentsGcpCudOutput) ScalingStrategy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CommitmentsGcpCud) *string { return v.ScalingStrategy }).(pulumi.StringPtrOutput)
}

// Start timestamp of the CUD.
func (o CommitmentsGcpCudOutput) StartTimestamp() pulumi.StringOutput {
	return o.ApplyT(func(v CommitmentsGcpCud) string { return v.StartTimestamp }).(pulumi.StringOutput)
}

// Status of the commitment in CAST AI.
func (o CommitmentsGcpCudOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CommitmentsGcpCud) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// Type of the CUD, e.g. determines the covered resource type e.g. 'COMPUTE_OPTIMIZED_C2D'.
func (o CommitmentsGcpCudOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v CommitmentsGcpCud) string { return v.Type }).(pulumi.StringOutput)
}

type CommitmentsGcpCudArrayOutput struct{ *pulumi.OutputState }

func (CommitmentsGcpCudArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CommitmentsGcpCud)(nil)).Elem()
}

func (o CommitmentsGcpCudArrayOutput) ToCommitmentsGcpCudArrayOutput() CommitmentsGcpCudArrayOutput {
	return o
}

func (o CommitmentsGcpCudArrayOutput) ToCommitmentsGcpCudArrayOutputWithContext(ctx context.Context) CommitmentsGcpCudArrayOutput {
	return o
}

func (o CommitmentsGcpCudArrayOutput) Index(i pulumi.IntInput) CommitmentsGcpCudOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CommitmentsGcpCud {
		return vs[0].([]CommitmentsGcpCud)[vs[1].(int)]
	}).(CommitmentsGcpCudOutput)
}

type CommitmentsGcpCudAssignment struct {
	// ID of the cluster to assign the commitment to.
	ClusterId *string `pulumi:"clusterId"`
	// Priority of the assignment. The lower the value, the higher the priority. 1 is the highest priority.
	Priority *int `pulumi:"priority"`
}

// CommitmentsGcpCudAssignmentInput is an input type that accepts CommitmentsGcpCudAssignmentArgs and CommitmentsGcpCudAssignmentOutput values.
// You can construct a concrete instance of `CommitmentsGcpCudAssignmentInput` via:
//
//	CommitmentsGcpCudAssignmentArgs{...}
type CommitmentsGcpCudAssignmentInput interface {
	pulumi.Input

	ToCommitmentsGcpCudAssignmentOutput() CommitmentsGcpCudAssignmentOutput
	ToCommitmentsGcpCudAssignmentOutputWithContext(context.Context) CommitmentsGcpCudAssignmentOutput
}

type CommitmentsGcpCudAssignmentArgs struct {
	// ID of the cluster to assign the commitment to.
	ClusterId pulumi.StringPtrInput `pulumi:"clusterId"`
	// Priority of the assignment. The lower the value, the higher the priority. 1 is the highest priority.
	Priority pulumi.IntPtrInput `pulumi:"priority"`
}

func (CommitmentsGcpCudAssignmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CommitmentsGcpCudAssignment)(nil)).Elem()
}

func (i CommitmentsGcpCudAssignmentArgs) ToCommitmentsGcpCudAssignmentOutput() CommitmentsGcpCudAssignmentOutput {
	return i.ToCommitmentsGcpCudAssignmentOutputWithContext(context.Background())
}

func (i CommitmentsGcpCudAssignmentArgs) ToCommitmentsGcpCudAssignmentOutputWithContext(ctx context.Context) CommitmentsGcpCudAssignmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CommitmentsGcpCudAssignmentOutput)
}

// CommitmentsGcpCudAssignmentArrayInput is an input type that accepts CommitmentsGcpCudAssignmentArray and CommitmentsGcpCudAssignmentArrayOutput values.
// You can construct a concrete instance of `CommitmentsGcpCudAssignmentArrayInput` via:
//
//	CommitmentsGcpCudAssignmentArray{ CommitmentsGcpCudAssignmentArgs{...} }
type CommitmentsGcpCudAssignmentArrayInput interface {
	pulumi.Input

	ToCommitmentsGcpCudAssignmentArrayOutput() CommitmentsGcpCudAssignmentArrayOutput
	ToCommitmentsGcpCudAssignmentArrayOutputWithContext(context.Context) CommitmentsGcpCudAssignmentArrayOutput
}

type CommitmentsGcpCudAssignmentArray []CommitmentsGcpCudAssignmentInput

func (CommitmentsGcpCudAssignmentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CommitmentsGcpCudAssignment)(nil)).Elem()
}

func (i CommitmentsGcpCudAssignmentArray) ToCommitmentsGcpCudAssignmentArrayOutput() CommitmentsGcpCudAssignmentArrayOutput {
	return i.ToCommitmentsGcpCudAssignmentArrayOutputWithContext(context.Background())
}

func (i CommitmentsGcpCudAssignmentArray) ToCommitmentsGcpCudAssignmentArrayOutputWithContext(ctx context.Context) CommitmentsGcpCudAssignmentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CommitmentsGcpCudAssignmentArrayOutput)
}

type CommitmentsGcpCudAssignmentOutput struct{ *pulumi.OutputState }

func (CommitmentsGcpCudAssignmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CommitmentsGcpCudAssignment)(nil)).Elem()
}

func (o CommitmentsGcpCudAssignmentOutput) ToCommitmentsGcpCudAssignmentOutput() CommitmentsGcpCudAssignmentOutput {
	return o
}

func (o CommitmentsGcpCudAssignmentOutput) ToCommitmentsGcpCudAssignmentOutputWithContext(ctx context.Context) CommitmentsGcpCudAssignmentOutput {
	return o
}

// ID of the cluster to assign the commitment to.
func (o CommitmentsGcpCudAssignmentOutput) ClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CommitmentsGcpCudAssignment) *string { return v.ClusterId }).(pulumi.StringPtrOutput)
}

// Priority of the assignment. The lower the value, the higher the priority. 1 is the highest priority.
func (o CommitmentsGcpCudAssignmentOutput) Priority() pulumi.IntPtrOutput {
	return o.ApplyT(func(v CommitmentsGcpCudAssignment) *int { return v.Priority }).(pulumi.IntPtrOutput)
}

type CommitmentsGcpCudAssignmentArrayOutput struct{ *pulumi.OutputState }

func (CommitmentsGcpCudAssignmentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CommitmentsGcpCudAssignment)(nil)).Elem()
}

func (o CommitmentsGcpCudAssignmentArrayOutput) ToCommitmentsGcpCudAssignmentArrayOutput() CommitmentsGcpCudAssignmentArrayOutput {
	return o
}

func (o CommitmentsGcpCudAssignmentArrayOutput) ToCommitmentsGcpCudAssignmentArrayOutputWithContext(ctx context.Context) CommitmentsGcpCudAssignmentArrayOutput {
	return o
}

func (o CommitmentsGcpCudAssignmentArrayOutput) Index(i pulumi.IntInput) CommitmentsGcpCudAssignmentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CommitmentsGcpCudAssignment {
		return vs[0].([]CommitmentsGcpCudAssignment)[vs[1].(int)]
	}).(CommitmentsGcpCudAssignmentOutput)
}

type ReservationsReservation struct {
	// amount of reserved instances
	Count string `pulumi:"count"`
	// end date of reservation
	EndDate *string `pulumi:"endDate"`
	// reserved instance type
	InstanceType string `pulumi:"instanceType"`
	// unique reservation name in region for specific instance type
	Name string `pulumi:"name"`
	// reservation price
	Price string `pulumi:"price"`
	// reservation cloud provider (gcp, aws, azure)
	Provider string `pulumi:"provider"`
	// reservation region
	Region string `pulumi:"region"`
	// start date of reservation
	StartDate string `pulumi:"startDate"`
	// reservation zone id
	ZoneId *string `pulumi:"zoneId"`
	// reservation zone name
	ZoneName *string `pulumi:"zoneName"`
}

// ReservationsReservationInput is an input type that accepts ReservationsReservationArgs and ReservationsReservationOutput values.
// You can construct a concrete instance of `ReservationsReservationInput` via:
//
//	ReservationsReservationArgs{...}
type ReservationsReservationInput interface {
	pulumi.Input

	ToReservationsReservationOutput() ReservationsReservationOutput
	ToReservationsReservationOutputWithContext(context.Context) ReservationsReservationOutput
}

type ReservationsReservationArgs struct {
	// amount of reserved instances
	Count pulumi.StringInput `pulumi:"count"`
	// end date of reservation
	EndDate pulumi.StringPtrInput `pulumi:"endDate"`
	// reserved instance type
	InstanceType pulumi.StringInput `pulumi:"instanceType"`
	// unique reservation name in region for specific instance type
	Name pulumi.StringInput `pulumi:"name"`
	// reservation price
	Price pulumi.StringInput `pulumi:"price"`
	// reservation cloud provider (gcp, aws, azure)
	Provider pulumi.StringInput `pulumi:"provider"`
	// reservation region
	Region pulumi.StringInput `pulumi:"region"`
	// start date of reservation
	StartDate pulumi.StringInput `pulumi:"startDate"`
	// reservation zone id
	ZoneId pulumi.StringPtrInput `pulumi:"zoneId"`
	// reservation zone name
	ZoneName pulumi.StringPtrInput `pulumi:"zoneName"`
}

func (ReservationsReservationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ReservationsReservation)(nil)).Elem()
}

func (i ReservationsReservationArgs) ToReservationsReservationOutput() ReservationsReservationOutput {
	return i.ToReservationsReservationOutputWithContext(context.Background())
}

func (i ReservationsReservationArgs) ToReservationsReservationOutputWithContext(ctx context.Context) ReservationsReservationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReservationsReservationOutput)
}

// ReservationsReservationArrayInput is an input type that accepts ReservationsReservationArray and ReservationsReservationArrayOutput values.
// You can construct a concrete instance of `ReservationsReservationArrayInput` via:
//
//	ReservationsReservationArray{ ReservationsReservationArgs{...} }
type ReservationsReservationArrayInput interface {
	pulumi.Input

	ToReservationsReservationArrayOutput() ReservationsReservationArrayOutput
	ToReservationsReservationArrayOutputWithContext(context.Context) ReservationsReservationArrayOutput
}

type ReservationsReservationArray []ReservationsReservationInput

func (ReservationsReservationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ReservationsReservation)(nil)).Elem()
}

func (i ReservationsReservationArray) ToReservationsReservationArrayOutput() ReservationsReservationArrayOutput {
	return i.ToReservationsReservationArrayOutputWithContext(context.Background())
}

func (i ReservationsReservationArray) ToReservationsReservationArrayOutputWithContext(ctx context.Context) ReservationsReservationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReservationsReservationArrayOutput)
}

type ReservationsReservationOutput struct{ *pulumi.OutputState }

func (ReservationsReservationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReservationsReservation)(nil)).Elem()
}

func (o ReservationsReservationOutput) ToReservationsReservationOutput() ReservationsReservationOutput {
	return o
}

func (o ReservationsReservationOutput) ToReservationsReservationOutputWithContext(ctx context.Context) ReservationsReservationOutput {
	return o
}

// amount of reserved instances
func (o ReservationsReservationOutput) Count() pulumi.StringOutput {
	return o.ApplyT(func(v ReservationsReservation) string { return v.Count }).(pulumi.StringOutput)
}

// end date of reservation
func (o ReservationsReservationOutput) EndDate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReservationsReservation) *string { return v.EndDate }).(pulumi.StringPtrOutput)
}

// reserved instance type
func (o ReservationsReservationOutput) InstanceType() pulumi.StringOutput {
	return o.ApplyT(func(v ReservationsReservation) string { return v.InstanceType }).(pulumi.StringOutput)
}

// unique reservation name in region for specific instance type
func (o ReservationsReservationOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ReservationsReservation) string { return v.Name }).(pulumi.StringOutput)
}

// reservation price
func (o ReservationsReservationOutput) Price() pulumi.StringOutput {
	return o.ApplyT(func(v ReservationsReservation) string { return v.Price }).(pulumi.StringOutput)
}

// reservation cloud provider (gcp, aws, azure)
func (o ReservationsReservationOutput) Provider() pulumi.StringOutput {
	return o.ApplyT(func(v ReservationsReservation) string { return v.Provider }).(pulumi.StringOutput)
}

// reservation region
func (o ReservationsReservationOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v ReservationsReservation) string { return v.Region }).(pulumi.StringOutput)
}

// start date of reservation
func (o ReservationsReservationOutput) StartDate() pulumi.StringOutput {
	return o.ApplyT(func(v ReservationsReservation) string { return v.StartDate }).(pulumi.StringOutput)
}

// reservation zone id
func (o ReservationsReservationOutput) ZoneId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReservationsReservation) *string { return v.ZoneId }).(pulumi.StringPtrOutput)
}

// reservation zone name
func (o ReservationsReservationOutput) ZoneName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReservationsReservation) *string { return v.ZoneName }).(pulumi.StringPtrOutput)
}

type ReservationsReservationArrayOutput struct{ *pulumi.OutputState }

func (ReservationsReservationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ReservationsReservation)(nil)).Elem()
}

func (o ReservationsReservationArrayOutput) ToReservationsReservationArrayOutput() ReservationsReservationArrayOutput {
	return o
}

func (o ReservationsReservationArrayOutput) ToReservationsReservationArrayOutputWithContext(ctx context.Context) ReservationsReservationArrayOutput {
	return o
}

func (o ReservationsReservationArrayOutput) Index(i pulumi.IntInput) ReservationsReservationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ReservationsReservation {
		return vs[0].([]ReservationsReservation)[vs[1].(int)]
	}).(ReservationsReservationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CommitmentsAzureReservationInput)(nil)).Elem(), CommitmentsAzureReservationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CommitmentsAzureReservationArrayInput)(nil)).Elem(), CommitmentsAzureReservationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CommitmentsAzureReservationAssignmentInput)(nil)).Elem(), CommitmentsAzureReservationAssignmentArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CommitmentsAzureReservationAssignmentArrayInput)(nil)).Elem(), CommitmentsAzureReservationAssignmentArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CommitmentsCommitmentConfigInput)(nil)).Elem(), CommitmentsCommitmentConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CommitmentsCommitmentConfigArrayInput)(nil)).Elem(), CommitmentsCommitmentConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CommitmentsCommitmentConfigAssignmentInput)(nil)).Elem(), CommitmentsCommitmentConfigAssignmentArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CommitmentsCommitmentConfigAssignmentArrayInput)(nil)).Elem(), CommitmentsCommitmentConfigAssignmentArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CommitmentsCommitmentConfigMatcherInput)(nil)).Elem(), CommitmentsCommitmentConfigMatcherArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CommitmentsGcpCudInput)(nil)).Elem(), CommitmentsGcpCudArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CommitmentsGcpCudArrayInput)(nil)).Elem(), CommitmentsGcpCudArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CommitmentsGcpCudAssignmentInput)(nil)).Elem(), CommitmentsGcpCudAssignmentArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CommitmentsGcpCudAssignmentArrayInput)(nil)).Elem(), CommitmentsGcpCudAssignmentArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ReservationsReservationInput)(nil)).Elem(), ReservationsReservationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ReservationsReservationArrayInput)(nil)).Elem(), ReservationsReservationArray{})
	pulumi.RegisterOutputType(CommitmentsAzureReservationOutput{})
	pulumi.RegisterOutputType(CommitmentsAzureReservationArrayOutput{})
	pulumi.RegisterOutputType(CommitmentsAzureReservationAssignmentOutput{})
	pulumi.RegisterOutputType(CommitmentsAzureReservationAssignmentArrayOutput{})
	pulumi.RegisterOutputType(CommitmentsCommitmentConfigOutput{})
	pulumi.RegisterOutputType(CommitmentsCommitmentConfigArrayOutput{})
	pulumi.RegisterOutputType(CommitmentsCommitmentConfigAssignmentOutput{})
	pulumi.RegisterOutputType(CommitmentsCommitmentConfigAssignmentArrayOutput{})
	pulumi.RegisterOutputType(CommitmentsCommitmentConfigMatcherOutput{})
	pulumi.RegisterOutputType(CommitmentsGcpCudOutput{})
	pulumi.RegisterOutputType(CommitmentsGcpCudArrayOutput{})
	pulumi.RegisterOutputType(CommitmentsGcpCudAssignmentOutput{})
	pulumi.RegisterOutputType(CommitmentsGcpCudAssignmentArrayOutput{})
	pulumi.RegisterOutputType(ReservationsReservationOutput{})
	pulumi.RegisterOutputType(ReservationsReservationArrayOutput{})
}
