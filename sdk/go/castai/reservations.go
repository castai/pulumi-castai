// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package castai

import (
	"context"
	"reflect"

	"errors"
	"github.com/castai/pulumi-castai/sdk/go/castai/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Reservations struct {
	pulumi.CustomResourceState

	// organization
	OrganizationId pulumi.StringPtrOutput             `pulumi:"organizationId"`
	Reservations   ReservationsReservationArrayOutput `pulumi:"reservations"`
	// csv file containing reservations
	ReservationsCsv pulumi.StringOutput `pulumi:"reservationsCsv"`
}

// NewReservations registers a new resource with the given unique name, arguments, and options.
func NewReservations(ctx *pulumi.Context,
	name string, args *ReservationsArgs, opts ...pulumi.ResourceOption) (*Reservations, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ReservationsCsv == nil {
		return nil, errors.New("invalid value for required argument 'ReservationsCsv'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Reservations
	err := ctx.RegisterResource("castai:index:Reservations", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetReservations gets an existing Reservations resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetReservations(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ReservationsState, opts ...pulumi.ResourceOption) (*Reservations, error) {
	var resource Reservations
	err := ctx.ReadResource("castai:index:Reservations", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Reservations resources.
type reservationsState struct {
	// organization
	OrganizationId *string                   `pulumi:"organizationId"`
	Reservations   []ReservationsReservation `pulumi:"reservations"`
	// csv file containing reservations
	ReservationsCsv *string `pulumi:"reservationsCsv"`
}

type ReservationsState struct {
	// organization
	OrganizationId pulumi.StringPtrInput
	Reservations   ReservationsReservationArrayInput
	// csv file containing reservations
	ReservationsCsv pulumi.StringPtrInput
}

func (ReservationsState) ElementType() reflect.Type {
	return reflect.TypeOf((*reservationsState)(nil)).Elem()
}

type reservationsArgs struct {
	// organization
	OrganizationId *string `pulumi:"organizationId"`
	// csv file containing reservations
	ReservationsCsv string `pulumi:"reservationsCsv"`
}

// The set of arguments for constructing a Reservations resource.
type ReservationsArgs struct {
	// organization
	OrganizationId pulumi.StringPtrInput
	// csv file containing reservations
	ReservationsCsv pulumi.StringInput
}

func (ReservationsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*reservationsArgs)(nil)).Elem()
}

type ReservationsInput interface {
	pulumi.Input

	ToReservationsOutput() ReservationsOutput
	ToReservationsOutputWithContext(ctx context.Context) ReservationsOutput
}

func (*Reservations) ElementType() reflect.Type {
	return reflect.TypeOf((**Reservations)(nil)).Elem()
}

func (i *Reservations) ToReservationsOutput() ReservationsOutput {
	return i.ToReservationsOutputWithContext(context.Background())
}

func (i *Reservations) ToReservationsOutputWithContext(ctx context.Context) ReservationsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReservationsOutput)
}

// ReservationsArrayInput is an input type that accepts ReservationsArray and ReservationsArrayOutput values.
// You can construct a concrete instance of `ReservationsArrayInput` via:
//
//	ReservationsArray{ ReservationsArgs{...} }
type ReservationsArrayInput interface {
	pulumi.Input

	ToReservationsArrayOutput() ReservationsArrayOutput
	ToReservationsArrayOutputWithContext(context.Context) ReservationsArrayOutput
}

type ReservationsArray []ReservationsInput

func (ReservationsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Reservations)(nil)).Elem()
}

func (i ReservationsArray) ToReservationsArrayOutput() ReservationsArrayOutput {
	return i.ToReservationsArrayOutputWithContext(context.Background())
}

func (i ReservationsArray) ToReservationsArrayOutputWithContext(ctx context.Context) ReservationsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReservationsArrayOutput)
}

// ReservationsMapInput is an input type that accepts ReservationsMap and ReservationsMapOutput values.
// You can construct a concrete instance of `ReservationsMapInput` via:
//
//	ReservationsMap{ "key": ReservationsArgs{...} }
type ReservationsMapInput interface {
	pulumi.Input

	ToReservationsMapOutput() ReservationsMapOutput
	ToReservationsMapOutputWithContext(context.Context) ReservationsMapOutput
}

type ReservationsMap map[string]ReservationsInput

func (ReservationsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Reservations)(nil)).Elem()
}

func (i ReservationsMap) ToReservationsMapOutput() ReservationsMapOutput {
	return i.ToReservationsMapOutputWithContext(context.Background())
}

func (i ReservationsMap) ToReservationsMapOutputWithContext(ctx context.Context) ReservationsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReservationsMapOutput)
}

type ReservationsOutput struct{ *pulumi.OutputState }

func (ReservationsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Reservations)(nil)).Elem()
}

func (o ReservationsOutput) ToReservationsOutput() ReservationsOutput {
	return o
}

func (o ReservationsOutput) ToReservationsOutputWithContext(ctx context.Context) ReservationsOutput {
	return o
}

// organization
func (o ReservationsOutput) OrganizationId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Reservations) pulumi.StringPtrOutput { return v.OrganizationId }).(pulumi.StringPtrOutput)
}

func (o ReservationsOutput) Reservations() ReservationsReservationArrayOutput {
	return o.ApplyT(func(v *Reservations) ReservationsReservationArrayOutput { return v.Reservations }).(ReservationsReservationArrayOutput)
}

// csv file containing reservations
func (o ReservationsOutput) ReservationsCsv() pulumi.StringOutput {
	return o.ApplyT(func(v *Reservations) pulumi.StringOutput { return v.ReservationsCsv }).(pulumi.StringOutput)
}

type ReservationsArrayOutput struct{ *pulumi.OutputState }

func (ReservationsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Reservations)(nil)).Elem()
}

func (o ReservationsArrayOutput) ToReservationsArrayOutput() ReservationsArrayOutput {
	return o
}

func (o ReservationsArrayOutput) ToReservationsArrayOutputWithContext(ctx context.Context) ReservationsArrayOutput {
	return o
}

func (o ReservationsArrayOutput) Index(i pulumi.IntInput) ReservationsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Reservations {
		return vs[0].([]*Reservations)[vs[1].(int)]
	}).(ReservationsOutput)
}

type ReservationsMapOutput struct{ *pulumi.OutputState }

func (ReservationsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Reservations)(nil)).Elem()
}

func (o ReservationsMapOutput) ToReservationsMapOutput() ReservationsMapOutput {
	return o
}

func (o ReservationsMapOutput) ToReservationsMapOutputWithContext(ctx context.Context) ReservationsMapOutput {
	return o
}

func (o ReservationsMapOutput) MapIndex(k pulumi.StringInput) ReservationsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Reservations {
		return vs[0].(map[string]*Reservations)[vs[1].(string)]
	}).(ReservationsOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ReservationsInput)(nil)).Elem(), &Reservations{})
	pulumi.RegisterInputType(reflect.TypeOf((*ReservationsArrayInput)(nil)).Elem(), ReservationsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ReservationsMapInput)(nil)).Elem(), ReservationsMap{})
	pulumi.RegisterOutputType(ReservationsOutput{})
	pulumi.RegisterOutputType(ReservationsArrayOutput{})
	pulumi.RegisterOutputType(ReservationsMapOutput{})
}
