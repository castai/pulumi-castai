// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package iam

import (
	"context"
	"reflect"

	"github.com/castai/pulumi-castai/sdk/go/castai/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

type EnterpriseRoleBindingScopes struct {
	// Cluster scopes.
	Clusters []EnterpriseRoleBindingScopesCluster `pulumi:"clusters"`
	// Organization scopes.
	Organizations []EnterpriseRoleBindingScopesOrganization `pulumi:"organizations"`
}

// EnterpriseRoleBindingScopesInput is an input type that accepts EnterpriseRoleBindingScopesArgs and EnterpriseRoleBindingScopesOutput values.
// You can construct a concrete instance of `EnterpriseRoleBindingScopesInput` via:
//
//	EnterpriseRoleBindingScopesArgs{...}
type EnterpriseRoleBindingScopesInput interface {
	pulumi.Input

	ToEnterpriseRoleBindingScopesOutput() EnterpriseRoleBindingScopesOutput
	ToEnterpriseRoleBindingScopesOutputWithContext(context.Context) EnterpriseRoleBindingScopesOutput
}

type EnterpriseRoleBindingScopesArgs struct {
	// Cluster scopes.
	Clusters EnterpriseRoleBindingScopesClusterArrayInput `pulumi:"clusters"`
	// Organization scopes.
	Organizations EnterpriseRoleBindingScopesOrganizationArrayInput `pulumi:"organizations"`
}

func (EnterpriseRoleBindingScopesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EnterpriseRoleBindingScopes)(nil)).Elem()
}

func (i EnterpriseRoleBindingScopesArgs) ToEnterpriseRoleBindingScopesOutput() EnterpriseRoleBindingScopesOutput {
	return i.ToEnterpriseRoleBindingScopesOutputWithContext(context.Background())
}

func (i EnterpriseRoleBindingScopesArgs) ToEnterpriseRoleBindingScopesOutputWithContext(ctx context.Context) EnterpriseRoleBindingScopesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnterpriseRoleBindingScopesOutput)
}

func (i EnterpriseRoleBindingScopesArgs) ToEnterpriseRoleBindingScopesPtrOutput() EnterpriseRoleBindingScopesPtrOutput {
	return i.ToEnterpriseRoleBindingScopesPtrOutputWithContext(context.Background())
}

func (i EnterpriseRoleBindingScopesArgs) ToEnterpriseRoleBindingScopesPtrOutputWithContext(ctx context.Context) EnterpriseRoleBindingScopesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnterpriseRoleBindingScopesOutput).ToEnterpriseRoleBindingScopesPtrOutputWithContext(ctx)
}

// EnterpriseRoleBindingScopesPtrInput is an input type that accepts EnterpriseRoleBindingScopesArgs, EnterpriseRoleBindingScopesPtr and EnterpriseRoleBindingScopesPtrOutput values.
// You can construct a concrete instance of `EnterpriseRoleBindingScopesPtrInput` via:
//
//	        EnterpriseRoleBindingScopesArgs{...}
//
//	or:
//
//	        nil
type EnterpriseRoleBindingScopesPtrInput interface {
	pulumi.Input

	ToEnterpriseRoleBindingScopesPtrOutput() EnterpriseRoleBindingScopesPtrOutput
	ToEnterpriseRoleBindingScopesPtrOutputWithContext(context.Context) EnterpriseRoleBindingScopesPtrOutput
}

type enterpriseRoleBindingScopesPtrType EnterpriseRoleBindingScopesArgs

func EnterpriseRoleBindingScopesPtr(v *EnterpriseRoleBindingScopesArgs) EnterpriseRoleBindingScopesPtrInput {
	return (*enterpriseRoleBindingScopesPtrType)(v)
}

func (*enterpriseRoleBindingScopesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EnterpriseRoleBindingScopes)(nil)).Elem()
}

func (i *enterpriseRoleBindingScopesPtrType) ToEnterpriseRoleBindingScopesPtrOutput() EnterpriseRoleBindingScopesPtrOutput {
	return i.ToEnterpriseRoleBindingScopesPtrOutputWithContext(context.Background())
}

func (i *enterpriseRoleBindingScopesPtrType) ToEnterpriseRoleBindingScopesPtrOutputWithContext(ctx context.Context) EnterpriseRoleBindingScopesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnterpriseRoleBindingScopesPtrOutput)
}

type EnterpriseRoleBindingScopesOutput struct{ *pulumi.OutputState }

func (EnterpriseRoleBindingScopesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EnterpriseRoleBindingScopes)(nil)).Elem()
}

func (o EnterpriseRoleBindingScopesOutput) ToEnterpriseRoleBindingScopesOutput() EnterpriseRoleBindingScopesOutput {
	return o
}

func (o EnterpriseRoleBindingScopesOutput) ToEnterpriseRoleBindingScopesOutputWithContext(ctx context.Context) EnterpriseRoleBindingScopesOutput {
	return o
}

func (o EnterpriseRoleBindingScopesOutput) ToEnterpriseRoleBindingScopesPtrOutput() EnterpriseRoleBindingScopesPtrOutput {
	return o.ToEnterpriseRoleBindingScopesPtrOutputWithContext(context.Background())
}

func (o EnterpriseRoleBindingScopesOutput) ToEnterpriseRoleBindingScopesPtrOutputWithContext(ctx context.Context) EnterpriseRoleBindingScopesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EnterpriseRoleBindingScopes) *EnterpriseRoleBindingScopes {
		return &v
	}).(EnterpriseRoleBindingScopesPtrOutput)
}

// Cluster scopes.
func (o EnterpriseRoleBindingScopesOutput) Clusters() EnterpriseRoleBindingScopesClusterArrayOutput {
	return o.ApplyT(func(v EnterpriseRoleBindingScopes) []EnterpriseRoleBindingScopesCluster { return v.Clusters }).(EnterpriseRoleBindingScopesClusterArrayOutput)
}

// Organization scopes.
func (o EnterpriseRoleBindingScopesOutput) Organizations() EnterpriseRoleBindingScopesOrganizationArrayOutput {
	return o.ApplyT(func(v EnterpriseRoleBindingScopes) []EnterpriseRoleBindingScopesOrganization { return v.Organizations }).(EnterpriseRoleBindingScopesOrganizationArrayOutput)
}

type EnterpriseRoleBindingScopesPtrOutput struct{ *pulumi.OutputState }

func (EnterpriseRoleBindingScopesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EnterpriseRoleBindingScopes)(nil)).Elem()
}

func (o EnterpriseRoleBindingScopesPtrOutput) ToEnterpriseRoleBindingScopesPtrOutput() EnterpriseRoleBindingScopesPtrOutput {
	return o
}

func (o EnterpriseRoleBindingScopesPtrOutput) ToEnterpriseRoleBindingScopesPtrOutputWithContext(ctx context.Context) EnterpriseRoleBindingScopesPtrOutput {
	return o
}

func (o EnterpriseRoleBindingScopesPtrOutput) Elem() EnterpriseRoleBindingScopesOutput {
	return o.ApplyT(func(v *EnterpriseRoleBindingScopes) EnterpriseRoleBindingScopes {
		if v != nil {
			return *v
		}
		var ret EnterpriseRoleBindingScopes
		return ret
	}).(EnterpriseRoleBindingScopesOutput)
}

// Cluster scopes.
func (o EnterpriseRoleBindingScopesPtrOutput) Clusters() EnterpriseRoleBindingScopesClusterArrayOutput {
	return o.ApplyT(func(v *EnterpriseRoleBindingScopes) []EnterpriseRoleBindingScopesCluster {
		if v == nil {
			return nil
		}
		return v.Clusters
	}).(EnterpriseRoleBindingScopesClusterArrayOutput)
}

// Organization scopes.
func (o EnterpriseRoleBindingScopesPtrOutput) Organizations() EnterpriseRoleBindingScopesOrganizationArrayOutput {
	return o.ApplyT(func(v *EnterpriseRoleBindingScopes) []EnterpriseRoleBindingScopesOrganization {
		if v == nil {
			return nil
		}
		return v.Organizations
	}).(EnterpriseRoleBindingScopesOrganizationArrayOutput)
}

type EnterpriseRoleBindingScopesCluster struct {
	// Cluster ID.
	Id string `pulumi:"id"`
}

// EnterpriseRoleBindingScopesClusterInput is an input type that accepts EnterpriseRoleBindingScopesClusterArgs and EnterpriseRoleBindingScopesClusterOutput values.
// You can construct a concrete instance of `EnterpriseRoleBindingScopesClusterInput` via:
//
//	EnterpriseRoleBindingScopesClusterArgs{...}
type EnterpriseRoleBindingScopesClusterInput interface {
	pulumi.Input

	ToEnterpriseRoleBindingScopesClusterOutput() EnterpriseRoleBindingScopesClusterOutput
	ToEnterpriseRoleBindingScopesClusterOutputWithContext(context.Context) EnterpriseRoleBindingScopesClusterOutput
}

type EnterpriseRoleBindingScopesClusterArgs struct {
	// Cluster ID.
	Id pulumi.StringInput `pulumi:"id"`
}

func (EnterpriseRoleBindingScopesClusterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EnterpriseRoleBindingScopesCluster)(nil)).Elem()
}

func (i EnterpriseRoleBindingScopesClusterArgs) ToEnterpriseRoleBindingScopesClusterOutput() EnterpriseRoleBindingScopesClusterOutput {
	return i.ToEnterpriseRoleBindingScopesClusterOutputWithContext(context.Background())
}

func (i EnterpriseRoleBindingScopesClusterArgs) ToEnterpriseRoleBindingScopesClusterOutputWithContext(ctx context.Context) EnterpriseRoleBindingScopesClusterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnterpriseRoleBindingScopesClusterOutput)
}

// EnterpriseRoleBindingScopesClusterArrayInput is an input type that accepts EnterpriseRoleBindingScopesClusterArray and EnterpriseRoleBindingScopesClusterArrayOutput values.
// You can construct a concrete instance of `EnterpriseRoleBindingScopesClusterArrayInput` via:
//
//	EnterpriseRoleBindingScopesClusterArray{ EnterpriseRoleBindingScopesClusterArgs{...} }
type EnterpriseRoleBindingScopesClusterArrayInput interface {
	pulumi.Input

	ToEnterpriseRoleBindingScopesClusterArrayOutput() EnterpriseRoleBindingScopesClusterArrayOutput
	ToEnterpriseRoleBindingScopesClusterArrayOutputWithContext(context.Context) EnterpriseRoleBindingScopesClusterArrayOutput
}

type EnterpriseRoleBindingScopesClusterArray []EnterpriseRoleBindingScopesClusterInput

func (EnterpriseRoleBindingScopesClusterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EnterpriseRoleBindingScopesCluster)(nil)).Elem()
}

func (i EnterpriseRoleBindingScopesClusterArray) ToEnterpriseRoleBindingScopesClusterArrayOutput() EnterpriseRoleBindingScopesClusterArrayOutput {
	return i.ToEnterpriseRoleBindingScopesClusterArrayOutputWithContext(context.Background())
}

func (i EnterpriseRoleBindingScopesClusterArray) ToEnterpriseRoleBindingScopesClusterArrayOutputWithContext(ctx context.Context) EnterpriseRoleBindingScopesClusterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnterpriseRoleBindingScopesClusterArrayOutput)
}

type EnterpriseRoleBindingScopesClusterOutput struct{ *pulumi.OutputState }

func (EnterpriseRoleBindingScopesClusterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EnterpriseRoleBindingScopesCluster)(nil)).Elem()
}

func (o EnterpriseRoleBindingScopesClusterOutput) ToEnterpriseRoleBindingScopesClusterOutput() EnterpriseRoleBindingScopesClusterOutput {
	return o
}

func (o EnterpriseRoleBindingScopesClusterOutput) ToEnterpriseRoleBindingScopesClusterOutputWithContext(ctx context.Context) EnterpriseRoleBindingScopesClusterOutput {
	return o
}

// Cluster ID.
func (o EnterpriseRoleBindingScopesClusterOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v EnterpriseRoleBindingScopesCluster) string { return v.Id }).(pulumi.StringOutput)
}

type EnterpriseRoleBindingScopesClusterArrayOutput struct{ *pulumi.OutputState }

func (EnterpriseRoleBindingScopesClusterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EnterpriseRoleBindingScopesCluster)(nil)).Elem()
}

func (o EnterpriseRoleBindingScopesClusterArrayOutput) ToEnterpriseRoleBindingScopesClusterArrayOutput() EnterpriseRoleBindingScopesClusterArrayOutput {
	return o
}

func (o EnterpriseRoleBindingScopesClusterArrayOutput) ToEnterpriseRoleBindingScopesClusterArrayOutputWithContext(ctx context.Context) EnterpriseRoleBindingScopesClusterArrayOutput {
	return o
}

func (o EnterpriseRoleBindingScopesClusterArrayOutput) Index(i pulumi.IntInput) EnterpriseRoleBindingScopesClusterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EnterpriseRoleBindingScopesCluster {
		return vs[0].([]EnterpriseRoleBindingScopesCluster)[vs[1].(int)]
	}).(EnterpriseRoleBindingScopesClusterOutput)
}

type EnterpriseRoleBindingScopesOrganization struct {
	// Organization ID.
	Id string `pulumi:"id"`
}

// EnterpriseRoleBindingScopesOrganizationInput is an input type that accepts EnterpriseRoleBindingScopesOrganizationArgs and EnterpriseRoleBindingScopesOrganizationOutput values.
// You can construct a concrete instance of `EnterpriseRoleBindingScopesOrganizationInput` via:
//
//	EnterpriseRoleBindingScopesOrganizationArgs{...}
type EnterpriseRoleBindingScopesOrganizationInput interface {
	pulumi.Input

	ToEnterpriseRoleBindingScopesOrganizationOutput() EnterpriseRoleBindingScopesOrganizationOutput
	ToEnterpriseRoleBindingScopesOrganizationOutputWithContext(context.Context) EnterpriseRoleBindingScopesOrganizationOutput
}

type EnterpriseRoleBindingScopesOrganizationArgs struct {
	// Organization ID.
	Id pulumi.StringInput `pulumi:"id"`
}

func (EnterpriseRoleBindingScopesOrganizationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EnterpriseRoleBindingScopesOrganization)(nil)).Elem()
}

func (i EnterpriseRoleBindingScopesOrganizationArgs) ToEnterpriseRoleBindingScopesOrganizationOutput() EnterpriseRoleBindingScopesOrganizationOutput {
	return i.ToEnterpriseRoleBindingScopesOrganizationOutputWithContext(context.Background())
}

func (i EnterpriseRoleBindingScopesOrganizationArgs) ToEnterpriseRoleBindingScopesOrganizationOutputWithContext(ctx context.Context) EnterpriseRoleBindingScopesOrganizationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnterpriseRoleBindingScopesOrganizationOutput)
}

// EnterpriseRoleBindingScopesOrganizationArrayInput is an input type that accepts EnterpriseRoleBindingScopesOrganizationArray and EnterpriseRoleBindingScopesOrganizationArrayOutput values.
// You can construct a concrete instance of `EnterpriseRoleBindingScopesOrganizationArrayInput` via:
//
//	EnterpriseRoleBindingScopesOrganizationArray{ EnterpriseRoleBindingScopesOrganizationArgs{...} }
type EnterpriseRoleBindingScopesOrganizationArrayInput interface {
	pulumi.Input

	ToEnterpriseRoleBindingScopesOrganizationArrayOutput() EnterpriseRoleBindingScopesOrganizationArrayOutput
	ToEnterpriseRoleBindingScopesOrganizationArrayOutputWithContext(context.Context) EnterpriseRoleBindingScopesOrganizationArrayOutput
}

type EnterpriseRoleBindingScopesOrganizationArray []EnterpriseRoleBindingScopesOrganizationInput

func (EnterpriseRoleBindingScopesOrganizationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EnterpriseRoleBindingScopesOrganization)(nil)).Elem()
}

func (i EnterpriseRoleBindingScopesOrganizationArray) ToEnterpriseRoleBindingScopesOrganizationArrayOutput() EnterpriseRoleBindingScopesOrganizationArrayOutput {
	return i.ToEnterpriseRoleBindingScopesOrganizationArrayOutputWithContext(context.Background())
}

func (i EnterpriseRoleBindingScopesOrganizationArray) ToEnterpriseRoleBindingScopesOrganizationArrayOutputWithContext(ctx context.Context) EnterpriseRoleBindingScopesOrganizationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnterpriseRoleBindingScopesOrganizationArrayOutput)
}

type EnterpriseRoleBindingScopesOrganizationOutput struct{ *pulumi.OutputState }

func (EnterpriseRoleBindingScopesOrganizationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EnterpriseRoleBindingScopesOrganization)(nil)).Elem()
}

func (o EnterpriseRoleBindingScopesOrganizationOutput) ToEnterpriseRoleBindingScopesOrganizationOutput() EnterpriseRoleBindingScopesOrganizationOutput {
	return o
}

func (o EnterpriseRoleBindingScopesOrganizationOutput) ToEnterpriseRoleBindingScopesOrganizationOutputWithContext(ctx context.Context) EnterpriseRoleBindingScopesOrganizationOutput {
	return o
}

// Organization ID.
func (o EnterpriseRoleBindingScopesOrganizationOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v EnterpriseRoleBindingScopesOrganization) string { return v.Id }).(pulumi.StringOutput)
}

type EnterpriseRoleBindingScopesOrganizationArrayOutput struct{ *pulumi.OutputState }

func (EnterpriseRoleBindingScopesOrganizationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EnterpriseRoleBindingScopesOrganization)(nil)).Elem()
}

func (o EnterpriseRoleBindingScopesOrganizationArrayOutput) ToEnterpriseRoleBindingScopesOrganizationArrayOutput() EnterpriseRoleBindingScopesOrganizationArrayOutput {
	return o
}

func (o EnterpriseRoleBindingScopesOrganizationArrayOutput) ToEnterpriseRoleBindingScopesOrganizationArrayOutputWithContext(ctx context.Context) EnterpriseRoleBindingScopesOrganizationArrayOutput {
	return o
}

func (o EnterpriseRoleBindingScopesOrganizationArrayOutput) Index(i pulumi.IntInput) EnterpriseRoleBindingScopesOrganizationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EnterpriseRoleBindingScopesOrganization {
		return vs[0].([]EnterpriseRoleBindingScopesOrganization)[vs[1].(int)]
	}).(EnterpriseRoleBindingScopesOrganizationOutput)
}

type EnterpriseRoleBindingSubjects struct {
	// Group subjects.
	Groups []EnterpriseRoleBindingSubjectsGroup `pulumi:"groups"`
	// Service account subjects.
	ServiceAccounts []EnterpriseRoleBindingSubjectsServiceAccount `pulumi:"serviceAccounts"`
	// User subjects.
	Users []EnterpriseRoleBindingSubjectsUser `pulumi:"users"`
}

// EnterpriseRoleBindingSubjectsInput is an input type that accepts EnterpriseRoleBindingSubjectsArgs and EnterpriseRoleBindingSubjectsOutput values.
// You can construct a concrete instance of `EnterpriseRoleBindingSubjectsInput` via:
//
//	EnterpriseRoleBindingSubjectsArgs{...}
type EnterpriseRoleBindingSubjectsInput interface {
	pulumi.Input

	ToEnterpriseRoleBindingSubjectsOutput() EnterpriseRoleBindingSubjectsOutput
	ToEnterpriseRoleBindingSubjectsOutputWithContext(context.Context) EnterpriseRoleBindingSubjectsOutput
}

type EnterpriseRoleBindingSubjectsArgs struct {
	// Group subjects.
	Groups EnterpriseRoleBindingSubjectsGroupArrayInput `pulumi:"groups"`
	// Service account subjects.
	ServiceAccounts EnterpriseRoleBindingSubjectsServiceAccountArrayInput `pulumi:"serviceAccounts"`
	// User subjects.
	Users EnterpriseRoleBindingSubjectsUserArrayInput `pulumi:"users"`
}

func (EnterpriseRoleBindingSubjectsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EnterpriseRoleBindingSubjects)(nil)).Elem()
}

func (i EnterpriseRoleBindingSubjectsArgs) ToEnterpriseRoleBindingSubjectsOutput() EnterpriseRoleBindingSubjectsOutput {
	return i.ToEnterpriseRoleBindingSubjectsOutputWithContext(context.Background())
}

func (i EnterpriseRoleBindingSubjectsArgs) ToEnterpriseRoleBindingSubjectsOutputWithContext(ctx context.Context) EnterpriseRoleBindingSubjectsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnterpriseRoleBindingSubjectsOutput)
}

func (i EnterpriseRoleBindingSubjectsArgs) ToEnterpriseRoleBindingSubjectsPtrOutput() EnterpriseRoleBindingSubjectsPtrOutput {
	return i.ToEnterpriseRoleBindingSubjectsPtrOutputWithContext(context.Background())
}

func (i EnterpriseRoleBindingSubjectsArgs) ToEnterpriseRoleBindingSubjectsPtrOutputWithContext(ctx context.Context) EnterpriseRoleBindingSubjectsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnterpriseRoleBindingSubjectsOutput).ToEnterpriseRoleBindingSubjectsPtrOutputWithContext(ctx)
}

// EnterpriseRoleBindingSubjectsPtrInput is an input type that accepts EnterpriseRoleBindingSubjectsArgs, EnterpriseRoleBindingSubjectsPtr and EnterpriseRoleBindingSubjectsPtrOutput values.
// You can construct a concrete instance of `EnterpriseRoleBindingSubjectsPtrInput` via:
//
//	        EnterpriseRoleBindingSubjectsArgs{...}
//
//	or:
//
//	        nil
type EnterpriseRoleBindingSubjectsPtrInput interface {
	pulumi.Input

	ToEnterpriseRoleBindingSubjectsPtrOutput() EnterpriseRoleBindingSubjectsPtrOutput
	ToEnterpriseRoleBindingSubjectsPtrOutputWithContext(context.Context) EnterpriseRoleBindingSubjectsPtrOutput
}

type enterpriseRoleBindingSubjectsPtrType EnterpriseRoleBindingSubjectsArgs

func EnterpriseRoleBindingSubjectsPtr(v *EnterpriseRoleBindingSubjectsArgs) EnterpriseRoleBindingSubjectsPtrInput {
	return (*enterpriseRoleBindingSubjectsPtrType)(v)
}

func (*enterpriseRoleBindingSubjectsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EnterpriseRoleBindingSubjects)(nil)).Elem()
}

func (i *enterpriseRoleBindingSubjectsPtrType) ToEnterpriseRoleBindingSubjectsPtrOutput() EnterpriseRoleBindingSubjectsPtrOutput {
	return i.ToEnterpriseRoleBindingSubjectsPtrOutputWithContext(context.Background())
}

func (i *enterpriseRoleBindingSubjectsPtrType) ToEnterpriseRoleBindingSubjectsPtrOutputWithContext(ctx context.Context) EnterpriseRoleBindingSubjectsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnterpriseRoleBindingSubjectsPtrOutput)
}

type EnterpriseRoleBindingSubjectsOutput struct{ *pulumi.OutputState }

func (EnterpriseRoleBindingSubjectsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EnterpriseRoleBindingSubjects)(nil)).Elem()
}

func (o EnterpriseRoleBindingSubjectsOutput) ToEnterpriseRoleBindingSubjectsOutput() EnterpriseRoleBindingSubjectsOutput {
	return o
}

func (o EnterpriseRoleBindingSubjectsOutput) ToEnterpriseRoleBindingSubjectsOutputWithContext(ctx context.Context) EnterpriseRoleBindingSubjectsOutput {
	return o
}

func (o EnterpriseRoleBindingSubjectsOutput) ToEnterpriseRoleBindingSubjectsPtrOutput() EnterpriseRoleBindingSubjectsPtrOutput {
	return o.ToEnterpriseRoleBindingSubjectsPtrOutputWithContext(context.Background())
}

func (o EnterpriseRoleBindingSubjectsOutput) ToEnterpriseRoleBindingSubjectsPtrOutputWithContext(ctx context.Context) EnterpriseRoleBindingSubjectsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EnterpriseRoleBindingSubjects) *EnterpriseRoleBindingSubjects {
		return &v
	}).(EnterpriseRoleBindingSubjectsPtrOutput)
}

// Group subjects.
func (o EnterpriseRoleBindingSubjectsOutput) Groups() EnterpriseRoleBindingSubjectsGroupArrayOutput {
	return o.ApplyT(func(v EnterpriseRoleBindingSubjects) []EnterpriseRoleBindingSubjectsGroup { return v.Groups }).(EnterpriseRoleBindingSubjectsGroupArrayOutput)
}

// Service account subjects.
func (o EnterpriseRoleBindingSubjectsOutput) ServiceAccounts() EnterpriseRoleBindingSubjectsServiceAccountArrayOutput {
	return o.ApplyT(func(v EnterpriseRoleBindingSubjects) []EnterpriseRoleBindingSubjectsServiceAccount {
		return v.ServiceAccounts
	}).(EnterpriseRoleBindingSubjectsServiceAccountArrayOutput)
}

// User subjects.
func (o EnterpriseRoleBindingSubjectsOutput) Users() EnterpriseRoleBindingSubjectsUserArrayOutput {
	return o.ApplyT(func(v EnterpriseRoleBindingSubjects) []EnterpriseRoleBindingSubjectsUser { return v.Users }).(EnterpriseRoleBindingSubjectsUserArrayOutput)
}

type EnterpriseRoleBindingSubjectsPtrOutput struct{ *pulumi.OutputState }

func (EnterpriseRoleBindingSubjectsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EnterpriseRoleBindingSubjects)(nil)).Elem()
}

func (o EnterpriseRoleBindingSubjectsPtrOutput) ToEnterpriseRoleBindingSubjectsPtrOutput() EnterpriseRoleBindingSubjectsPtrOutput {
	return o
}

func (o EnterpriseRoleBindingSubjectsPtrOutput) ToEnterpriseRoleBindingSubjectsPtrOutputWithContext(ctx context.Context) EnterpriseRoleBindingSubjectsPtrOutput {
	return o
}

func (o EnterpriseRoleBindingSubjectsPtrOutput) Elem() EnterpriseRoleBindingSubjectsOutput {
	return o.ApplyT(func(v *EnterpriseRoleBindingSubjects) EnterpriseRoleBindingSubjects {
		if v != nil {
			return *v
		}
		var ret EnterpriseRoleBindingSubjects
		return ret
	}).(EnterpriseRoleBindingSubjectsOutput)
}

// Group subjects.
func (o EnterpriseRoleBindingSubjectsPtrOutput) Groups() EnterpriseRoleBindingSubjectsGroupArrayOutput {
	return o.ApplyT(func(v *EnterpriseRoleBindingSubjects) []EnterpriseRoleBindingSubjectsGroup {
		if v == nil {
			return nil
		}
		return v.Groups
	}).(EnterpriseRoleBindingSubjectsGroupArrayOutput)
}

// Service account subjects.
func (o EnterpriseRoleBindingSubjectsPtrOutput) ServiceAccounts() EnterpriseRoleBindingSubjectsServiceAccountArrayOutput {
	return o.ApplyT(func(v *EnterpriseRoleBindingSubjects) []EnterpriseRoleBindingSubjectsServiceAccount {
		if v == nil {
			return nil
		}
		return v.ServiceAccounts
	}).(EnterpriseRoleBindingSubjectsServiceAccountArrayOutput)
}

// User subjects.
func (o EnterpriseRoleBindingSubjectsPtrOutput) Users() EnterpriseRoleBindingSubjectsUserArrayOutput {
	return o.ApplyT(func(v *EnterpriseRoleBindingSubjects) []EnterpriseRoleBindingSubjectsUser {
		if v == nil {
			return nil
		}
		return v.Users
	}).(EnterpriseRoleBindingSubjectsUserArrayOutput)
}

type EnterpriseRoleBindingSubjectsGroup struct {
	// Group ID.
	Id string `pulumi:"id"`
}

// EnterpriseRoleBindingSubjectsGroupInput is an input type that accepts EnterpriseRoleBindingSubjectsGroupArgs and EnterpriseRoleBindingSubjectsGroupOutput values.
// You can construct a concrete instance of `EnterpriseRoleBindingSubjectsGroupInput` via:
//
//	EnterpriseRoleBindingSubjectsGroupArgs{...}
type EnterpriseRoleBindingSubjectsGroupInput interface {
	pulumi.Input

	ToEnterpriseRoleBindingSubjectsGroupOutput() EnterpriseRoleBindingSubjectsGroupOutput
	ToEnterpriseRoleBindingSubjectsGroupOutputWithContext(context.Context) EnterpriseRoleBindingSubjectsGroupOutput
}

type EnterpriseRoleBindingSubjectsGroupArgs struct {
	// Group ID.
	Id pulumi.StringInput `pulumi:"id"`
}

func (EnterpriseRoleBindingSubjectsGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EnterpriseRoleBindingSubjectsGroup)(nil)).Elem()
}

func (i EnterpriseRoleBindingSubjectsGroupArgs) ToEnterpriseRoleBindingSubjectsGroupOutput() EnterpriseRoleBindingSubjectsGroupOutput {
	return i.ToEnterpriseRoleBindingSubjectsGroupOutputWithContext(context.Background())
}

func (i EnterpriseRoleBindingSubjectsGroupArgs) ToEnterpriseRoleBindingSubjectsGroupOutputWithContext(ctx context.Context) EnterpriseRoleBindingSubjectsGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnterpriseRoleBindingSubjectsGroupOutput)
}

// EnterpriseRoleBindingSubjectsGroupArrayInput is an input type that accepts EnterpriseRoleBindingSubjectsGroupArray and EnterpriseRoleBindingSubjectsGroupArrayOutput values.
// You can construct a concrete instance of `EnterpriseRoleBindingSubjectsGroupArrayInput` via:
//
//	EnterpriseRoleBindingSubjectsGroupArray{ EnterpriseRoleBindingSubjectsGroupArgs{...} }
type EnterpriseRoleBindingSubjectsGroupArrayInput interface {
	pulumi.Input

	ToEnterpriseRoleBindingSubjectsGroupArrayOutput() EnterpriseRoleBindingSubjectsGroupArrayOutput
	ToEnterpriseRoleBindingSubjectsGroupArrayOutputWithContext(context.Context) EnterpriseRoleBindingSubjectsGroupArrayOutput
}

type EnterpriseRoleBindingSubjectsGroupArray []EnterpriseRoleBindingSubjectsGroupInput

func (EnterpriseRoleBindingSubjectsGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EnterpriseRoleBindingSubjectsGroup)(nil)).Elem()
}

func (i EnterpriseRoleBindingSubjectsGroupArray) ToEnterpriseRoleBindingSubjectsGroupArrayOutput() EnterpriseRoleBindingSubjectsGroupArrayOutput {
	return i.ToEnterpriseRoleBindingSubjectsGroupArrayOutputWithContext(context.Background())
}

func (i EnterpriseRoleBindingSubjectsGroupArray) ToEnterpriseRoleBindingSubjectsGroupArrayOutputWithContext(ctx context.Context) EnterpriseRoleBindingSubjectsGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnterpriseRoleBindingSubjectsGroupArrayOutput)
}

type EnterpriseRoleBindingSubjectsGroupOutput struct{ *pulumi.OutputState }

func (EnterpriseRoleBindingSubjectsGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EnterpriseRoleBindingSubjectsGroup)(nil)).Elem()
}

func (o EnterpriseRoleBindingSubjectsGroupOutput) ToEnterpriseRoleBindingSubjectsGroupOutput() EnterpriseRoleBindingSubjectsGroupOutput {
	return o
}

func (o EnterpriseRoleBindingSubjectsGroupOutput) ToEnterpriseRoleBindingSubjectsGroupOutputWithContext(ctx context.Context) EnterpriseRoleBindingSubjectsGroupOutput {
	return o
}

// Group ID.
func (o EnterpriseRoleBindingSubjectsGroupOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v EnterpriseRoleBindingSubjectsGroup) string { return v.Id }).(pulumi.StringOutput)
}

type EnterpriseRoleBindingSubjectsGroupArrayOutput struct{ *pulumi.OutputState }

func (EnterpriseRoleBindingSubjectsGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EnterpriseRoleBindingSubjectsGroup)(nil)).Elem()
}

func (o EnterpriseRoleBindingSubjectsGroupArrayOutput) ToEnterpriseRoleBindingSubjectsGroupArrayOutput() EnterpriseRoleBindingSubjectsGroupArrayOutput {
	return o
}

func (o EnterpriseRoleBindingSubjectsGroupArrayOutput) ToEnterpriseRoleBindingSubjectsGroupArrayOutputWithContext(ctx context.Context) EnterpriseRoleBindingSubjectsGroupArrayOutput {
	return o
}

func (o EnterpriseRoleBindingSubjectsGroupArrayOutput) Index(i pulumi.IntInput) EnterpriseRoleBindingSubjectsGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EnterpriseRoleBindingSubjectsGroup {
		return vs[0].([]EnterpriseRoleBindingSubjectsGroup)[vs[1].(int)]
	}).(EnterpriseRoleBindingSubjectsGroupOutput)
}

type EnterpriseRoleBindingSubjectsServiceAccount struct {
	// Service account ID.
	Id string `pulumi:"id"`
}

// EnterpriseRoleBindingSubjectsServiceAccountInput is an input type that accepts EnterpriseRoleBindingSubjectsServiceAccountArgs and EnterpriseRoleBindingSubjectsServiceAccountOutput values.
// You can construct a concrete instance of `EnterpriseRoleBindingSubjectsServiceAccountInput` via:
//
//	EnterpriseRoleBindingSubjectsServiceAccountArgs{...}
type EnterpriseRoleBindingSubjectsServiceAccountInput interface {
	pulumi.Input

	ToEnterpriseRoleBindingSubjectsServiceAccountOutput() EnterpriseRoleBindingSubjectsServiceAccountOutput
	ToEnterpriseRoleBindingSubjectsServiceAccountOutputWithContext(context.Context) EnterpriseRoleBindingSubjectsServiceAccountOutput
}

type EnterpriseRoleBindingSubjectsServiceAccountArgs struct {
	// Service account ID.
	Id pulumi.StringInput `pulumi:"id"`
}

func (EnterpriseRoleBindingSubjectsServiceAccountArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EnterpriseRoleBindingSubjectsServiceAccount)(nil)).Elem()
}

func (i EnterpriseRoleBindingSubjectsServiceAccountArgs) ToEnterpriseRoleBindingSubjectsServiceAccountOutput() EnterpriseRoleBindingSubjectsServiceAccountOutput {
	return i.ToEnterpriseRoleBindingSubjectsServiceAccountOutputWithContext(context.Background())
}

func (i EnterpriseRoleBindingSubjectsServiceAccountArgs) ToEnterpriseRoleBindingSubjectsServiceAccountOutputWithContext(ctx context.Context) EnterpriseRoleBindingSubjectsServiceAccountOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnterpriseRoleBindingSubjectsServiceAccountOutput)
}

// EnterpriseRoleBindingSubjectsServiceAccountArrayInput is an input type that accepts EnterpriseRoleBindingSubjectsServiceAccountArray and EnterpriseRoleBindingSubjectsServiceAccountArrayOutput values.
// You can construct a concrete instance of `EnterpriseRoleBindingSubjectsServiceAccountArrayInput` via:
//
//	EnterpriseRoleBindingSubjectsServiceAccountArray{ EnterpriseRoleBindingSubjectsServiceAccountArgs{...} }
type EnterpriseRoleBindingSubjectsServiceAccountArrayInput interface {
	pulumi.Input

	ToEnterpriseRoleBindingSubjectsServiceAccountArrayOutput() EnterpriseRoleBindingSubjectsServiceAccountArrayOutput
	ToEnterpriseRoleBindingSubjectsServiceAccountArrayOutputWithContext(context.Context) EnterpriseRoleBindingSubjectsServiceAccountArrayOutput
}

type EnterpriseRoleBindingSubjectsServiceAccountArray []EnterpriseRoleBindingSubjectsServiceAccountInput

func (EnterpriseRoleBindingSubjectsServiceAccountArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EnterpriseRoleBindingSubjectsServiceAccount)(nil)).Elem()
}

func (i EnterpriseRoleBindingSubjectsServiceAccountArray) ToEnterpriseRoleBindingSubjectsServiceAccountArrayOutput() EnterpriseRoleBindingSubjectsServiceAccountArrayOutput {
	return i.ToEnterpriseRoleBindingSubjectsServiceAccountArrayOutputWithContext(context.Background())
}

func (i EnterpriseRoleBindingSubjectsServiceAccountArray) ToEnterpriseRoleBindingSubjectsServiceAccountArrayOutputWithContext(ctx context.Context) EnterpriseRoleBindingSubjectsServiceAccountArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnterpriseRoleBindingSubjectsServiceAccountArrayOutput)
}

type EnterpriseRoleBindingSubjectsServiceAccountOutput struct{ *pulumi.OutputState }

func (EnterpriseRoleBindingSubjectsServiceAccountOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EnterpriseRoleBindingSubjectsServiceAccount)(nil)).Elem()
}

func (o EnterpriseRoleBindingSubjectsServiceAccountOutput) ToEnterpriseRoleBindingSubjectsServiceAccountOutput() EnterpriseRoleBindingSubjectsServiceAccountOutput {
	return o
}

func (o EnterpriseRoleBindingSubjectsServiceAccountOutput) ToEnterpriseRoleBindingSubjectsServiceAccountOutputWithContext(ctx context.Context) EnterpriseRoleBindingSubjectsServiceAccountOutput {
	return o
}

// Service account ID.
func (o EnterpriseRoleBindingSubjectsServiceAccountOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v EnterpriseRoleBindingSubjectsServiceAccount) string { return v.Id }).(pulumi.StringOutput)
}

type EnterpriseRoleBindingSubjectsServiceAccountArrayOutput struct{ *pulumi.OutputState }

func (EnterpriseRoleBindingSubjectsServiceAccountArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EnterpriseRoleBindingSubjectsServiceAccount)(nil)).Elem()
}

func (o EnterpriseRoleBindingSubjectsServiceAccountArrayOutput) ToEnterpriseRoleBindingSubjectsServiceAccountArrayOutput() EnterpriseRoleBindingSubjectsServiceAccountArrayOutput {
	return o
}

func (o EnterpriseRoleBindingSubjectsServiceAccountArrayOutput) ToEnterpriseRoleBindingSubjectsServiceAccountArrayOutputWithContext(ctx context.Context) EnterpriseRoleBindingSubjectsServiceAccountArrayOutput {
	return o
}

func (o EnterpriseRoleBindingSubjectsServiceAccountArrayOutput) Index(i pulumi.IntInput) EnterpriseRoleBindingSubjectsServiceAccountOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EnterpriseRoleBindingSubjectsServiceAccount {
		return vs[0].([]EnterpriseRoleBindingSubjectsServiceAccount)[vs[1].(int)]
	}).(EnterpriseRoleBindingSubjectsServiceAccountOutput)
}

type EnterpriseRoleBindingSubjectsUser struct {
	// User ID.
	Id string `pulumi:"id"`
}

// EnterpriseRoleBindingSubjectsUserInput is an input type that accepts EnterpriseRoleBindingSubjectsUserArgs and EnterpriseRoleBindingSubjectsUserOutput values.
// You can construct a concrete instance of `EnterpriseRoleBindingSubjectsUserInput` via:
//
//	EnterpriseRoleBindingSubjectsUserArgs{...}
type EnterpriseRoleBindingSubjectsUserInput interface {
	pulumi.Input

	ToEnterpriseRoleBindingSubjectsUserOutput() EnterpriseRoleBindingSubjectsUserOutput
	ToEnterpriseRoleBindingSubjectsUserOutputWithContext(context.Context) EnterpriseRoleBindingSubjectsUserOutput
}

type EnterpriseRoleBindingSubjectsUserArgs struct {
	// User ID.
	Id pulumi.StringInput `pulumi:"id"`
}

func (EnterpriseRoleBindingSubjectsUserArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EnterpriseRoleBindingSubjectsUser)(nil)).Elem()
}

func (i EnterpriseRoleBindingSubjectsUserArgs) ToEnterpriseRoleBindingSubjectsUserOutput() EnterpriseRoleBindingSubjectsUserOutput {
	return i.ToEnterpriseRoleBindingSubjectsUserOutputWithContext(context.Background())
}

func (i EnterpriseRoleBindingSubjectsUserArgs) ToEnterpriseRoleBindingSubjectsUserOutputWithContext(ctx context.Context) EnterpriseRoleBindingSubjectsUserOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnterpriseRoleBindingSubjectsUserOutput)
}

// EnterpriseRoleBindingSubjectsUserArrayInput is an input type that accepts EnterpriseRoleBindingSubjectsUserArray and EnterpriseRoleBindingSubjectsUserArrayOutput values.
// You can construct a concrete instance of `EnterpriseRoleBindingSubjectsUserArrayInput` via:
//
//	EnterpriseRoleBindingSubjectsUserArray{ EnterpriseRoleBindingSubjectsUserArgs{...} }
type EnterpriseRoleBindingSubjectsUserArrayInput interface {
	pulumi.Input

	ToEnterpriseRoleBindingSubjectsUserArrayOutput() EnterpriseRoleBindingSubjectsUserArrayOutput
	ToEnterpriseRoleBindingSubjectsUserArrayOutputWithContext(context.Context) EnterpriseRoleBindingSubjectsUserArrayOutput
}

type EnterpriseRoleBindingSubjectsUserArray []EnterpriseRoleBindingSubjectsUserInput

func (EnterpriseRoleBindingSubjectsUserArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EnterpriseRoleBindingSubjectsUser)(nil)).Elem()
}

func (i EnterpriseRoleBindingSubjectsUserArray) ToEnterpriseRoleBindingSubjectsUserArrayOutput() EnterpriseRoleBindingSubjectsUserArrayOutput {
	return i.ToEnterpriseRoleBindingSubjectsUserArrayOutputWithContext(context.Background())
}

func (i EnterpriseRoleBindingSubjectsUserArray) ToEnterpriseRoleBindingSubjectsUserArrayOutputWithContext(ctx context.Context) EnterpriseRoleBindingSubjectsUserArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnterpriseRoleBindingSubjectsUserArrayOutput)
}

type EnterpriseRoleBindingSubjectsUserOutput struct{ *pulumi.OutputState }

func (EnterpriseRoleBindingSubjectsUserOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EnterpriseRoleBindingSubjectsUser)(nil)).Elem()
}

func (o EnterpriseRoleBindingSubjectsUserOutput) ToEnterpriseRoleBindingSubjectsUserOutput() EnterpriseRoleBindingSubjectsUserOutput {
	return o
}

func (o EnterpriseRoleBindingSubjectsUserOutput) ToEnterpriseRoleBindingSubjectsUserOutputWithContext(ctx context.Context) EnterpriseRoleBindingSubjectsUserOutput {
	return o
}

// User ID.
func (o EnterpriseRoleBindingSubjectsUserOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v EnterpriseRoleBindingSubjectsUser) string { return v.Id }).(pulumi.StringOutput)
}

type EnterpriseRoleBindingSubjectsUserArrayOutput struct{ *pulumi.OutputState }

func (EnterpriseRoleBindingSubjectsUserArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EnterpriseRoleBindingSubjectsUser)(nil)).Elem()
}

func (o EnterpriseRoleBindingSubjectsUserArrayOutput) ToEnterpriseRoleBindingSubjectsUserArrayOutput() EnterpriseRoleBindingSubjectsUserArrayOutput {
	return o
}

func (o EnterpriseRoleBindingSubjectsUserArrayOutput) ToEnterpriseRoleBindingSubjectsUserArrayOutputWithContext(ctx context.Context) EnterpriseRoleBindingSubjectsUserArrayOutput {
	return o
}

func (o EnterpriseRoleBindingSubjectsUserArrayOutput) Index(i pulumi.IntInput) EnterpriseRoleBindingSubjectsUserOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EnterpriseRoleBindingSubjectsUser {
		return vs[0].([]EnterpriseRoleBindingSubjectsUser)[vs[1].(int)]
	}).(EnterpriseRoleBindingSubjectsUserOutput)
}

type RoleBindingsScope struct {
	// Scope of the role binding Supported values include: organization, cluster.
	Kind string `pulumi:"kind"`
	// ID of the scope resource.
	ResourceId string `pulumi:"resourceId"`
}

// RoleBindingsScopeInput is an input type that accepts RoleBindingsScopeArgs and RoleBindingsScopeOutput values.
// You can construct a concrete instance of `RoleBindingsScopeInput` via:
//
//	RoleBindingsScopeArgs{...}
type RoleBindingsScopeInput interface {
	pulumi.Input

	ToRoleBindingsScopeOutput() RoleBindingsScopeOutput
	ToRoleBindingsScopeOutputWithContext(context.Context) RoleBindingsScopeOutput
}

type RoleBindingsScopeArgs struct {
	// Scope of the role binding Supported values include: organization, cluster.
	Kind pulumi.StringInput `pulumi:"kind"`
	// ID of the scope resource.
	ResourceId pulumi.StringInput `pulumi:"resourceId"`
}

func (RoleBindingsScopeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RoleBindingsScope)(nil)).Elem()
}

func (i RoleBindingsScopeArgs) ToRoleBindingsScopeOutput() RoleBindingsScopeOutput {
	return i.ToRoleBindingsScopeOutputWithContext(context.Background())
}

func (i RoleBindingsScopeArgs) ToRoleBindingsScopeOutputWithContext(ctx context.Context) RoleBindingsScopeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoleBindingsScopeOutput)
}

// RoleBindingsScopeArrayInput is an input type that accepts RoleBindingsScopeArray and RoleBindingsScopeArrayOutput values.
// You can construct a concrete instance of `RoleBindingsScopeArrayInput` via:
//
//	RoleBindingsScopeArray{ RoleBindingsScopeArgs{...} }
type RoleBindingsScopeArrayInput interface {
	pulumi.Input

	ToRoleBindingsScopeArrayOutput() RoleBindingsScopeArrayOutput
	ToRoleBindingsScopeArrayOutputWithContext(context.Context) RoleBindingsScopeArrayOutput
}

type RoleBindingsScopeArray []RoleBindingsScopeInput

func (RoleBindingsScopeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RoleBindingsScope)(nil)).Elem()
}

func (i RoleBindingsScopeArray) ToRoleBindingsScopeArrayOutput() RoleBindingsScopeArrayOutput {
	return i.ToRoleBindingsScopeArrayOutputWithContext(context.Background())
}

func (i RoleBindingsScopeArray) ToRoleBindingsScopeArrayOutputWithContext(ctx context.Context) RoleBindingsScopeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoleBindingsScopeArrayOutput)
}

type RoleBindingsScopeOutput struct{ *pulumi.OutputState }

func (RoleBindingsScopeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RoleBindingsScope)(nil)).Elem()
}

func (o RoleBindingsScopeOutput) ToRoleBindingsScopeOutput() RoleBindingsScopeOutput {
	return o
}

func (o RoleBindingsScopeOutput) ToRoleBindingsScopeOutputWithContext(ctx context.Context) RoleBindingsScopeOutput {
	return o
}

// Scope of the role binding Supported values include: organization, cluster.
func (o RoleBindingsScopeOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v RoleBindingsScope) string { return v.Kind }).(pulumi.StringOutput)
}

// ID of the scope resource.
func (o RoleBindingsScopeOutput) ResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v RoleBindingsScope) string { return v.ResourceId }).(pulumi.StringOutput)
}

type RoleBindingsScopeArrayOutput struct{ *pulumi.OutputState }

func (RoleBindingsScopeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RoleBindingsScope)(nil)).Elem()
}

func (o RoleBindingsScopeArrayOutput) ToRoleBindingsScopeArrayOutput() RoleBindingsScopeArrayOutput {
	return o
}

func (o RoleBindingsScopeArrayOutput) ToRoleBindingsScopeArrayOutputWithContext(ctx context.Context) RoleBindingsScopeArrayOutput {
	return o
}

func (o RoleBindingsScopeArrayOutput) Index(i pulumi.IntInput) RoleBindingsScopeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RoleBindingsScope {
		return vs[0].([]RoleBindingsScope)[vs[1].(int)]
	}).(RoleBindingsScopeOutput)
}

type RoleBindingsSubject struct {
	Subjects []RoleBindingsSubjectSubject `pulumi:"subjects"`
}

// RoleBindingsSubjectInput is an input type that accepts RoleBindingsSubjectArgs and RoleBindingsSubjectOutput values.
// You can construct a concrete instance of `RoleBindingsSubjectInput` via:
//
//	RoleBindingsSubjectArgs{...}
type RoleBindingsSubjectInput interface {
	pulumi.Input

	ToRoleBindingsSubjectOutput() RoleBindingsSubjectOutput
	ToRoleBindingsSubjectOutputWithContext(context.Context) RoleBindingsSubjectOutput
}

type RoleBindingsSubjectArgs struct {
	Subjects RoleBindingsSubjectSubjectArrayInput `pulumi:"subjects"`
}

func (RoleBindingsSubjectArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RoleBindingsSubject)(nil)).Elem()
}

func (i RoleBindingsSubjectArgs) ToRoleBindingsSubjectOutput() RoleBindingsSubjectOutput {
	return i.ToRoleBindingsSubjectOutputWithContext(context.Background())
}

func (i RoleBindingsSubjectArgs) ToRoleBindingsSubjectOutputWithContext(ctx context.Context) RoleBindingsSubjectOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoleBindingsSubjectOutput)
}

// RoleBindingsSubjectArrayInput is an input type that accepts RoleBindingsSubjectArray and RoleBindingsSubjectArrayOutput values.
// You can construct a concrete instance of `RoleBindingsSubjectArrayInput` via:
//
//	RoleBindingsSubjectArray{ RoleBindingsSubjectArgs{...} }
type RoleBindingsSubjectArrayInput interface {
	pulumi.Input

	ToRoleBindingsSubjectArrayOutput() RoleBindingsSubjectArrayOutput
	ToRoleBindingsSubjectArrayOutputWithContext(context.Context) RoleBindingsSubjectArrayOutput
}

type RoleBindingsSubjectArray []RoleBindingsSubjectInput

func (RoleBindingsSubjectArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RoleBindingsSubject)(nil)).Elem()
}

func (i RoleBindingsSubjectArray) ToRoleBindingsSubjectArrayOutput() RoleBindingsSubjectArrayOutput {
	return i.ToRoleBindingsSubjectArrayOutputWithContext(context.Background())
}

func (i RoleBindingsSubjectArray) ToRoleBindingsSubjectArrayOutputWithContext(ctx context.Context) RoleBindingsSubjectArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoleBindingsSubjectArrayOutput)
}

type RoleBindingsSubjectOutput struct{ *pulumi.OutputState }

func (RoleBindingsSubjectOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RoleBindingsSubject)(nil)).Elem()
}

func (o RoleBindingsSubjectOutput) ToRoleBindingsSubjectOutput() RoleBindingsSubjectOutput {
	return o
}

func (o RoleBindingsSubjectOutput) ToRoleBindingsSubjectOutputWithContext(ctx context.Context) RoleBindingsSubjectOutput {
	return o
}

func (o RoleBindingsSubjectOutput) Subjects() RoleBindingsSubjectSubjectArrayOutput {
	return o.ApplyT(func(v RoleBindingsSubject) []RoleBindingsSubjectSubject { return v.Subjects }).(RoleBindingsSubjectSubjectArrayOutput)
}

type RoleBindingsSubjectArrayOutput struct{ *pulumi.OutputState }

func (RoleBindingsSubjectArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RoleBindingsSubject)(nil)).Elem()
}

func (o RoleBindingsSubjectArrayOutput) ToRoleBindingsSubjectArrayOutput() RoleBindingsSubjectArrayOutput {
	return o
}

func (o RoleBindingsSubjectArrayOutput) ToRoleBindingsSubjectArrayOutputWithContext(ctx context.Context) RoleBindingsSubjectArrayOutput {
	return o
}

func (o RoleBindingsSubjectArrayOutput) Index(i pulumi.IntInput) RoleBindingsSubjectOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RoleBindingsSubject {
		return vs[0].([]RoleBindingsSubject)[vs[1].(int)]
	}).(RoleBindingsSubjectOutput)
}

type RoleBindingsSubjectSubject struct {
	// Optional, required only if `kind` is `group`.
	GroupId *string `pulumi:"groupId"`
	// Kind of the subject. Supported values include: user, service_account, group.
	Kind string `pulumi:"kind"`
	// Optional, required only if `kind` is `serviceAccount`.
	ServiceAccountId *string `pulumi:"serviceAccountId"`
	// Optional, required only if `kind` is `user`.
	UserId *string `pulumi:"userId"`
}

// RoleBindingsSubjectSubjectInput is an input type that accepts RoleBindingsSubjectSubjectArgs and RoleBindingsSubjectSubjectOutput values.
// You can construct a concrete instance of `RoleBindingsSubjectSubjectInput` via:
//
//	RoleBindingsSubjectSubjectArgs{...}
type RoleBindingsSubjectSubjectInput interface {
	pulumi.Input

	ToRoleBindingsSubjectSubjectOutput() RoleBindingsSubjectSubjectOutput
	ToRoleBindingsSubjectSubjectOutputWithContext(context.Context) RoleBindingsSubjectSubjectOutput
}

type RoleBindingsSubjectSubjectArgs struct {
	// Optional, required only if `kind` is `group`.
	GroupId pulumi.StringPtrInput `pulumi:"groupId"`
	// Kind of the subject. Supported values include: user, service_account, group.
	Kind pulumi.StringInput `pulumi:"kind"`
	// Optional, required only if `kind` is `serviceAccount`.
	ServiceAccountId pulumi.StringPtrInput `pulumi:"serviceAccountId"`
	// Optional, required only if `kind` is `user`.
	UserId pulumi.StringPtrInput `pulumi:"userId"`
}

func (RoleBindingsSubjectSubjectArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RoleBindingsSubjectSubject)(nil)).Elem()
}

func (i RoleBindingsSubjectSubjectArgs) ToRoleBindingsSubjectSubjectOutput() RoleBindingsSubjectSubjectOutput {
	return i.ToRoleBindingsSubjectSubjectOutputWithContext(context.Background())
}

func (i RoleBindingsSubjectSubjectArgs) ToRoleBindingsSubjectSubjectOutputWithContext(ctx context.Context) RoleBindingsSubjectSubjectOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoleBindingsSubjectSubjectOutput)
}

// RoleBindingsSubjectSubjectArrayInput is an input type that accepts RoleBindingsSubjectSubjectArray and RoleBindingsSubjectSubjectArrayOutput values.
// You can construct a concrete instance of `RoleBindingsSubjectSubjectArrayInput` via:
//
//	RoleBindingsSubjectSubjectArray{ RoleBindingsSubjectSubjectArgs{...} }
type RoleBindingsSubjectSubjectArrayInput interface {
	pulumi.Input

	ToRoleBindingsSubjectSubjectArrayOutput() RoleBindingsSubjectSubjectArrayOutput
	ToRoleBindingsSubjectSubjectArrayOutputWithContext(context.Context) RoleBindingsSubjectSubjectArrayOutput
}

type RoleBindingsSubjectSubjectArray []RoleBindingsSubjectSubjectInput

func (RoleBindingsSubjectSubjectArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RoleBindingsSubjectSubject)(nil)).Elem()
}

func (i RoleBindingsSubjectSubjectArray) ToRoleBindingsSubjectSubjectArrayOutput() RoleBindingsSubjectSubjectArrayOutput {
	return i.ToRoleBindingsSubjectSubjectArrayOutputWithContext(context.Background())
}

func (i RoleBindingsSubjectSubjectArray) ToRoleBindingsSubjectSubjectArrayOutputWithContext(ctx context.Context) RoleBindingsSubjectSubjectArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoleBindingsSubjectSubjectArrayOutput)
}

type RoleBindingsSubjectSubjectOutput struct{ *pulumi.OutputState }

func (RoleBindingsSubjectSubjectOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RoleBindingsSubjectSubject)(nil)).Elem()
}

func (o RoleBindingsSubjectSubjectOutput) ToRoleBindingsSubjectSubjectOutput() RoleBindingsSubjectSubjectOutput {
	return o
}

func (o RoleBindingsSubjectSubjectOutput) ToRoleBindingsSubjectSubjectOutputWithContext(ctx context.Context) RoleBindingsSubjectSubjectOutput {
	return o
}

// Optional, required only if `kind` is `group`.
func (o RoleBindingsSubjectSubjectOutput) GroupId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RoleBindingsSubjectSubject) *string { return v.GroupId }).(pulumi.StringPtrOutput)
}

// Kind of the subject. Supported values include: user, service_account, group.
func (o RoleBindingsSubjectSubjectOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v RoleBindingsSubjectSubject) string { return v.Kind }).(pulumi.StringOutput)
}

// Optional, required only if `kind` is `serviceAccount`.
func (o RoleBindingsSubjectSubjectOutput) ServiceAccountId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RoleBindingsSubjectSubject) *string { return v.ServiceAccountId }).(pulumi.StringPtrOutput)
}

// Optional, required only if `kind` is `user`.
func (o RoleBindingsSubjectSubjectOutput) UserId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RoleBindingsSubjectSubject) *string { return v.UserId }).(pulumi.StringPtrOutput)
}

type RoleBindingsSubjectSubjectArrayOutput struct{ *pulumi.OutputState }

func (RoleBindingsSubjectSubjectArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RoleBindingsSubjectSubject)(nil)).Elem()
}

func (o RoleBindingsSubjectSubjectArrayOutput) ToRoleBindingsSubjectSubjectArrayOutput() RoleBindingsSubjectSubjectArrayOutput {
	return o
}

func (o RoleBindingsSubjectSubjectArrayOutput) ToRoleBindingsSubjectSubjectArrayOutputWithContext(ctx context.Context) RoleBindingsSubjectSubjectArrayOutput {
	return o
}

func (o RoleBindingsSubjectSubjectArrayOutput) Index(i pulumi.IntInput) RoleBindingsSubjectSubjectOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RoleBindingsSubjectSubject {
		return vs[0].([]RoleBindingsSubjectSubject)[vs[1].(int)]
	}).(RoleBindingsSubjectSubjectOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*EnterpriseRoleBindingScopesInput)(nil)).Elem(), EnterpriseRoleBindingScopesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EnterpriseRoleBindingScopesPtrInput)(nil)).Elem(), EnterpriseRoleBindingScopesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EnterpriseRoleBindingScopesClusterInput)(nil)).Elem(), EnterpriseRoleBindingScopesClusterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EnterpriseRoleBindingScopesClusterArrayInput)(nil)).Elem(), EnterpriseRoleBindingScopesClusterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EnterpriseRoleBindingScopesOrganizationInput)(nil)).Elem(), EnterpriseRoleBindingScopesOrganizationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EnterpriseRoleBindingScopesOrganizationArrayInput)(nil)).Elem(), EnterpriseRoleBindingScopesOrganizationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EnterpriseRoleBindingSubjectsInput)(nil)).Elem(), EnterpriseRoleBindingSubjectsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EnterpriseRoleBindingSubjectsPtrInput)(nil)).Elem(), EnterpriseRoleBindingSubjectsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EnterpriseRoleBindingSubjectsGroupInput)(nil)).Elem(), EnterpriseRoleBindingSubjectsGroupArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EnterpriseRoleBindingSubjectsGroupArrayInput)(nil)).Elem(), EnterpriseRoleBindingSubjectsGroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EnterpriseRoleBindingSubjectsServiceAccountInput)(nil)).Elem(), EnterpriseRoleBindingSubjectsServiceAccountArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EnterpriseRoleBindingSubjectsServiceAccountArrayInput)(nil)).Elem(), EnterpriseRoleBindingSubjectsServiceAccountArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EnterpriseRoleBindingSubjectsUserInput)(nil)).Elem(), EnterpriseRoleBindingSubjectsUserArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EnterpriseRoleBindingSubjectsUserArrayInput)(nil)).Elem(), EnterpriseRoleBindingSubjectsUserArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RoleBindingsScopeInput)(nil)).Elem(), RoleBindingsScopeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RoleBindingsScopeArrayInput)(nil)).Elem(), RoleBindingsScopeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RoleBindingsSubjectInput)(nil)).Elem(), RoleBindingsSubjectArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RoleBindingsSubjectArrayInput)(nil)).Elem(), RoleBindingsSubjectArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RoleBindingsSubjectSubjectInput)(nil)).Elem(), RoleBindingsSubjectSubjectArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RoleBindingsSubjectSubjectArrayInput)(nil)).Elem(), RoleBindingsSubjectSubjectArray{})
	pulumi.RegisterOutputType(EnterpriseRoleBindingScopesOutput{})
	pulumi.RegisterOutputType(EnterpriseRoleBindingScopesPtrOutput{})
	pulumi.RegisterOutputType(EnterpriseRoleBindingScopesClusterOutput{})
	pulumi.RegisterOutputType(EnterpriseRoleBindingScopesClusterArrayOutput{})
	pulumi.RegisterOutputType(EnterpriseRoleBindingScopesOrganizationOutput{})
	pulumi.RegisterOutputType(EnterpriseRoleBindingScopesOrganizationArrayOutput{})
	pulumi.RegisterOutputType(EnterpriseRoleBindingSubjectsOutput{})
	pulumi.RegisterOutputType(EnterpriseRoleBindingSubjectsPtrOutput{})
	pulumi.RegisterOutputType(EnterpriseRoleBindingSubjectsGroupOutput{})
	pulumi.RegisterOutputType(EnterpriseRoleBindingSubjectsGroupArrayOutput{})
	pulumi.RegisterOutputType(EnterpriseRoleBindingSubjectsServiceAccountOutput{})
	pulumi.RegisterOutputType(EnterpriseRoleBindingSubjectsServiceAccountArrayOutput{})
	pulumi.RegisterOutputType(EnterpriseRoleBindingSubjectsUserOutput{})
	pulumi.RegisterOutputType(EnterpriseRoleBindingSubjectsUserArrayOutput{})
	pulumi.RegisterOutputType(RoleBindingsScopeOutput{})
	pulumi.RegisterOutputType(RoleBindingsScopeArrayOutput{})
	pulumi.RegisterOutputType(RoleBindingsSubjectOutput{})
	pulumi.RegisterOutputType(RoleBindingsSubjectArrayOutput{})
	pulumi.RegisterOutputType(RoleBindingsSubjectSubjectOutput{})
	pulumi.RegisterOutputType(RoleBindingsSubjectSubjectArrayOutput{})
}
