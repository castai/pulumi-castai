// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package castai

import (
	"context"
	"reflect"

	"errors"
	"github.com/castai/pulumi-castai/sdk/go/castai/internal"
	"github.com/castai/pulumi-castai/sdk/go/castai/rebalancing"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type HibernationSchedule struct {
	pulumi.CustomResourceState

	ClusterAssignments rebalancing.HibernationScheduleClusterAssignmentsPtrOutput `pulumi:"clusterAssignments"`
	// Enables or disables the schedule.
	Enabled pulumi.BoolOutput `pulumi:"enabled"`
	// Name of the schedule.
	Name pulumi.StringOutput `pulumi:"name"`
	// ID of the organization. If not provided, then will attempt to infer it using CAST AI API client.
	OrganizationId pulumi.StringPtrOutput                            `pulumi:"organizationId"`
	PauseConfig    rebalancing.HibernationSchedulePauseConfigOutput  `pulumi:"pauseConfig"`
	ResumeConfig   rebalancing.HibernationScheduleResumeConfigOutput `pulumi:"resumeConfig"`
}

// NewHibernationSchedule registers a new resource with the given unique name, arguments, and options.
func NewHibernationSchedule(ctx *pulumi.Context,
	name string, args *HibernationScheduleArgs, opts ...pulumi.ResourceOption) (*HibernationSchedule, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Enabled == nil {
		return nil, errors.New("invalid value for required argument 'Enabled'")
	}
	if args.PauseConfig == nil {
		return nil, errors.New("invalid value for required argument 'PauseConfig'")
	}
	if args.ResumeConfig == nil {
		return nil, errors.New("invalid value for required argument 'ResumeConfig'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource HibernationSchedule
	err := ctx.RegisterResource("castai:rebalancing:HibernationSchedule", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetHibernationSchedule gets an existing HibernationSchedule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetHibernationSchedule(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *HibernationScheduleState, opts ...pulumi.ResourceOption) (*HibernationSchedule, error) {
	var resource HibernationSchedule
	err := ctx.ReadResource("castai:rebalancing:HibernationSchedule", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering HibernationSchedule resources.
type hibernationScheduleState struct {
	ClusterAssignments *rebalancing.HibernationScheduleClusterAssignments `pulumi:"clusterAssignments"`
	// Enables or disables the schedule.
	Enabled *bool `pulumi:"enabled"`
	// Name of the schedule.
	Name *string `pulumi:"name"`
	// ID of the organization. If not provided, then will attempt to infer it using CAST AI API client.
	OrganizationId *string                                      `pulumi:"organizationId"`
	PauseConfig    *rebalancing.HibernationSchedulePauseConfig  `pulumi:"pauseConfig"`
	ResumeConfig   *rebalancing.HibernationScheduleResumeConfig `pulumi:"resumeConfig"`
}

type HibernationScheduleState struct {
	ClusterAssignments rebalancing.HibernationScheduleClusterAssignmentsPtrInput
	// Enables or disables the schedule.
	Enabled pulumi.BoolPtrInput
	// Name of the schedule.
	Name pulumi.StringPtrInput
	// ID of the organization. If not provided, then will attempt to infer it using CAST AI API client.
	OrganizationId pulumi.StringPtrInput
	PauseConfig    rebalancing.HibernationSchedulePauseConfigPtrInput
	ResumeConfig   rebalancing.HibernationScheduleResumeConfigPtrInput
}

func (HibernationScheduleState) ElementType() reflect.Type {
	return reflect.TypeOf((*hibernationScheduleState)(nil)).Elem()
}

type hibernationScheduleArgs struct {
	ClusterAssignments *rebalancing.HibernationScheduleClusterAssignments `pulumi:"clusterAssignments"`
	// Enables or disables the schedule.
	Enabled bool `pulumi:"enabled"`
	// Name of the schedule.
	Name *string `pulumi:"name"`
	// ID of the organization. If not provided, then will attempt to infer it using CAST AI API client.
	OrganizationId *string                                     `pulumi:"organizationId"`
	PauseConfig    rebalancing.HibernationSchedulePauseConfig  `pulumi:"pauseConfig"`
	ResumeConfig   rebalancing.HibernationScheduleResumeConfig `pulumi:"resumeConfig"`
}

// The set of arguments for constructing a HibernationSchedule resource.
type HibernationScheduleArgs struct {
	ClusterAssignments rebalancing.HibernationScheduleClusterAssignmentsPtrInput
	// Enables or disables the schedule.
	Enabled pulumi.BoolInput
	// Name of the schedule.
	Name pulumi.StringPtrInput
	// ID of the organization. If not provided, then will attempt to infer it using CAST AI API client.
	OrganizationId pulumi.StringPtrInput
	PauseConfig    rebalancing.HibernationSchedulePauseConfigInput
	ResumeConfig   rebalancing.HibernationScheduleResumeConfigInput
}

func (HibernationScheduleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*hibernationScheduleArgs)(nil)).Elem()
}

type HibernationScheduleInput interface {
	pulumi.Input

	ToHibernationScheduleOutput() HibernationScheduleOutput
	ToHibernationScheduleOutputWithContext(ctx context.Context) HibernationScheduleOutput
}

func (*HibernationSchedule) ElementType() reflect.Type {
	return reflect.TypeOf((**HibernationSchedule)(nil)).Elem()
}

func (i *HibernationSchedule) ToHibernationScheduleOutput() HibernationScheduleOutput {
	return i.ToHibernationScheduleOutputWithContext(context.Background())
}

func (i *HibernationSchedule) ToHibernationScheduleOutputWithContext(ctx context.Context) HibernationScheduleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HibernationScheduleOutput)
}

// HibernationScheduleArrayInput is an input type that accepts HibernationScheduleArray and HibernationScheduleArrayOutput values.
// You can construct a concrete instance of `HibernationScheduleArrayInput` via:
//
//	HibernationScheduleArray{ HibernationScheduleArgs{...} }
type HibernationScheduleArrayInput interface {
	pulumi.Input

	ToHibernationScheduleArrayOutput() HibernationScheduleArrayOutput
	ToHibernationScheduleArrayOutputWithContext(context.Context) HibernationScheduleArrayOutput
}

type HibernationScheduleArray []HibernationScheduleInput

func (HibernationScheduleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*HibernationSchedule)(nil)).Elem()
}

func (i HibernationScheduleArray) ToHibernationScheduleArrayOutput() HibernationScheduleArrayOutput {
	return i.ToHibernationScheduleArrayOutputWithContext(context.Background())
}

func (i HibernationScheduleArray) ToHibernationScheduleArrayOutputWithContext(ctx context.Context) HibernationScheduleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HibernationScheduleArrayOutput)
}

// HibernationScheduleMapInput is an input type that accepts HibernationScheduleMap and HibernationScheduleMapOutput values.
// You can construct a concrete instance of `HibernationScheduleMapInput` via:
//
//	HibernationScheduleMap{ "key": HibernationScheduleArgs{...} }
type HibernationScheduleMapInput interface {
	pulumi.Input

	ToHibernationScheduleMapOutput() HibernationScheduleMapOutput
	ToHibernationScheduleMapOutputWithContext(context.Context) HibernationScheduleMapOutput
}

type HibernationScheduleMap map[string]HibernationScheduleInput

func (HibernationScheduleMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*HibernationSchedule)(nil)).Elem()
}

func (i HibernationScheduleMap) ToHibernationScheduleMapOutput() HibernationScheduleMapOutput {
	return i.ToHibernationScheduleMapOutputWithContext(context.Background())
}

func (i HibernationScheduleMap) ToHibernationScheduleMapOutputWithContext(ctx context.Context) HibernationScheduleMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HibernationScheduleMapOutput)
}

type HibernationScheduleOutput struct{ *pulumi.OutputState }

func (HibernationScheduleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HibernationSchedule)(nil)).Elem()
}

func (o HibernationScheduleOutput) ToHibernationScheduleOutput() HibernationScheduleOutput {
	return o
}

func (o HibernationScheduleOutput) ToHibernationScheduleOutputWithContext(ctx context.Context) HibernationScheduleOutput {
	return o
}

func (o HibernationScheduleOutput) ClusterAssignments() rebalancing.HibernationScheduleClusterAssignmentsPtrOutput {
	return o.ApplyT(func(v *HibernationSchedule) rebalancing.HibernationScheduleClusterAssignmentsPtrOutput {
		return v.ClusterAssignments
	}).(rebalancing.HibernationScheduleClusterAssignmentsPtrOutput)
}

// Enables or disables the schedule.
func (o HibernationScheduleOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *HibernationSchedule) pulumi.BoolOutput { return v.Enabled }).(pulumi.BoolOutput)
}

// Name of the schedule.
func (o HibernationScheduleOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *HibernationSchedule) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// ID of the organization. If not provided, then will attempt to infer it using CAST AI API client.
func (o HibernationScheduleOutput) OrganizationId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HibernationSchedule) pulumi.StringPtrOutput { return v.OrganizationId }).(pulumi.StringPtrOutput)
}

func (o HibernationScheduleOutput) PauseConfig() rebalancing.HibernationSchedulePauseConfigOutput {
	return o.ApplyT(func(v *HibernationSchedule) rebalancing.HibernationSchedulePauseConfigOutput { return v.PauseConfig }).(rebalancing.HibernationSchedulePauseConfigOutput)
}

func (o HibernationScheduleOutput) ResumeConfig() rebalancing.HibernationScheduleResumeConfigOutput {
	return o.ApplyT(func(v *HibernationSchedule) rebalancing.HibernationScheduleResumeConfigOutput { return v.ResumeConfig }).(rebalancing.HibernationScheduleResumeConfigOutput)
}

type HibernationScheduleArrayOutput struct{ *pulumi.OutputState }

func (HibernationScheduleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*HibernationSchedule)(nil)).Elem()
}

func (o HibernationScheduleArrayOutput) ToHibernationScheduleArrayOutput() HibernationScheduleArrayOutput {
	return o
}

func (o HibernationScheduleArrayOutput) ToHibernationScheduleArrayOutputWithContext(ctx context.Context) HibernationScheduleArrayOutput {
	return o
}

func (o HibernationScheduleArrayOutput) Index(i pulumi.IntInput) HibernationScheduleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *HibernationSchedule {
		return vs[0].([]*HibernationSchedule)[vs[1].(int)]
	}).(HibernationScheduleOutput)
}

type HibernationScheduleMapOutput struct{ *pulumi.OutputState }

func (HibernationScheduleMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*HibernationSchedule)(nil)).Elem()
}

func (o HibernationScheduleMapOutput) ToHibernationScheduleMapOutput() HibernationScheduleMapOutput {
	return o
}

func (o HibernationScheduleMapOutput) ToHibernationScheduleMapOutputWithContext(ctx context.Context) HibernationScheduleMapOutput {
	return o
}

func (o HibernationScheduleMapOutput) MapIndex(k pulumi.StringInput) HibernationScheduleOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *HibernationSchedule {
		return vs[0].(map[string]*HibernationSchedule)[vs[1].(string)]
	}).(HibernationScheduleOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*HibernationScheduleInput)(nil)).Elem(), &HibernationSchedule{})
	pulumi.RegisterInputType(reflect.TypeOf((*HibernationScheduleArrayInput)(nil)).Elem(), HibernationScheduleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*HibernationScheduleMapInput)(nil)).Elem(), HibernationScheduleMap{})
	pulumi.RegisterOutputType(HibernationScheduleOutput{})
	pulumi.RegisterOutputType(HibernationScheduleArrayOutput{})
	pulumi.RegisterOutputType(HibernationScheduleMapOutput{})
}
