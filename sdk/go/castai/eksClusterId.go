// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package castai

import (
	"context"
	"reflect"

	"errors"
	"github.com/castai/pulumi-castai/sdk/go/castai/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type EksClusterId struct {
	pulumi.CustomResourceState

	AccountId   pulumi.StringOutput `pulumi:"accountId"`
	ClusterName pulumi.StringOutput `pulumi:"clusterName"`
	Region      pulumi.StringOutput `pulumi:"region"`
}

// NewEksClusterId registers a new resource with the given unique name, arguments, and options.
func NewEksClusterId(ctx *pulumi.Context,
	name string, args *EksClusterIdArgs, opts ...pulumi.ResourceOption) (*EksClusterId, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AccountId == nil {
		return nil, errors.New("invalid value for required argument 'AccountId'")
	}
	if args.ClusterName == nil {
		return nil, errors.New("invalid value for required argument 'ClusterName'")
	}
	if args.Region == nil {
		return nil, errors.New("invalid value for required argument 'Region'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource EksClusterId
	err := ctx.RegisterResource("castai:aws:EksClusterId", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEksClusterId gets an existing EksClusterId resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEksClusterId(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EksClusterIdState, opts ...pulumi.ResourceOption) (*EksClusterId, error) {
	var resource EksClusterId
	err := ctx.ReadResource("castai:aws:EksClusterId", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering EksClusterId resources.
type eksClusterIdState struct {
	AccountId   *string `pulumi:"accountId"`
	ClusterName *string `pulumi:"clusterName"`
	Region      *string `pulumi:"region"`
}

type EksClusterIdState struct {
	AccountId   pulumi.StringPtrInput
	ClusterName pulumi.StringPtrInput
	Region      pulumi.StringPtrInput
}

func (EksClusterIdState) ElementType() reflect.Type {
	return reflect.TypeOf((*eksClusterIdState)(nil)).Elem()
}

type eksClusterIdArgs struct {
	AccountId   string `pulumi:"accountId"`
	ClusterName string `pulumi:"clusterName"`
	Region      string `pulumi:"region"`
}

// The set of arguments for constructing a EksClusterId resource.
type EksClusterIdArgs struct {
	AccountId   pulumi.StringInput
	ClusterName pulumi.StringInput
	Region      pulumi.StringInput
}

func (EksClusterIdArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*eksClusterIdArgs)(nil)).Elem()
}

type EksClusterIdInput interface {
	pulumi.Input

	ToEksClusterIdOutput() EksClusterIdOutput
	ToEksClusterIdOutputWithContext(ctx context.Context) EksClusterIdOutput
}

func (*EksClusterId) ElementType() reflect.Type {
	return reflect.TypeOf((**EksClusterId)(nil)).Elem()
}

func (i *EksClusterId) ToEksClusterIdOutput() EksClusterIdOutput {
	return i.ToEksClusterIdOutputWithContext(context.Background())
}

func (i *EksClusterId) ToEksClusterIdOutputWithContext(ctx context.Context) EksClusterIdOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EksClusterIdOutput)
}

// EksClusterIdArrayInput is an input type that accepts EksClusterIdArray and EksClusterIdArrayOutput values.
// You can construct a concrete instance of `EksClusterIdArrayInput` via:
//
//	EksClusterIdArray{ EksClusterIdArgs{...} }
type EksClusterIdArrayInput interface {
	pulumi.Input

	ToEksClusterIdArrayOutput() EksClusterIdArrayOutput
	ToEksClusterIdArrayOutputWithContext(context.Context) EksClusterIdArrayOutput
}

type EksClusterIdArray []EksClusterIdInput

func (EksClusterIdArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EksClusterId)(nil)).Elem()
}

func (i EksClusterIdArray) ToEksClusterIdArrayOutput() EksClusterIdArrayOutput {
	return i.ToEksClusterIdArrayOutputWithContext(context.Background())
}

func (i EksClusterIdArray) ToEksClusterIdArrayOutputWithContext(ctx context.Context) EksClusterIdArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EksClusterIdArrayOutput)
}

// EksClusterIdMapInput is an input type that accepts EksClusterIdMap and EksClusterIdMapOutput values.
// You can construct a concrete instance of `EksClusterIdMapInput` via:
//
//	EksClusterIdMap{ "key": EksClusterIdArgs{...} }
type EksClusterIdMapInput interface {
	pulumi.Input

	ToEksClusterIdMapOutput() EksClusterIdMapOutput
	ToEksClusterIdMapOutputWithContext(context.Context) EksClusterIdMapOutput
}

type EksClusterIdMap map[string]EksClusterIdInput

func (EksClusterIdMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EksClusterId)(nil)).Elem()
}

func (i EksClusterIdMap) ToEksClusterIdMapOutput() EksClusterIdMapOutput {
	return i.ToEksClusterIdMapOutputWithContext(context.Background())
}

func (i EksClusterIdMap) ToEksClusterIdMapOutputWithContext(ctx context.Context) EksClusterIdMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EksClusterIdMapOutput)
}

type EksClusterIdOutput struct{ *pulumi.OutputState }

func (EksClusterIdOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EksClusterId)(nil)).Elem()
}

func (o EksClusterIdOutput) ToEksClusterIdOutput() EksClusterIdOutput {
	return o
}

func (o EksClusterIdOutput) ToEksClusterIdOutputWithContext(ctx context.Context) EksClusterIdOutput {
	return o
}

func (o EksClusterIdOutput) AccountId() pulumi.StringOutput {
	return o.ApplyT(func(v *EksClusterId) pulumi.StringOutput { return v.AccountId }).(pulumi.StringOutput)
}

func (o EksClusterIdOutput) ClusterName() pulumi.StringOutput {
	return o.ApplyT(func(v *EksClusterId) pulumi.StringOutput { return v.ClusterName }).(pulumi.StringOutput)
}

func (o EksClusterIdOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *EksClusterId) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

type EksClusterIdArrayOutput struct{ *pulumi.OutputState }

func (EksClusterIdArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EksClusterId)(nil)).Elem()
}

func (o EksClusterIdArrayOutput) ToEksClusterIdArrayOutput() EksClusterIdArrayOutput {
	return o
}

func (o EksClusterIdArrayOutput) ToEksClusterIdArrayOutputWithContext(ctx context.Context) EksClusterIdArrayOutput {
	return o
}

func (o EksClusterIdArrayOutput) Index(i pulumi.IntInput) EksClusterIdOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *EksClusterId {
		return vs[0].([]*EksClusterId)[vs[1].(int)]
	}).(EksClusterIdOutput)
}

type EksClusterIdMapOutput struct{ *pulumi.OutputState }

func (EksClusterIdMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EksClusterId)(nil)).Elem()
}

func (o EksClusterIdMapOutput) ToEksClusterIdMapOutput() EksClusterIdMapOutput {
	return o
}

func (o EksClusterIdMapOutput) ToEksClusterIdMapOutputWithContext(ctx context.Context) EksClusterIdMapOutput {
	return o
}

func (o EksClusterIdMapOutput) MapIndex(k pulumi.StringInput) EksClusterIdOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *EksClusterId {
		return vs[0].(map[string]*EksClusterId)[vs[1].(string)]
	}).(EksClusterIdOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*EksClusterIdInput)(nil)).Elem(), &EksClusterId{})
	pulumi.RegisterInputType(reflect.TypeOf((*EksClusterIdArrayInput)(nil)).Elem(), EksClusterIdArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EksClusterIdMapInput)(nil)).Elem(), EksClusterIdMap{})
	pulumi.RegisterOutputType(EksClusterIdOutput{})
	pulumi.RegisterOutputType(EksClusterIdArrayOutput{})
	pulumi.RegisterOutputType(EksClusterIdMapOutput{})
}
