// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package castai

import (
	"context"
	"reflect"

	"errors"
	"github.com/castai/pulumi-castai/sdk/go/castai/iam"
	"github.com/castai/pulumi-castai/sdk/go/castai/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type EnterpriseRoleBinding struct {
	pulumi.CustomResourceState

	// Description of the role binding.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Enterprise organization ID.
	EnterpriseId pulumi.StringOutput `pulumi:"enterpriseId"`
	// Name of the role binding.
	Name pulumi.StringOutput `pulumi:"name"`
	// Organization ID (either enterprise or it's child) where the role binding is created.
	OrganizationId pulumi.StringOutput `pulumi:"organizationId"`
	// Role UUID to bind.
	RoleId pulumi.StringOutput `pulumi:"roleId"`
	// Scopes (organization or cluster) for this role binding.
	Scopes iam.EnterpriseRoleBindingScopesOutput `pulumi:"scopes"`
	// Subjects (users, service accounts, groups) for this role binding.
	Subjects iam.EnterpriseRoleBindingSubjectsOutput `pulumi:"subjects"`
}

// NewEnterpriseRoleBinding registers a new resource with the given unique name, arguments, and options.
func NewEnterpriseRoleBinding(ctx *pulumi.Context,
	name string, args *EnterpriseRoleBindingArgs, opts ...pulumi.ResourceOption) (*EnterpriseRoleBinding, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.EnterpriseId == nil {
		return nil, errors.New("invalid value for required argument 'EnterpriseId'")
	}
	if args.OrganizationId == nil {
		return nil, errors.New("invalid value for required argument 'OrganizationId'")
	}
	if args.RoleId == nil {
		return nil, errors.New("invalid value for required argument 'RoleId'")
	}
	if args.Scopes == nil {
		return nil, errors.New("invalid value for required argument 'Scopes'")
	}
	if args.Subjects == nil {
		return nil, errors.New("invalid value for required argument 'Subjects'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource EnterpriseRoleBinding
	err := ctx.RegisterResource("castai:iam:EnterpriseRoleBinding", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEnterpriseRoleBinding gets an existing EnterpriseRoleBinding resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEnterpriseRoleBinding(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EnterpriseRoleBindingState, opts ...pulumi.ResourceOption) (*EnterpriseRoleBinding, error) {
	var resource EnterpriseRoleBinding
	err := ctx.ReadResource("castai:iam:EnterpriseRoleBinding", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering EnterpriseRoleBinding resources.
type enterpriseRoleBindingState struct {
	// Description of the role binding.
	Description *string `pulumi:"description"`
	// Enterprise organization ID.
	EnterpriseId *string `pulumi:"enterpriseId"`
	// Name of the role binding.
	Name *string `pulumi:"name"`
	// Organization ID (either enterprise or it's child) where the role binding is created.
	OrganizationId *string `pulumi:"organizationId"`
	// Role UUID to bind.
	RoleId *string `pulumi:"roleId"`
	// Scopes (organization or cluster) for this role binding.
	Scopes *iam.EnterpriseRoleBindingScopes `pulumi:"scopes"`
	// Subjects (users, service accounts, groups) for this role binding.
	Subjects *iam.EnterpriseRoleBindingSubjects `pulumi:"subjects"`
}

type EnterpriseRoleBindingState struct {
	// Description of the role binding.
	Description pulumi.StringPtrInput
	// Enterprise organization ID.
	EnterpriseId pulumi.StringPtrInput
	// Name of the role binding.
	Name pulumi.StringPtrInput
	// Organization ID (either enterprise or it's child) where the role binding is created.
	OrganizationId pulumi.StringPtrInput
	// Role UUID to bind.
	RoleId pulumi.StringPtrInput
	// Scopes (organization or cluster) for this role binding.
	Scopes iam.EnterpriseRoleBindingScopesPtrInput
	// Subjects (users, service accounts, groups) for this role binding.
	Subjects iam.EnterpriseRoleBindingSubjectsPtrInput
}

func (EnterpriseRoleBindingState) ElementType() reflect.Type {
	return reflect.TypeOf((*enterpriseRoleBindingState)(nil)).Elem()
}

type enterpriseRoleBindingArgs struct {
	// Description of the role binding.
	Description *string `pulumi:"description"`
	// Enterprise organization ID.
	EnterpriseId string `pulumi:"enterpriseId"`
	// Name of the role binding.
	Name *string `pulumi:"name"`
	// Organization ID (either enterprise or it's child) where the role binding is created.
	OrganizationId string `pulumi:"organizationId"`
	// Role UUID to bind.
	RoleId string `pulumi:"roleId"`
	// Scopes (organization or cluster) for this role binding.
	Scopes iam.EnterpriseRoleBindingScopes `pulumi:"scopes"`
	// Subjects (users, service accounts, groups) for this role binding.
	Subjects iam.EnterpriseRoleBindingSubjects `pulumi:"subjects"`
}

// The set of arguments for constructing a EnterpriseRoleBinding resource.
type EnterpriseRoleBindingArgs struct {
	// Description of the role binding.
	Description pulumi.StringPtrInput
	// Enterprise organization ID.
	EnterpriseId pulumi.StringInput
	// Name of the role binding.
	Name pulumi.StringPtrInput
	// Organization ID (either enterprise or it's child) where the role binding is created.
	OrganizationId pulumi.StringInput
	// Role UUID to bind.
	RoleId pulumi.StringInput
	// Scopes (organization or cluster) for this role binding.
	Scopes iam.EnterpriseRoleBindingScopesInput
	// Subjects (users, service accounts, groups) for this role binding.
	Subjects iam.EnterpriseRoleBindingSubjectsInput
}

func (EnterpriseRoleBindingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*enterpriseRoleBindingArgs)(nil)).Elem()
}

type EnterpriseRoleBindingInput interface {
	pulumi.Input

	ToEnterpriseRoleBindingOutput() EnterpriseRoleBindingOutput
	ToEnterpriseRoleBindingOutputWithContext(ctx context.Context) EnterpriseRoleBindingOutput
}

func (*EnterpriseRoleBinding) ElementType() reflect.Type {
	return reflect.TypeOf((**EnterpriseRoleBinding)(nil)).Elem()
}

func (i *EnterpriseRoleBinding) ToEnterpriseRoleBindingOutput() EnterpriseRoleBindingOutput {
	return i.ToEnterpriseRoleBindingOutputWithContext(context.Background())
}

func (i *EnterpriseRoleBinding) ToEnterpriseRoleBindingOutputWithContext(ctx context.Context) EnterpriseRoleBindingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnterpriseRoleBindingOutput)
}

// EnterpriseRoleBindingArrayInput is an input type that accepts EnterpriseRoleBindingArray and EnterpriseRoleBindingArrayOutput values.
// You can construct a concrete instance of `EnterpriseRoleBindingArrayInput` via:
//
//	EnterpriseRoleBindingArray{ EnterpriseRoleBindingArgs{...} }
type EnterpriseRoleBindingArrayInput interface {
	pulumi.Input

	ToEnterpriseRoleBindingArrayOutput() EnterpriseRoleBindingArrayOutput
	ToEnterpriseRoleBindingArrayOutputWithContext(context.Context) EnterpriseRoleBindingArrayOutput
}

type EnterpriseRoleBindingArray []EnterpriseRoleBindingInput

func (EnterpriseRoleBindingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EnterpriseRoleBinding)(nil)).Elem()
}

func (i EnterpriseRoleBindingArray) ToEnterpriseRoleBindingArrayOutput() EnterpriseRoleBindingArrayOutput {
	return i.ToEnterpriseRoleBindingArrayOutputWithContext(context.Background())
}

func (i EnterpriseRoleBindingArray) ToEnterpriseRoleBindingArrayOutputWithContext(ctx context.Context) EnterpriseRoleBindingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnterpriseRoleBindingArrayOutput)
}

// EnterpriseRoleBindingMapInput is an input type that accepts EnterpriseRoleBindingMap and EnterpriseRoleBindingMapOutput values.
// You can construct a concrete instance of `EnterpriseRoleBindingMapInput` via:
//
//	EnterpriseRoleBindingMap{ "key": EnterpriseRoleBindingArgs{...} }
type EnterpriseRoleBindingMapInput interface {
	pulumi.Input

	ToEnterpriseRoleBindingMapOutput() EnterpriseRoleBindingMapOutput
	ToEnterpriseRoleBindingMapOutputWithContext(context.Context) EnterpriseRoleBindingMapOutput
}

type EnterpriseRoleBindingMap map[string]EnterpriseRoleBindingInput

func (EnterpriseRoleBindingMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EnterpriseRoleBinding)(nil)).Elem()
}

func (i EnterpriseRoleBindingMap) ToEnterpriseRoleBindingMapOutput() EnterpriseRoleBindingMapOutput {
	return i.ToEnterpriseRoleBindingMapOutputWithContext(context.Background())
}

func (i EnterpriseRoleBindingMap) ToEnterpriseRoleBindingMapOutputWithContext(ctx context.Context) EnterpriseRoleBindingMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnterpriseRoleBindingMapOutput)
}

type EnterpriseRoleBindingOutput struct{ *pulumi.OutputState }

func (EnterpriseRoleBindingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EnterpriseRoleBinding)(nil)).Elem()
}

func (o EnterpriseRoleBindingOutput) ToEnterpriseRoleBindingOutput() EnterpriseRoleBindingOutput {
	return o
}

func (o EnterpriseRoleBindingOutput) ToEnterpriseRoleBindingOutputWithContext(ctx context.Context) EnterpriseRoleBindingOutput {
	return o
}

// Description of the role binding.
func (o EnterpriseRoleBindingOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EnterpriseRoleBinding) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Enterprise organization ID.
func (o EnterpriseRoleBindingOutput) EnterpriseId() pulumi.StringOutput {
	return o.ApplyT(func(v *EnterpriseRoleBinding) pulumi.StringOutput { return v.EnterpriseId }).(pulumi.StringOutput)
}

// Name of the role binding.
func (o EnterpriseRoleBindingOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *EnterpriseRoleBinding) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Organization ID (either enterprise or it's child) where the role binding is created.
func (o EnterpriseRoleBindingOutput) OrganizationId() pulumi.StringOutput {
	return o.ApplyT(func(v *EnterpriseRoleBinding) pulumi.StringOutput { return v.OrganizationId }).(pulumi.StringOutput)
}

// Role UUID to bind.
func (o EnterpriseRoleBindingOutput) RoleId() pulumi.StringOutput {
	return o.ApplyT(func(v *EnterpriseRoleBinding) pulumi.StringOutput { return v.RoleId }).(pulumi.StringOutput)
}

// Scopes (organization or cluster) for this role binding.
func (o EnterpriseRoleBindingOutput) Scopes() iam.EnterpriseRoleBindingScopesOutput {
	return o.ApplyT(func(v *EnterpriseRoleBinding) iam.EnterpriseRoleBindingScopesOutput { return v.Scopes }).(iam.EnterpriseRoleBindingScopesOutput)
}

// Subjects (users, service accounts, groups) for this role binding.
func (o EnterpriseRoleBindingOutput) Subjects() iam.EnterpriseRoleBindingSubjectsOutput {
	return o.ApplyT(func(v *EnterpriseRoleBinding) iam.EnterpriseRoleBindingSubjectsOutput { return v.Subjects }).(iam.EnterpriseRoleBindingSubjectsOutput)
}

type EnterpriseRoleBindingArrayOutput struct{ *pulumi.OutputState }

func (EnterpriseRoleBindingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EnterpriseRoleBinding)(nil)).Elem()
}

func (o EnterpriseRoleBindingArrayOutput) ToEnterpriseRoleBindingArrayOutput() EnterpriseRoleBindingArrayOutput {
	return o
}

func (o EnterpriseRoleBindingArrayOutput) ToEnterpriseRoleBindingArrayOutputWithContext(ctx context.Context) EnterpriseRoleBindingArrayOutput {
	return o
}

func (o EnterpriseRoleBindingArrayOutput) Index(i pulumi.IntInput) EnterpriseRoleBindingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *EnterpriseRoleBinding {
		return vs[0].([]*EnterpriseRoleBinding)[vs[1].(int)]
	}).(EnterpriseRoleBindingOutput)
}

type EnterpriseRoleBindingMapOutput struct{ *pulumi.OutputState }

func (EnterpriseRoleBindingMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EnterpriseRoleBinding)(nil)).Elem()
}

func (o EnterpriseRoleBindingMapOutput) ToEnterpriseRoleBindingMapOutput() EnterpriseRoleBindingMapOutput {
	return o
}

func (o EnterpriseRoleBindingMapOutput) ToEnterpriseRoleBindingMapOutputWithContext(ctx context.Context) EnterpriseRoleBindingMapOutput {
	return o
}

func (o EnterpriseRoleBindingMapOutput) MapIndex(k pulumi.StringInput) EnterpriseRoleBindingOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *EnterpriseRoleBinding {
		return vs[0].(map[string]*EnterpriseRoleBinding)[vs[1].(string)]
	}).(EnterpriseRoleBindingOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*EnterpriseRoleBindingInput)(nil)).Elem(), &EnterpriseRoleBinding{})
	pulumi.RegisterInputType(reflect.TypeOf((*EnterpriseRoleBindingArrayInput)(nil)).Elem(), EnterpriseRoleBindingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EnterpriseRoleBindingMapInput)(nil)).Elem(), EnterpriseRoleBindingMap{})
	pulumi.RegisterOutputType(EnterpriseRoleBindingOutput{})
	pulumi.RegisterOutputType(EnterpriseRoleBindingArrayOutput{})
	pulumi.RegisterOutputType(EnterpriseRoleBindingMapOutput{})
}
