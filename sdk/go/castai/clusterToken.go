// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package castai

import (
	"context"
	"reflect"

	"errors"
	"github.com/castai/pulumi-castai/sdk/go/castai/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type ClusterToken struct {
	pulumi.CustomResourceState

	// CAST AI cluster id
	ClusterId pulumi.StringOutput `pulumi:"clusterId"`
	// computed value to store cluster token
	ClusterToken pulumi.StringOutput `pulumi:"clusterToken"`
}

// NewClusterToken registers a new resource with the given unique name, arguments, and options.
func NewClusterToken(ctx *pulumi.Context,
	name string, args *ClusterTokenArgs, opts ...pulumi.ResourceOption) (*ClusterToken, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ClusterId == nil {
		return nil, errors.New("invalid value for required argument 'ClusterId'")
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"clusterToken",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ClusterToken
	err := ctx.RegisterResource("castai:index:ClusterToken", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetClusterToken gets an existing ClusterToken resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetClusterToken(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ClusterTokenState, opts ...pulumi.ResourceOption) (*ClusterToken, error) {
	var resource ClusterToken
	err := ctx.ReadResource("castai:index:ClusterToken", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ClusterToken resources.
type clusterTokenState struct {
	// CAST AI cluster id
	ClusterId *string `pulumi:"clusterId"`
	// computed value to store cluster token
	ClusterToken *string `pulumi:"clusterToken"`
}

type ClusterTokenState struct {
	// CAST AI cluster id
	ClusterId pulumi.StringPtrInput
	// computed value to store cluster token
	ClusterToken pulumi.StringPtrInput
}

func (ClusterTokenState) ElementType() reflect.Type {
	return reflect.TypeOf((*clusterTokenState)(nil)).Elem()
}

type clusterTokenArgs struct {
	// CAST AI cluster id
	ClusterId string `pulumi:"clusterId"`
}

// The set of arguments for constructing a ClusterToken resource.
type ClusterTokenArgs struct {
	// CAST AI cluster id
	ClusterId pulumi.StringInput
}

func (ClusterTokenArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*clusterTokenArgs)(nil)).Elem()
}

type ClusterTokenInput interface {
	pulumi.Input

	ToClusterTokenOutput() ClusterTokenOutput
	ToClusterTokenOutputWithContext(ctx context.Context) ClusterTokenOutput
}

func (*ClusterToken) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterToken)(nil)).Elem()
}

func (i *ClusterToken) ToClusterTokenOutput() ClusterTokenOutput {
	return i.ToClusterTokenOutputWithContext(context.Background())
}

func (i *ClusterToken) ToClusterTokenOutputWithContext(ctx context.Context) ClusterTokenOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterTokenOutput)
}

// ClusterTokenArrayInput is an input type that accepts ClusterTokenArray and ClusterTokenArrayOutput values.
// You can construct a concrete instance of `ClusterTokenArrayInput` via:
//
//	ClusterTokenArray{ ClusterTokenArgs{...} }
type ClusterTokenArrayInput interface {
	pulumi.Input

	ToClusterTokenArrayOutput() ClusterTokenArrayOutput
	ToClusterTokenArrayOutputWithContext(context.Context) ClusterTokenArrayOutput
}

type ClusterTokenArray []ClusterTokenInput

func (ClusterTokenArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ClusterToken)(nil)).Elem()
}

func (i ClusterTokenArray) ToClusterTokenArrayOutput() ClusterTokenArrayOutput {
	return i.ToClusterTokenArrayOutputWithContext(context.Background())
}

func (i ClusterTokenArray) ToClusterTokenArrayOutputWithContext(ctx context.Context) ClusterTokenArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterTokenArrayOutput)
}

// ClusterTokenMapInput is an input type that accepts ClusterTokenMap and ClusterTokenMapOutput values.
// You can construct a concrete instance of `ClusterTokenMapInput` via:
//
//	ClusterTokenMap{ "key": ClusterTokenArgs{...} }
type ClusterTokenMapInput interface {
	pulumi.Input

	ToClusterTokenMapOutput() ClusterTokenMapOutput
	ToClusterTokenMapOutputWithContext(context.Context) ClusterTokenMapOutput
}

type ClusterTokenMap map[string]ClusterTokenInput

func (ClusterTokenMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ClusterToken)(nil)).Elem()
}

func (i ClusterTokenMap) ToClusterTokenMapOutput() ClusterTokenMapOutput {
	return i.ToClusterTokenMapOutputWithContext(context.Background())
}

func (i ClusterTokenMap) ToClusterTokenMapOutputWithContext(ctx context.Context) ClusterTokenMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterTokenMapOutput)
}

type ClusterTokenOutput struct{ *pulumi.OutputState }

func (ClusterTokenOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterToken)(nil)).Elem()
}

func (o ClusterTokenOutput) ToClusterTokenOutput() ClusterTokenOutput {
	return o
}

func (o ClusterTokenOutput) ToClusterTokenOutputWithContext(ctx context.Context) ClusterTokenOutput {
	return o
}

// CAST AI cluster id
func (o ClusterTokenOutput) ClusterId() pulumi.StringOutput {
	return o.ApplyT(func(v *ClusterToken) pulumi.StringOutput { return v.ClusterId }).(pulumi.StringOutput)
}

// computed value to store cluster token
func (o ClusterTokenOutput) ClusterToken() pulumi.StringOutput {
	return o.ApplyT(func(v *ClusterToken) pulumi.StringOutput { return v.ClusterToken }).(pulumi.StringOutput)
}

type ClusterTokenArrayOutput struct{ *pulumi.OutputState }

func (ClusterTokenArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ClusterToken)(nil)).Elem()
}

func (o ClusterTokenArrayOutput) ToClusterTokenArrayOutput() ClusterTokenArrayOutput {
	return o
}

func (o ClusterTokenArrayOutput) ToClusterTokenArrayOutputWithContext(ctx context.Context) ClusterTokenArrayOutput {
	return o
}

func (o ClusterTokenArrayOutput) Index(i pulumi.IntInput) ClusterTokenOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ClusterToken {
		return vs[0].([]*ClusterToken)[vs[1].(int)]
	}).(ClusterTokenOutput)
}

type ClusterTokenMapOutput struct{ *pulumi.OutputState }

func (ClusterTokenMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ClusterToken)(nil)).Elem()
}

func (o ClusterTokenMapOutput) ToClusterTokenMapOutput() ClusterTokenMapOutput {
	return o
}

func (o ClusterTokenMapOutput) ToClusterTokenMapOutputWithContext(ctx context.Context) ClusterTokenMapOutput {
	return o
}

func (o ClusterTokenMapOutput) MapIndex(k pulumi.StringInput) ClusterTokenOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ClusterToken {
		return vs[0].(map[string]*ClusterToken)[vs[1].(string)]
	}).(ClusterTokenOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterTokenInput)(nil)).Elem(), &ClusterToken{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterTokenArrayInput)(nil)).Elem(), ClusterTokenArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterTokenMapInput)(nil)).Elem(), ClusterTokenMap{})
	pulumi.RegisterOutputType(ClusterTokenOutput{})
	pulumi.RegisterOutputType(ClusterTokenArrayOutput{})
	pulumi.RegisterOutputType(ClusterTokenMapOutput{})
}
