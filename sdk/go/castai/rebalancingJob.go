// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package castai

import (
	"context"
	"reflect"

	"errors"
	"github.com/castai/pulumi-castai/sdk/go/castai/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type RebalancingJob struct {
	pulumi.CustomResourceState

	// CAST AI cluster id.
	ClusterId pulumi.StringOutput `pulumi:"clusterId"`
	// The job will only be executed if it's enabled.
	Enabled pulumi.BoolPtrOutput `pulumi:"enabled"`
	// Rebalancing schedule of this job.
	RebalancingScheduleId pulumi.StringOutput `pulumi:"rebalancingScheduleId"`
}

// NewRebalancingJob registers a new resource with the given unique name, arguments, and options.
func NewRebalancingJob(ctx *pulumi.Context,
	name string, args *RebalancingJobArgs, opts ...pulumi.ResourceOption) (*RebalancingJob, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ClusterId == nil {
		return nil, errors.New("invalid value for required argument 'ClusterId'")
	}
	if args.RebalancingScheduleId == nil {
		return nil, errors.New("invalid value for required argument 'RebalancingScheduleId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource RebalancingJob
	err := ctx.RegisterResource("castai:rebalancing:RebalancingJob", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRebalancingJob gets an existing RebalancingJob resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRebalancingJob(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RebalancingJobState, opts ...pulumi.ResourceOption) (*RebalancingJob, error) {
	var resource RebalancingJob
	err := ctx.ReadResource("castai:rebalancing:RebalancingJob", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RebalancingJob resources.
type rebalancingJobState struct {
	// CAST AI cluster id.
	ClusterId *string `pulumi:"clusterId"`
	// The job will only be executed if it's enabled.
	Enabled *bool `pulumi:"enabled"`
	// Rebalancing schedule of this job.
	RebalancingScheduleId *string `pulumi:"rebalancingScheduleId"`
}

type RebalancingJobState struct {
	// CAST AI cluster id.
	ClusterId pulumi.StringPtrInput
	// The job will only be executed if it's enabled.
	Enabled pulumi.BoolPtrInput
	// Rebalancing schedule of this job.
	RebalancingScheduleId pulumi.StringPtrInput
}

func (RebalancingJobState) ElementType() reflect.Type {
	return reflect.TypeOf((*rebalancingJobState)(nil)).Elem()
}

type rebalancingJobArgs struct {
	// CAST AI cluster id.
	ClusterId string `pulumi:"clusterId"`
	// The job will only be executed if it's enabled.
	Enabled *bool `pulumi:"enabled"`
	// Rebalancing schedule of this job.
	RebalancingScheduleId string `pulumi:"rebalancingScheduleId"`
}

// The set of arguments for constructing a RebalancingJob resource.
type RebalancingJobArgs struct {
	// CAST AI cluster id.
	ClusterId pulumi.StringInput
	// The job will only be executed if it's enabled.
	Enabled pulumi.BoolPtrInput
	// Rebalancing schedule of this job.
	RebalancingScheduleId pulumi.StringInput
}

func (RebalancingJobArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*rebalancingJobArgs)(nil)).Elem()
}

type RebalancingJobInput interface {
	pulumi.Input

	ToRebalancingJobOutput() RebalancingJobOutput
	ToRebalancingJobOutputWithContext(ctx context.Context) RebalancingJobOutput
}

func (*RebalancingJob) ElementType() reflect.Type {
	return reflect.TypeOf((**RebalancingJob)(nil)).Elem()
}

func (i *RebalancingJob) ToRebalancingJobOutput() RebalancingJobOutput {
	return i.ToRebalancingJobOutputWithContext(context.Background())
}

func (i *RebalancingJob) ToRebalancingJobOutputWithContext(ctx context.Context) RebalancingJobOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RebalancingJobOutput)
}

// RebalancingJobArrayInput is an input type that accepts RebalancingJobArray and RebalancingJobArrayOutput values.
// You can construct a concrete instance of `RebalancingJobArrayInput` via:
//
//	RebalancingJobArray{ RebalancingJobArgs{...} }
type RebalancingJobArrayInput interface {
	pulumi.Input

	ToRebalancingJobArrayOutput() RebalancingJobArrayOutput
	ToRebalancingJobArrayOutputWithContext(context.Context) RebalancingJobArrayOutput
}

type RebalancingJobArray []RebalancingJobInput

func (RebalancingJobArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RebalancingJob)(nil)).Elem()
}

func (i RebalancingJobArray) ToRebalancingJobArrayOutput() RebalancingJobArrayOutput {
	return i.ToRebalancingJobArrayOutputWithContext(context.Background())
}

func (i RebalancingJobArray) ToRebalancingJobArrayOutputWithContext(ctx context.Context) RebalancingJobArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RebalancingJobArrayOutput)
}

// RebalancingJobMapInput is an input type that accepts RebalancingJobMap and RebalancingJobMapOutput values.
// You can construct a concrete instance of `RebalancingJobMapInput` via:
//
//	RebalancingJobMap{ "key": RebalancingJobArgs{...} }
type RebalancingJobMapInput interface {
	pulumi.Input

	ToRebalancingJobMapOutput() RebalancingJobMapOutput
	ToRebalancingJobMapOutputWithContext(context.Context) RebalancingJobMapOutput
}

type RebalancingJobMap map[string]RebalancingJobInput

func (RebalancingJobMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RebalancingJob)(nil)).Elem()
}

func (i RebalancingJobMap) ToRebalancingJobMapOutput() RebalancingJobMapOutput {
	return i.ToRebalancingJobMapOutputWithContext(context.Background())
}

func (i RebalancingJobMap) ToRebalancingJobMapOutputWithContext(ctx context.Context) RebalancingJobMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RebalancingJobMapOutput)
}

type RebalancingJobOutput struct{ *pulumi.OutputState }

func (RebalancingJobOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RebalancingJob)(nil)).Elem()
}

func (o RebalancingJobOutput) ToRebalancingJobOutput() RebalancingJobOutput {
	return o
}

func (o RebalancingJobOutput) ToRebalancingJobOutputWithContext(ctx context.Context) RebalancingJobOutput {
	return o
}

// CAST AI cluster id.
func (o RebalancingJobOutput) ClusterId() pulumi.StringOutput {
	return o.ApplyT(func(v *RebalancingJob) pulumi.StringOutput { return v.ClusterId }).(pulumi.StringOutput)
}

// The job will only be executed if it's enabled.
func (o RebalancingJobOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RebalancingJob) pulumi.BoolPtrOutput { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// Rebalancing schedule of this job.
func (o RebalancingJobOutput) RebalancingScheduleId() pulumi.StringOutput {
	return o.ApplyT(func(v *RebalancingJob) pulumi.StringOutput { return v.RebalancingScheduleId }).(pulumi.StringOutput)
}

type RebalancingJobArrayOutput struct{ *pulumi.OutputState }

func (RebalancingJobArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RebalancingJob)(nil)).Elem()
}

func (o RebalancingJobArrayOutput) ToRebalancingJobArrayOutput() RebalancingJobArrayOutput {
	return o
}

func (o RebalancingJobArrayOutput) ToRebalancingJobArrayOutputWithContext(ctx context.Context) RebalancingJobArrayOutput {
	return o
}

func (o RebalancingJobArrayOutput) Index(i pulumi.IntInput) RebalancingJobOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RebalancingJob {
		return vs[0].([]*RebalancingJob)[vs[1].(int)]
	}).(RebalancingJobOutput)
}

type RebalancingJobMapOutput struct{ *pulumi.OutputState }

func (RebalancingJobMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RebalancingJob)(nil)).Elem()
}

func (o RebalancingJobMapOutput) ToRebalancingJobMapOutput() RebalancingJobMapOutput {
	return o
}

func (o RebalancingJobMapOutput) ToRebalancingJobMapOutputWithContext(ctx context.Context) RebalancingJobMapOutput {
	return o
}

func (o RebalancingJobMapOutput) MapIndex(k pulumi.StringInput) RebalancingJobOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RebalancingJob {
		return vs[0].(map[string]*RebalancingJob)[vs[1].(string)]
	}).(RebalancingJobOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RebalancingJobInput)(nil)).Elem(), &RebalancingJob{})
	pulumi.RegisterInputType(reflect.TypeOf((*RebalancingJobArrayInput)(nil)).Elem(), RebalancingJobArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RebalancingJobMapInput)(nil)).Elem(), RebalancingJobMap{})
	pulumi.RegisterOutputType(RebalancingJobOutput{})
	pulumi.RegisterOutputType(RebalancingJobArrayOutput{})
	pulumi.RegisterOutputType(RebalancingJobMapOutput{})
}
