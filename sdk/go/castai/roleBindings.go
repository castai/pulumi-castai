// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package castai

import (
	"context"
	"reflect"

	"errors"
	"github.com/castai/pulumi-castai/sdk/go/castai/iam"
	"github.com/castai/pulumi-castai/sdk/go/castai/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type RoleBindings struct {
	pulumi.CustomResourceState

	// Description of the role binding.
	Description pulumi.StringOutput `pulumi:"description"`
	// Name of role binding.
	Name pulumi.StringOutput `pulumi:"name"`
	// CAST AI organization ID.
	OrganizationId pulumi.StringOutput `pulumi:"organizationId"`
	// ID of role from role binding.
	RoleId pulumi.StringOutput `pulumi:"roleId"`
	// Scopes of the role binding.
	Scopes   iam.RoleBindingsScopeArrayOutput   `pulumi:"scopes"`
	Subjects iam.RoleBindingsSubjectArrayOutput `pulumi:"subjects"`
}

// NewRoleBindings registers a new resource with the given unique name, arguments, and options.
func NewRoleBindings(ctx *pulumi.Context,
	name string, args *RoleBindingsArgs, opts ...pulumi.ResourceOption) (*RoleBindings, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.OrganizationId == nil {
		return nil, errors.New("invalid value for required argument 'OrganizationId'")
	}
	if args.RoleId == nil {
		return nil, errors.New("invalid value for required argument 'RoleId'")
	}
	if args.Subjects == nil {
		return nil, errors.New("invalid value for required argument 'Subjects'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource RoleBindings
	err := ctx.RegisterResource("castai:iam:RoleBindings", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRoleBindings gets an existing RoleBindings resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRoleBindings(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RoleBindingsState, opts ...pulumi.ResourceOption) (*RoleBindings, error) {
	var resource RoleBindings
	err := ctx.ReadResource("castai:iam:RoleBindings", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RoleBindings resources.
type roleBindingsState struct {
	// Description of the role binding.
	Description *string `pulumi:"description"`
	// Name of role binding.
	Name *string `pulumi:"name"`
	// CAST AI organization ID.
	OrganizationId *string `pulumi:"organizationId"`
	// ID of role from role binding.
	RoleId *string `pulumi:"roleId"`
	// Scopes of the role binding.
	Scopes   []iam.RoleBindingsScope   `pulumi:"scopes"`
	Subjects []iam.RoleBindingsSubject `pulumi:"subjects"`
}

type RoleBindingsState struct {
	// Description of the role binding.
	Description pulumi.StringPtrInput
	// Name of role binding.
	Name pulumi.StringPtrInput
	// CAST AI organization ID.
	OrganizationId pulumi.StringPtrInput
	// ID of role from role binding.
	RoleId pulumi.StringPtrInput
	// Scopes of the role binding.
	Scopes   iam.RoleBindingsScopeArrayInput
	Subjects iam.RoleBindingsSubjectArrayInput
}

func (RoleBindingsState) ElementType() reflect.Type {
	return reflect.TypeOf((*roleBindingsState)(nil)).Elem()
}

type roleBindingsArgs struct {
	// Description of the role binding.
	Description *string `pulumi:"description"`
	// Name of role binding.
	Name *string `pulumi:"name"`
	// CAST AI organization ID.
	OrganizationId string `pulumi:"organizationId"`
	// ID of role from role binding.
	RoleId string `pulumi:"roleId"`
	// Scopes of the role binding.
	Scopes   []iam.RoleBindingsScope   `pulumi:"scopes"`
	Subjects []iam.RoleBindingsSubject `pulumi:"subjects"`
}

// The set of arguments for constructing a RoleBindings resource.
type RoleBindingsArgs struct {
	// Description of the role binding.
	Description pulumi.StringPtrInput
	// Name of role binding.
	Name pulumi.StringPtrInput
	// CAST AI organization ID.
	OrganizationId pulumi.StringInput
	// ID of role from role binding.
	RoleId pulumi.StringInput
	// Scopes of the role binding.
	Scopes   iam.RoleBindingsScopeArrayInput
	Subjects iam.RoleBindingsSubjectArrayInput
}

func (RoleBindingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*roleBindingsArgs)(nil)).Elem()
}

type RoleBindingsInput interface {
	pulumi.Input

	ToRoleBindingsOutput() RoleBindingsOutput
	ToRoleBindingsOutputWithContext(ctx context.Context) RoleBindingsOutput
}

func (*RoleBindings) ElementType() reflect.Type {
	return reflect.TypeOf((**RoleBindings)(nil)).Elem()
}

func (i *RoleBindings) ToRoleBindingsOutput() RoleBindingsOutput {
	return i.ToRoleBindingsOutputWithContext(context.Background())
}

func (i *RoleBindings) ToRoleBindingsOutputWithContext(ctx context.Context) RoleBindingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoleBindingsOutput)
}

// RoleBindingsArrayInput is an input type that accepts RoleBindingsArray and RoleBindingsArrayOutput values.
// You can construct a concrete instance of `RoleBindingsArrayInput` via:
//
//	RoleBindingsArray{ RoleBindingsArgs{...} }
type RoleBindingsArrayInput interface {
	pulumi.Input

	ToRoleBindingsArrayOutput() RoleBindingsArrayOutput
	ToRoleBindingsArrayOutputWithContext(context.Context) RoleBindingsArrayOutput
}

type RoleBindingsArray []RoleBindingsInput

func (RoleBindingsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RoleBindings)(nil)).Elem()
}

func (i RoleBindingsArray) ToRoleBindingsArrayOutput() RoleBindingsArrayOutput {
	return i.ToRoleBindingsArrayOutputWithContext(context.Background())
}

func (i RoleBindingsArray) ToRoleBindingsArrayOutputWithContext(ctx context.Context) RoleBindingsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoleBindingsArrayOutput)
}

// RoleBindingsMapInput is an input type that accepts RoleBindingsMap and RoleBindingsMapOutput values.
// You can construct a concrete instance of `RoleBindingsMapInput` via:
//
//	RoleBindingsMap{ "key": RoleBindingsArgs{...} }
type RoleBindingsMapInput interface {
	pulumi.Input

	ToRoleBindingsMapOutput() RoleBindingsMapOutput
	ToRoleBindingsMapOutputWithContext(context.Context) RoleBindingsMapOutput
}

type RoleBindingsMap map[string]RoleBindingsInput

func (RoleBindingsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RoleBindings)(nil)).Elem()
}

func (i RoleBindingsMap) ToRoleBindingsMapOutput() RoleBindingsMapOutput {
	return i.ToRoleBindingsMapOutputWithContext(context.Background())
}

func (i RoleBindingsMap) ToRoleBindingsMapOutputWithContext(ctx context.Context) RoleBindingsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoleBindingsMapOutput)
}

type RoleBindingsOutput struct{ *pulumi.OutputState }

func (RoleBindingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RoleBindings)(nil)).Elem()
}

func (o RoleBindingsOutput) ToRoleBindingsOutput() RoleBindingsOutput {
	return o
}

func (o RoleBindingsOutput) ToRoleBindingsOutputWithContext(ctx context.Context) RoleBindingsOutput {
	return o
}

// Description of the role binding.
func (o RoleBindingsOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *RoleBindings) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// Name of role binding.
func (o RoleBindingsOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *RoleBindings) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// CAST AI organization ID.
func (o RoleBindingsOutput) OrganizationId() pulumi.StringOutput {
	return o.ApplyT(func(v *RoleBindings) pulumi.StringOutput { return v.OrganizationId }).(pulumi.StringOutput)
}

// ID of role from role binding.
func (o RoleBindingsOutput) RoleId() pulumi.StringOutput {
	return o.ApplyT(func(v *RoleBindings) pulumi.StringOutput { return v.RoleId }).(pulumi.StringOutput)
}

// Scopes of the role binding.
func (o RoleBindingsOutput) Scopes() iam.RoleBindingsScopeArrayOutput {
	return o.ApplyT(func(v *RoleBindings) iam.RoleBindingsScopeArrayOutput { return v.Scopes }).(iam.RoleBindingsScopeArrayOutput)
}

func (o RoleBindingsOutput) Subjects() iam.RoleBindingsSubjectArrayOutput {
	return o.ApplyT(func(v *RoleBindings) iam.RoleBindingsSubjectArrayOutput { return v.Subjects }).(iam.RoleBindingsSubjectArrayOutput)
}

type RoleBindingsArrayOutput struct{ *pulumi.OutputState }

func (RoleBindingsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RoleBindings)(nil)).Elem()
}

func (o RoleBindingsArrayOutput) ToRoleBindingsArrayOutput() RoleBindingsArrayOutput {
	return o
}

func (o RoleBindingsArrayOutput) ToRoleBindingsArrayOutputWithContext(ctx context.Context) RoleBindingsArrayOutput {
	return o
}

func (o RoleBindingsArrayOutput) Index(i pulumi.IntInput) RoleBindingsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RoleBindings {
		return vs[0].([]*RoleBindings)[vs[1].(int)]
	}).(RoleBindingsOutput)
}

type RoleBindingsMapOutput struct{ *pulumi.OutputState }

func (RoleBindingsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RoleBindings)(nil)).Elem()
}

func (o RoleBindingsMapOutput) ToRoleBindingsMapOutput() RoleBindingsMapOutput {
	return o
}

func (o RoleBindingsMapOutput) ToRoleBindingsMapOutputWithContext(ctx context.Context) RoleBindingsMapOutput {
	return o
}

func (o RoleBindingsMapOutput) MapIndex(k pulumi.StringInput) RoleBindingsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RoleBindings {
		return vs[0].(map[string]*RoleBindings)[vs[1].(string)]
	}).(RoleBindingsOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RoleBindingsInput)(nil)).Elem(), &RoleBindings{})
	pulumi.RegisterInputType(reflect.TypeOf((*RoleBindingsArrayInput)(nil)).Elem(), RoleBindingsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RoleBindingsMapInput)(nil)).Elem(), RoleBindingsMap{})
	pulumi.RegisterOutputType(RoleBindingsOutput{})
	pulumi.RegisterOutputType(RoleBindingsArrayOutput{})
	pulumi.RegisterOutputType(RoleBindingsMapOutput{})
}
