// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package castai

import (
	"context"
	"reflect"

	"errors"
	"github.com/castai/pulumi-castai/sdk/go/castai/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type GkeClusterId struct {
	pulumi.CustomResourceState

	// Service account email in cast project
	CastServiceAccount pulumi.StringOutput `pulumi:"castServiceAccount"`
	// Service account email in client project
	ClientServiceAccount pulumi.StringPtrOutput `pulumi:"clientServiceAccount"`
	// CAST.AI agent cluster token
	ClusterToken pulumi.StringOutput `pulumi:"clusterToken"`
	// GCP cluster zone in case of zonal or region in case of regional cluster
	Location pulumi.StringOutput `pulumi:"location"`
	// GKE cluster name
	Name pulumi.StringOutput `pulumi:"name"`
	// GCP project id
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
}

// NewGkeClusterId registers a new resource with the given unique name, arguments, and options.
func NewGkeClusterId(ctx *pulumi.Context,
	name string, args *GkeClusterIdArgs, opts ...pulumi.ResourceOption) (*GkeClusterId, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Location == nil {
		return nil, errors.New("invalid value for required argument 'Location'")
	}
	if args.ProjectId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectId'")
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"clusterToken",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource GkeClusterId
	err := ctx.RegisterResource("castai:gcp:GkeClusterId", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGkeClusterId gets an existing GkeClusterId resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGkeClusterId(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GkeClusterIdState, opts ...pulumi.ResourceOption) (*GkeClusterId, error) {
	var resource GkeClusterId
	err := ctx.ReadResource("castai:gcp:GkeClusterId", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering GkeClusterId resources.
type gkeClusterIdState struct {
	// Service account email in cast project
	CastServiceAccount *string `pulumi:"castServiceAccount"`
	// Service account email in client project
	ClientServiceAccount *string `pulumi:"clientServiceAccount"`
	// CAST.AI agent cluster token
	ClusterToken *string `pulumi:"clusterToken"`
	// GCP cluster zone in case of zonal or region in case of regional cluster
	Location *string `pulumi:"location"`
	// GKE cluster name
	Name *string `pulumi:"name"`
	// GCP project id
	ProjectId *string `pulumi:"projectId"`
}

type GkeClusterIdState struct {
	// Service account email in cast project
	CastServiceAccount pulumi.StringPtrInput
	// Service account email in client project
	ClientServiceAccount pulumi.StringPtrInput
	// CAST.AI agent cluster token
	ClusterToken pulumi.StringPtrInput
	// GCP cluster zone in case of zonal or region in case of regional cluster
	Location pulumi.StringPtrInput
	// GKE cluster name
	Name pulumi.StringPtrInput
	// GCP project id
	ProjectId pulumi.StringPtrInput
}

func (GkeClusterIdState) ElementType() reflect.Type {
	return reflect.TypeOf((*gkeClusterIdState)(nil)).Elem()
}

type gkeClusterIdArgs struct {
	// Service account email in cast project
	CastServiceAccount *string `pulumi:"castServiceAccount"`
	// Service account email in client project
	ClientServiceAccount *string `pulumi:"clientServiceAccount"`
	// GCP cluster zone in case of zonal or region in case of regional cluster
	Location string `pulumi:"location"`
	// GKE cluster name
	Name *string `pulumi:"name"`
	// GCP project id
	ProjectId string `pulumi:"projectId"`
}

// The set of arguments for constructing a GkeClusterId resource.
type GkeClusterIdArgs struct {
	// Service account email in cast project
	CastServiceAccount pulumi.StringPtrInput
	// Service account email in client project
	ClientServiceAccount pulumi.StringPtrInput
	// GCP cluster zone in case of zonal or region in case of regional cluster
	Location pulumi.StringInput
	// GKE cluster name
	Name pulumi.StringPtrInput
	// GCP project id
	ProjectId pulumi.StringInput
}

func (GkeClusterIdArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*gkeClusterIdArgs)(nil)).Elem()
}

type GkeClusterIdInput interface {
	pulumi.Input

	ToGkeClusterIdOutput() GkeClusterIdOutput
	ToGkeClusterIdOutputWithContext(ctx context.Context) GkeClusterIdOutput
}

func (*GkeClusterId) ElementType() reflect.Type {
	return reflect.TypeOf((**GkeClusterId)(nil)).Elem()
}

func (i *GkeClusterId) ToGkeClusterIdOutput() GkeClusterIdOutput {
	return i.ToGkeClusterIdOutputWithContext(context.Background())
}

func (i *GkeClusterId) ToGkeClusterIdOutputWithContext(ctx context.Context) GkeClusterIdOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GkeClusterIdOutput)
}

// GkeClusterIdArrayInput is an input type that accepts GkeClusterIdArray and GkeClusterIdArrayOutput values.
// You can construct a concrete instance of `GkeClusterIdArrayInput` via:
//
//	GkeClusterIdArray{ GkeClusterIdArgs{...} }
type GkeClusterIdArrayInput interface {
	pulumi.Input

	ToGkeClusterIdArrayOutput() GkeClusterIdArrayOutput
	ToGkeClusterIdArrayOutputWithContext(context.Context) GkeClusterIdArrayOutput
}

type GkeClusterIdArray []GkeClusterIdInput

func (GkeClusterIdArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GkeClusterId)(nil)).Elem()
}

func (i GkeClusterIdArray) ToGkeClusterIdArrayOutput() GkeClusterIdArrayOutput {
	return i.ToGkeClusterIdArrayOutputWithContext(context.Background())
}

func (i GkeClusterIdArray) ToGkeClusterIdArrayOutputWithContext(ctx context.Context) GkeClusterIdArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GkeClusterIdArrayOutput)
}

// GkeClusterIdMapInput is an input type that accepts GkeClusterIdMap and GkeClusterIdMapOutput values.
// You can construct a concrete instance of `GkeClusterIdMapInput` via:
//
//	GkeClusterIdMap{ "key": GkeClusterIdArgs{...} }
type GkeClusterIdMapInput interface {
	pulumi.Input

	ToGkeClusterIdMapOutput() GkeClusterIdMapOutput
	ToGkeClusterIdMapOutputWithContext(context.Context) GkeClusterIdMapOutput
}

type GkeClusterIdMap map[string]GkeClusterIdInput

func (GkeClusterIdMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GkeClusterId)(nil)).Elem()
}

func (i GkeClusterIdMap) ToGkeClusterIdMapOutput() GkeClusterIdMapOutput {
	return i.ToGkeClusterIdMapOutputWithContext(context.Background())
}

func (i GkeClusterIdMap) ToGkeClusterIdMapOutputWithContext(ctx context.Context) GkeClusterIdMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GkeClusterIdMapOutput)
}

type GkeClusterIdOutput struct{ *pulumi.OutputState }

func (GkeClusterIdOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GkeClusterId)(nil)).Elem()
}

func (o GkeClusterIdOutput) ToGkeClusterIdOutput() GkeClusterIdOutput {
	return o
}

func (o GkeClusterIdOutput) ToGkeClusterIdOutputWithContext(ctx context.Context) GkeClusterIdOutput {
	return o
}

// Service account email in cast project
func (o GkeClusterIdOutput) CastServiceAccount() pulumi.StringOutput {
	return o.ApplyT(func(v *GkeClusterId) pulumi.StringOutput { return v.CastServiceAccount }).(pulumi.StringOutput)
}

// Service account email in client project
func (o GkeClusterIdOutput) ClientServiceAccount() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GkeClusterId) pulumi.StringPtrOutput { return v.ClientServiceAccount }).(pulumi.StringPtrOutput)
}

// CAST.AI agent cluster token
func (o GkeClusterIdOutput) ClusterToken() pulumi.StringOutput {
	return o.ApplyT(func(v *GkeClusterId) pulumi.StringOutput { return v.ClusterToken }).(pulumi.StringOutput)
}

// GCP cluster zone in case of zonal or region in case of regional cluster
func (o GkeClusterIdOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *GkeClusterId) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// GKE cluster name
func (o GkeClusterIdOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *GkeClusterId) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// GCP project id
func (o GkeClusterIdOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *GkeClusterId) pulumi.StringOutput { return v.ProjectId }).(pulumi.StringOutput)
}

type GkeClusterIdArrayOutput struct{ *pulumi.OutputState }

func (GkeClusterIdArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GkeClusterId)(nil)).Elem()
}

func (o GkeClusterIdArrayOutput) ToGkeClusterIdArrayOutput() GkeClusterIdArrayOutput {
	return o
}

func (o GkeClusterIdArrayOutput) ToGkeClusterIdArrayOutputWithContext(ctx context.Context) GkeClusterIdArrayOutput {
	return o
}

func (o GkeClusterIdArrayOutput) Index(i pulumi.IntInput) GkeClusterIdOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *GkeClusterId {
		return vs[0].([]*GkeClusterId)[vs[1].(int)]
	}).(GkeClusterIdOutput)
}

type GkeClusterIdMapOutput struct{ *pulumi.OutputState }

func (GkeClusterIdMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GkeClusterId)(nil)).Elem()
}

func (o GkeClusterIdMapOutput) ToGkeClusterIdMapOutput() GkeClusterIdMapOutput {
	return o
}

func (o GkeClusterIdMapOutput) ToGkeClusterIdMapOutputWithContext(ctx context.Context) GkeClusterIdMapOutput {
	return o
}

func (o GkeClusterIdMapOutput) MapIndex(k pulumi.StringInput) GkeClusterIdOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *GkeClusterId {
		return vs[0].(map[string]*GkeClusterId)[vs[1].(string)]
	}).(GkeClusterIdOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GkeClusterIdInput)(nil)).Elem(), &GkeClusterId{})
	pulumi.RegisterInputType(reflect.TypeOf((*GkeClusterIdArrayInput)(nil)).Elem(), GkeClusterIdArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GkeClusterIdMapInput)(nil)).Elem(), GkeClusterIdMap{})
	pulumi.RegisterOutputType(GkeClusterIdOutput{})
	pulumi.RegisterOutputType(GkeClusterIdArrayOutput{})
	pulumi.RegisterOutputType(GkeClusterIdMapOutput{})
}
