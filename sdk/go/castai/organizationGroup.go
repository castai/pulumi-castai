// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package castai

import (
	"context"
	"reflect"

	"errors"
	"github.com/castai/pulumi-castai/sdk/go/castai/internal"
	"github.com/castai/pulumi-castai/sdk/go/castai/organization"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type OrganizationGroup struct {
	pulumi.CustomResourceState

	// Description of the group.
	Description pulumi.StringPtrOutput                          `pulumi:"description"`
	Members     organization.OrganizationGroupMemberArrayOutput `pulumi:"members"`
	// Name of the group.
	Name pulumi.StringOutput `pulumi:"name"`
	// CAST AI organization ID.
	OrganizationId pulumi.StringOutput `pulumi:"organizationId"`
}

// NewOrganizationGroup registers a new resource with the given unique name, arguments, and options.
func NewOrganizationGroup(ctx *pulumi.Context,
	name string, args *OrganizationGroupArgs, opts ...pulumi.ResourceOption) (*OrganizationGroup, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.OrganizationId == nil {
		return nil, errors.New("invalid value for required argument 'OrganizationId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource OrganizationGroup
	err := ctx.RegisterResource("castai:organization:OrganizationGroup", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetOrganizationGroup gets an existing OrganizationGroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetOrganizationGroup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *OrganizationGroupState, opts ...pulumi.ResourceOption) (*OrganizationGroup, error) {
	var resource OrganizationGroup
	err := ctx.ReadResource("castai:organization:OrganizationGroup", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering OrganizationGroup resources.
type organizationGroupState struct {
	// Description of the group.
	Description *string                                `pulumi:"description"`
	Members     []organization.OrganizationGroupMember `pulumi:"members"`
	// Name of the group.
	Name *string `pulumi:"name"`
	// CAST AI organization ID.
	OrganizationId *string `pulumi:"organizationId"`
}

type OrganizationGroupState struct {
	// Description of the group.
	Description pulumi.StringPtrInput
	Members     organization.OrganizationGroupMemberArrayInput
	// Name of the group.
	Name pulumi.StringPtrInput
	// CAST AI organization ID.
	OrganizationId pulumi.StringPtrInput
}

func (OrganizationGroupState) ElementType() reflect.Type {
	return reflect.TypeOf((*organizationGroupState)(nil)).Elem()
}

type organizationGroupArgs struct {
	// Description of the group.
	Description *string                                `pulumi:"description"`
	Members     []organization.OrganizationGroupMember `pulumi:"members"`
	// Name of the group.
	Name *string `pulumi:"name"`
	// CAST AI organization ID.
	OrganizationId string `pulumi:"organizationId"`
}

// The set of arguments for constructing a OrganizationGroup resource.
type OrganizationGroupArgs struct {
	// Description of the group.
	Description pulumi.StringPtrInput
	Members     organization.OrganizationGroupMemberArrayInput
	// Name of the group.
	Name pulumi.StringPtrInput
	// CAST AI organization ID.
	OrganizationId pulumi.StringInput
}

func (OrganizationGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*organizationGroupArgs)(nil)).Elem()
}

type OrganizationGroupInput interface {
	pulumi.Input

	ToOrganizationGroupOutput() OrganizationGroupOutput
	ToOrganizationGroupOutputWithContext(ctx context.Context) OrganizationGroupOutput
}

func (*OrganizationGroup) ElementType() reflect.Type {
	return reflect.TypeOf((**OrganizationGroup)(nil)).Elem()
}

func (i *OrganizationGroup) ToOrganizationGroupOutput() OrganizationGroupOutput {
	return i.ToOrganizationGroupOutputWithContext(context.Background())
}

func (i *OrganizationGroup) ToOrganizationGroupOutputWithContext(ctx context.Context) OrganizationGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrganizationGroupOutput)
}

// OrganizationGroupArrayInput is an input type that accepts OrganizationGroupArray and OrganizationGroupArrayOutput values.
// You can construct a concrete instance of `OrganizationGroupArrayInput` via:
//
//	OrganizationGroupArray{ OrganizationGroupArgs{...} }
type OrganizationGroupArrayInput interface {
	pulumi.Input

	ToOrganizationGroupArrayOutput() OrganizationGroupArrayOutput
	ToOrganizationGroupArrayOutputWithContext(context.Context) OrganizationGroupArrayOutput
}

type OrganizationGroupArray []OrganizationGroupInput

func (OrganizationGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OrganizationGroup)(nil)).Elem()
}

func (i OrganizationGroupArray) ToOrganizationGroupArrayOutput() OrganizationGroupArrayOutput {
	return i.ToOrganizationGroupArrayOutputWithContext(context.Background())
}

func (i OrganizationGroupArray) ToOrganizationGroupArrayOutputWithContext(ctx context.Context) OrganizationGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrganizationGroupArrayOutput)
}

// OrganizationGroupMapInput is an input type that accepts OrganizationGroupMap and OrganizationGroupMapOutput values.
// You can construct a concrete instance of `OrganizationGroupMapInput` via:
//
//	OrganizationGroupMap{ "key": OrganizationGroupArgs{...} }
type OrganizationGroupMapInput interface {
	pulumi.Input

	ToOrganizationGroupMapOutput() OrganizationGroupMapOutput
	ToOrganizationGroupMapOutputWithContext(context.Context) OrganizationGroupMapOutput
}

type OrganizationGroupMap map[string]OrganizationGroupInput

func (OrganizationGroupMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OrganizationGroup)(nil)).Elem()
}

func (i OrganizationGroupMap) ToOrganizationGroupMapOutput() OrganizationGroupMapOutput {
	return i.ToOrganizationGroupMapOutputWithContext(context.Background())
}

func (i OrganizationGroupMap) ToOrganizationGroupMapOutputWithContext(ctx context.Context) OrganizationGroupMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrganizationGroupMapOutput)
}

type OrganizationGroupOutput struct{ *pulumi.OutputState }

func (OrganizationGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OrganizationGroup)(nil)).Elem()
}

func (o OrganizationGroupOutput) ToOrganizationGroupOutput() OrganizationGroupOutput {
	return o
}

func (o OrganizationGroupOutput) ToOrganizationGroupOutputWithContext(ctx context.Context) OrganizationGroupOutput {
	return o
}

// Description of the group.
func (o OrganizationGroupOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OrganizationGroup) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

func (o OrganizationGroupOutput) Members() organization.OrganizationGroupMemberArrayOutput {
	return o.ApplyT(func(v *OrganizationGroup) organization.OrganizationGroupMemberArrayOutput { return v.Members }).(organization.OrganizationGroupMemberArrayOutput)
}

// Name of the group.
func (o OrganizationGroupOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *OrganizationGroup) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// CAST AI organization ID.
func (o OrganizationGroupOutput) OrganizationId() pulumi.StringOutput {
	return o.ApplyT(func(v *OrganizationGroup) pulumi.StringOutput { return v.OrganizationId }).(pulumi.StringOutput)
}

type OrganizationGroupArrayOutput struct{ *pulumi.OutputState }

func (OrganizationGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OrganizationGroup)(nil)).Elem()
}

func (o OrganizationGroupArrayOutput) ToOrganizationGroupArrayOutput() OrganizationGroupArrayOutput {
	return o
}

func (o OrganizationGroupArrayOutput) ToOrganizationGroupArrayOutputWithContext(ctx context.Context) OrganizationGroupArrayOutput {
	return o
}

func (o OrganizationGroupArrayOutput) Index(i pulumi.IntInput) OrganizationGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *OrganizationGroup {
		return vs[0].([]*OrganizationGroup)[vs[1].(int)]
	}).(OrganizationGroupOutput)
}

type OrganizationGroupMapOutput struct{ *pulumi.OutputState }

func (OrganizationGroupMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OrganizationGroup)(nil)).Elem()
}

func (o OrganizationGroupMapOutput) ToOrganizationGroupMapOutput() OrganizationGroupMapOutput {
	return o
}

func (o OrganizationGroupMapOutput) ToOrganizationGroupMapOutputWithContext(ctx context.Context) OrganizationGroupMapOutput {
	return o
}

func (o OrganizationGroupMapOutput) MapIndex(k pulumi.StringInput) OrganizationGroupOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *OrganizationGroup {
		return vs[0].(map[string]*OrganizationGroup)[vs[1].(string)]
	}).(OrganizationGroupOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*OrganizationGroupInput)(nil)).Elem(), &OrganizationGroup{})
	pulumi.RegisterInputType(reflect.TypeOf((*OrganizationGroupArrayInput)(nil)).Elem(), OrganizationGroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*OrganizationGroupMapInput)(nil)).Elem(), OrganizationGroupMap{})
	pulumi.RegisterOutputType(OrganizationGroupOutput{})
	pulumi.RegisterOutputType(OrganizationGroupArrayOutput{})
	pulumi.RegisterOutputType(OrganizationGroupMapOutput{})
}
