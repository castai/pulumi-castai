// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package castai

import (
	"context"
	"reflect"

	"errors"
	"github.com/castai/pulumi-castai/sdk/go/castai/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type SecurityRuntimeRule struct {
	pulumi.CustomResourceState

	// Number of anomalies detected using this rule.
	AnomaliesCount pulumi.IntOutput `pulumi:"anomaliesCount"`
	// Category of the rule.
	Category pulumi.StringPtrOutput `pulumi:"category"`
	// Whether the rule is enabled.
	Enabled pulumi.BoolPtrOutput `pulumi:"enabled"`
	// Indicates whether the rule is a built-in rule.
	IsBuiltIn pulumi.BoolOutput `pulumi:"isBuiltIn"`
	// Key-value labels attached to the rule.
	Labels pulumi.StringMapOutput `pulumi:"labels"`
	Name   pulumi.StringOutput    `pulumi:"name"`
	// Optional CEL expression for resource selection.
	ResourceSelector pulumi.StringPtrOutput `pulumi:"resourceSelector"`
	// The engine type used to evaluate the rule. Only RULE_ENGINE_TYPE_CEL is currently supported.
	RuleEngineType pulumi.StringPtrOutput `pulumi:"ruleEngineType"`
	// CEL rule expression text.
	RuleText pulumi.StringOutput `pulumi:"ruleText"`
	// Severity of the rule. One of SEVERITY_CRITICAL, SEVERITY_HIGH, SEVERITY_MEDIUM, SEVERITY_LOW, SEVERITY_NONE.
	Severity pulumi.StringOutput `pulumi:"severity"`
	// Type of the rule (internal value).
	Type pulumi.StringOutput `pulumi:"type"`
	// Custom lists used in this rule, if any.
	UsedCustomLists pulumi.StringArrayOutput `pulumi:"usedCustomLists"`
}

// NewSecurityRuntimeRule registers a new resource with the given unique name, arguments, and options.
func NewSecurityRuntimeRule(ctx *pulumi.Context,
	name string, args *SecurityRuntimeRuleArgs, opts ...pulumi.ResourceOption) (*SecurityRuntimeRule, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.RuleText == nil {
		return nil, errors.New("invalid value for required argument 'RuleText'")
	}
	if args.Severity == nil {
		return nil, errors.New("invalid value for required argument 'Severity'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SecurityRuntimeRule
	err := ctx.RegisterResource("castai:index:SecurityRuntimeRule", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSecurityRuntimeRule gets an existing SecurityRuntimeRule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSecurityRuntimeRule(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SecurityRuntimeRuleState, opts ...pulumi.ResourceOption) (*SecurityRuntimeRule, error) {
	var resource SecurityRuntimeRule
	err := ctx.ReadResource("castai:index:SecurityRuntimeRule", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SecurityRuntimeRule resources.
type securityRuntimeRuleState struct {
	// Number of anomalies detected using this rule.
	AnomaliesCount *int `pulumi:"anomaliesCount"`
	// Category of the rule.
	Category *string `pulumi:"category"`
	// Whether the rule is enabled.
	Enabled *bool `pulumi:"enabled"`
	// Indicates whether the rule is a built-in rule.
	IsBuiltIn *bool `pulumi:"isBuiltIn"`
	// Key-value labels attached to the rule.
	Labels map[string]string `pulumi:"labels"`
	Name   *string           `pulumi:"name"`
	// Optional CEL expression for resource selection.
	ResourceSelector *string `pulumi:"resourceSelector"`
	// The engine type used to evaluate the rule. Only RULE_ENGINE_TYPE_CEL is currently supported.
	RuleEngineType *string `pulumi:"ruleEngineType"`
	// CEL rule expression text.
	RuleText *string `pulumi:"ruleText"`
	// Severity of the rule. One of SEVERITY_CRITICAL, SEVERITY_HIGH, SEVERITY_MEDIUM, SEVERITY_LOW, SEVERITY_NONE.
	Severity *string `pulumi:"severity"`
	// Type of the rule (internal value).
	Type *string `pulumi:"type"`
	// Custom lists used in this rule, if any.
	UsedCustomLists []string `pulumi:"usedCustomLists"`
}

type SecurityRuntimeRuleState struct {
	// Number of anomalies detected using this rule.
	AnomaliesCount pulumi.IntPtrInput
	// Category of the rule.
	Category pulumi.StringPtrInput
	// Whether the rule is enabled.
	Enabled pulumi.BoolPtrInput
	// Indicates whether the rule is a built-in rule.
	IsBuiltIn pulumi.BoolPtrInput
	// Key-value labels attached to the rule.
	Labels pulumi.StringMapInput
	Name   pulumi.StringPtrInput
	// Optional CEL expression for resource selection.
	ResourceSelector pulumi.StringPtrInput
	// The engine type used to evaluate the rule. Only RULE_ENGINE_TYPE_CEL is currently supported.
	RuleEngineType pulumi.StringPtrInput
	// CEL rule expression text.
	RuleText pulumi.StringPtrInput
	// Severity of the rule. One of SEVERITY_CRITICAL, SEVERITY_HIGH, SEVERITY_MEDIUM, SEVERITY_LOW, SEVERITY_NONE.
	Severity pulumi.StringPtrInput
	// Type of the rule (internal value).
	Type pulumi.StringPtrInput
	// Custom lists used in this rule, if any.
	UsedCustomLists pulumi.StringArrayInput
}

func (SecurityRuntimeRuleState) ElementType() reflect.Type {
	return reflect.TypeOf((*securityRuntimeRuleState)(nil)).Elem()
}

type securityRuntimeRuleArgs struct {
	// Category of the rule.
	Category *string `pulumi:"category"`
	// Whether the rule is enabled.
	Enabled *bool `pulumi:"enabled"`
	// Key-value labels attached to the rule.
	Labels map[string]string `pulumi:"labels"`
	Name   *string           `pulumi:"name"`
	// Optional CEL expression for resource selection.
	ResourceSelector *string `pulumi:"resourceSelector"`
	// The engine type used to evaluate the rule. Only RULE_ENGINE_TYPE_CEL is currently supported.
	RuleEngineType *string `pulumi:"ruleEngineType"`
	// CEL rule expression text.
	RuleText string `pulumi:"ruleText"`
	// Severity of the rule. One of SEVERITY_CRITICAL, SEVERITY_HIGH, SEVERITY_MEDIUM, SEVERITY_LOW, SEVERITY_NONE.
	Severity string `pulumi:"severity"`
}

// The set of arguments for constructing a SecurityRuntimeRule resource.
type SecurityRuntimeRuleArgs struct {
	// Category of the rule.
	Category pulumi.StringPtrInput
	// Whether the rule is enabled.
	Enabled pulumi.BoolPtrInput
	// Key-value labels attached to the rule.
	Labels pulumi.StringMapInput
	Name   pulumi.StringPtrInput
	// Optional CEL expression for resource selection.
	ResourceSelector pulumi.StringPtrInput
	// The engine type used to evaluate the rule. Only RULE_ENGINE_TYPE_CEL is currently supported.
	RuleEngineType pulumi.StringPtrInput
	// CEL rule expression text.
	RuleText pulumi.StringInput
	// Severity of the rule. One of SEVERITY_CRITICAL, SEVERITY_HIGH, SEVERITY_MEDIUM, SEVERITY_LOW, SEVERITY_NONE.
	Severity pulumi.StringInput
}

func (SecurityRuntimeRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*securityRuntimeRuleArgs)(nil)).Elem()
}

type SecurityRuntimeRuleInput interface {
	pulumi.Input

	ToSecurityRuntimeRuleOutput() SecurityRuntimeRuleOutput
	ToSecurityRuntimeRuleOutputWithContext(ctx context.Context) SecurityRuntimeRuleOutput
}

func (*SecurityRuntimeRule) ElementType() reflect.Type {
	return reflect.TypeOf((**SecurityRuntimeRule)(nil)).Elem()
}

func (i *SecurityRuntimeRule) ToSecurityRuntimeRuleOutput() SecurityRuntimeRuleOutput {
	return i.ToSecurityRuntimeRuleOutputWithContext(context.Background())
}

func (i *SecurityRuntimeRule) ToSecurityRuntimeRuleOutputWithContext(ctx context.Context) SecurityRuntimeRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityRuntimeRuleOutput)
}

// SecurityRuntimeRuleArrayInput is an input type that accepts SecurityRuntimeRuleArray and SecurityRuntimeRuleArrayOutput values.
// You can construct a concrete instance of `SecurityRuntimeRuleArrayInput` via:
//
//	SecurityRuntimeRuleArray{ SecurityRuntimeRuleArgs{...} }
type SecurityRuntimeRuleArrayInput interface {
	pulumi.Input

	ToSecurityRuntimeRuleArrayOutput() SecurityRuntimeRuleArrayOutput
	ToSecurityRuntimeRuleArrayOutputWithContext(context.Context) SecurityRuntimeRuleArrayOutput
}

type SecurityRuntimeRuleArray []SecurityRuntimeRuleInput

func (SecurityRuntimeRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SecurityRuntimeRule)(nil)).Elem()
}

func (i SecurityRuntimeRuleArray) ToSecurityRuntimeRuleArrayOutput() SecurityRuntimeRuleArrayOutput {
	return i.ToSecurityRuntimeRuleArrayOutputWithContext(context.Background())
}

func (i SecurityRuntimeRuleArray) ToSecurityRuntimeRuleArrayOutputWithContext(ctx context.Context) SecurityRuntimeRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityRuntimeRuleArrayOutput)
}

// SecurityRuntimeRuleMapInput is an input type that accepts SecurityRuntimeRuleMap and SecurityRuntimeRuleMapOutput values.
// You can construct a concrete instance of `SecurityRuntimeRuleMapInput` via:
//
//	SecurityRuntimeRuleMap{ "key": SecurityRuntimeRuleArgs{...} }
type SecurityRuntimeRuleMapInput interface {
	pulumi.Input

	ToSecurityRuntimeRuleMapOutput() SecurityRuntimeRuleMapOutput
	ToSecurityRuntimeRuleMapOutputWithContext(context.Context) SecurityRuntimeRuleMapOutput
}

type SecurityRuntimeRuleMap map[string]SecurityRuntimeRuleInput

func (SecurityRuntimeRuleMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SecurityRuntimeRule)(nil)).Elem()
}

func (i SecurityRuntimeRuleMap) ToSecurityRuntimeRuleMapOutput() SecurityRuntimeRuleMapOutput {
	return i.ToSecurityRuntimeRuleMapOutputWithContext(context.Background())
}

func (i SecurityRuntimeRuleMap) ToSecurityRuntimeRuleMapOutputWithContext(ctx context.Context) SecurityRuntimeRuleMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityRuntimeRuleMapOutput)
}

type SecurityRuntimeRuleOutput struct{ *pulumi.OutputState }

func (SecurityRuntimeRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SecurityRuntimeRule)(nil)).Elem()
}

func (o SecurityRuntimeRuleOutput) ToSecurityRuntimeRuleOutput() SecurityRuntimeRuleOutput {
	return o
}

func (o SecurityRuntimeRuleOutput) ToSecurityRuntimeRuleOutputWithContext(ctx context.Context) SecurityRuntimeRuleOutput {
	return o
}

// Number of anomalies detected using this rule.
func (o SecurityRuntimeRuleOutput) AnomaliesCount() pulumi.IntOutput {
	return o.ApplyT(func(v *SecurityRuntimeRule) pulumi.IntOutput { return v.AnomaliesCount }).(pulumi.IntOutput)
}

// Category of the rule.
func (o SecurityRuntimeRuleOutput) Category() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecurityRuntimeRule) pulumi.StringPtrOutput { return v.Category }).(pulumi.StringPtrOutput)
}

// Whether the rule is enabled.
func (o SecurityRuntimeRuleOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SecurityRuntimeRule) pulumi.BoolPtrOutput { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// Indicates whether the rule is a built-in rule.
func (o SecurityRuntimeRuleOutput) IsBuiltIn() pulumi.BoolOutput {
	return o.ApplyT(func(v *SecurityRuntimeRule) pulumi.BoolOutput { return v.IsBuiltIn }).(pulumi.BoolOutput)
}

// Key-value labels attached to the rule.
func (o SecurityRuntimeRuleOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *SecurityRuntimeRule) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

func (o SecurityRuntimeRuleOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *SecurityRuntimeRule) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Optional CEL expression for resource selection.
func (o SecurityRuntimeRuleOutput) ResourceSelector() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecurityRuntimeRule) pulumi.StringPtrOutput { return v.ResourceSelector }).(pulumi.StringPtrOutput)
}

// The engine type used to evaluate the rule. Only RULE_ENGINE_TYPE_CEL is currently supported.
func (o SecurityRuntimeRuleOutput) RuleEngineType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecurityRuntimeRule) pulumi.StringPtrOutput { return v.RuleEngineType }).(pulumi.StringPtrOutput)
}

// CEL rule expression text.
func (o SecurityRuntimeRuleOutput) RuleText() pulumi.StringOutput {
	return o.ApplyT(func(v *SecurityRuntimeRule) pulumi.StringOutput { return v.RuleText }).(pulumi.StringOutput)
}

// Severity of the rule. One of SEVERITY_CRITICAL, SEVERITY_HIGH, SEVERITY_MEDIUM, SEVERITY_LOW, SEVERITY_NONE.
func (o SecurityRuntimeRuleOutput) Severity() pulumi.StringOutput {
	return o.ApplyT(func(v *SecurityRuntimeRule) pulumi.StringOutput { return v.Severity }).(pulumi.StringOutput)
}

// Type of the rule (internal value).
func (o SecurityRuntimeRuleOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *SecurityRuntimeRule) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// Custom lists used in this rule, if any.
func (o SecurityRuntimeRuleOutput) UsedCustomLists() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SecurityRuntimeRule) pulumi.StringArrayOutput { return v.UsedCustomLists }).(pulumi.StringArrayOutput)
}

type SecurityRuntimeRuleArrayOutput struct{ *pulumi.OutputState }

func (SecurityRuntimeRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SecurityRuntimeRule)(nil)).Elem()
}

func (o SecurityRuntimeRuleArrayOutput) ToSecurityRuntimeRuleArrayOutput() SecurityRuntimeRuleArrayOutput {
	return o
}

func (o SecurityRuntimeRuleArrayOutput) ToSecurityRuntimeRuleArrayOutputWithContext(ctx context.Context) SecurityRuntimeRuleArrayOutput {
	return o
}

func (o SecurityRuntimeRuleArrayOutput) Index(i pulumi.IntInput) SecurityRuntimeRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SecurityRuntimeRule {
		return vs[0].([]*SecurityRuntimeRule)[vs[1].(int)]
	}).(SecurityRuntimeRuleOutput)
}

type SecurityRuntimeRuleMapOutput struct{ *pulumi.OutputState }

func (SecurityRuntimeRuleMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SecurityRuntimeRule)(nil)).Elem()
}

func (o SecurityRuntimeRuleMapOutput) ToSecurityRuntimeRuleMapOutput() SecurityRuntimeRuleMapOutput {
	return o
}

func (o SecurityRuntimeRuleMapOutput) ToSecurityRuntimeRuleMapOutputWithContext(ctx context.Context) SecurityRuntimeRuleMapOutput {
	return o
}

func (o SecurityRuntimeRuleMapOutput) MapIndex(k pulumi.StringInput) SecurityRuntimeRuleOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SecurityRuntimeRule {
		return vs[0].(map[string]*SecurityRuntimeRule)[vs[1].(string)]
	}).(SecurityRuntimeRuleOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SecurityRuntimeRuleInput)(nil)).Elem(), &SecurityRuntimeRule{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecurityRuntimeRuleArrayInput)(nil)).Elem(), SecurityRuntimeRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecurityRuntimeRuleMapInput)(nil)).Elem(), SecurityRuntimeRuleMap{})
	pulumi.RegisterOutputType(SecurityRuntimeRuleOutput{})
	pulumi.RegisterOutputType(SecurityRuntimeRuleArrayOutput{})
	pulumi.RegisterOutputType(SecurityRuntimeRuleMapOutput{})
}
