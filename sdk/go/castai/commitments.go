// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package castai

import (
	"context"
	"reflect"

	"github.com/castai/pulumi-castai/sdk/go/castai/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Commitments struct {
	pulumi.CustomResourceState

	// List of Azure reservations.
	AzureReservations CommitmentsAzureReservationArrayOutput `pulumi:"azureReservations"`
	// CSV file containing reservations exported from Azure.
	AzureReservationsCsv pulumi.StringPtrOutput `pulumi:"azureReservationsCsv"`
	// List of commitment configurations.
	CommitmentConfigs CommitmentsCommitmentConfigArrayOutput `pulumi:"commitmentConfigs"`
	// List of GCP CUDs.
	GcpCuds CommitmentsGcpCudArrayOutput `pulumi:"gcpCuds"`
	// JSON file containing CUDs exported from GCP.
	GcpCudsJson pulumi.StringPtrOutput `pulumi:"gcpCudsJson"`
}

// NewCommitments registers a new resource with the given unique name, arguments, and options.
func NewCommitments(ctx *pulumi.Context,
	name string, args *CommitmentsArgs, opts ...pulumi.ResourceOption) (*Commitments, error) {
	if args == nil {
		args = &CommitmentsArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Commitments
	err := ctx.RegisterResource("castai:index:Commitments", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCommitments gets an existing Commitments resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCommitments(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CommitmentsState, opts ...pulumi.ResourceOption) (*Commitments, error) {
	var resource Commitments
	err := ctx.ReadResource("castai:index:Commitments", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Commitments resources.
type commitmentsState struct {
	// List of Azure reservations.
	AzureReservations []CommitmentsAzureReservation `pulumi:"azureReservations"`
	// CSV file containing reservations exported from Azure.
	AzureReservationsCsv *string `pulumi:"azureReservationsCsv"`
	// List of commitment configurations.
	CommitmentConfigs []CommitmentsCommitmentConfig `pulumi:"commitmentConfigs"`
	// List of GCP CUDs.
	GcpCuds []CommitmentsGcpCud `pulumi:"gcpCuds"`
	// JSON file containing CUDs exported from GCP.
	GcpCudsJson *string `pulumi:"gcpCudsJson"`
}

type CommitmentsState struct {
	// List of Azure reservations.
	AzureReservations CommitmentsAzureReservationArrayInput
	// CSV file containing reservations exported from Azure.
	AzureReservationsCsv pulumi.StringPtrInput
	// List of commitment configurations.
	CommitmentConfigs CommitmentsCommitmentConfigArrayInput
	// List of GCP CUDs.
	GcpCuds CommitmentsGcpCudArrayInput
	// JSON file containing CUDs exported from GCP.
	GcpCudsJson pulumi.StringPtrInput
}

func (CommitmentsState) ElementType() reflect.Type {
	return reflect.TypeOf((*commitmentsState)(nil)).Elem()
}

type commitmentsArgs struct {
	// CSV file containing reservations exported from Azure.
	AzureReservationsCsv *string `pulumi:"azureReservationsCsv"`
	// List of commitment configurations.
	CommitmentConfigs []CommitmentsCommitmentConfig `pulumi:"commitmentConfigs"`
	// JSON file containing CUDs exported from GCP.
	GcpCudsJson *string `pulumi:"gcpCudsJson"`
}

// The set of arguments for constructing a Commitments resource.
type CommitmentsArgs struct {
	// CSV file containing reservations exported from Azure.
	AzureReservationsCsv pulumi.StringPtrInput
	// List of commitment configurations.
	CommitmentConfigs CommitmentsCommitmentConfigArrayInput
	// JSON file containing CUDs exported from GCP.
	GcpCudsJson pulumi.StringPtrInput
}

func (CommitmentsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*commitmentsArgs)(nil)).Elem()
}

type CommitmentsInput interface {
	pulumi.Input

	ToCommitmentsOutput() CommitmentsOutput
	ToCommitmentsOutputWithContext(ctx context.Context) CommitmentsOutput
}

func (*Commitments) ElementType() reflect.Type {
	return reflect.TypeOf((**Commitments)(nil)).Elem()
}

func (i *Commitments) ToCommitmentsOutput() CommitmentsOutput {
	return i.ToCommitmentsOutputWithContext(context.Background())
}

func (i *Commitments) ToCommitmentsOutputWithContext(ctx context.Context) CommitmentsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CommitmentsOutput)
}

// CommitmentsArrayInput is an input type that accepts CommitmentsArray and CommitmentsArrayOutput values.
// You can construct a concrete instance of `CommitmentsArrayInput` via:
//
//	CommitmentsArray{ CommitmentsArgs{...} }
type CommitmentsArrayInput interface {
	pulumi.Input

	ToCommitmentsArrayOutput() CommitmentsArrayOutput
	ToCommitmentsArrayOutputWithContext(context.Context) CommitmentsArrayOutput
}

type CommitmentsArray []CommitmentsInput

func (CommitmentsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Commitments)(nil)).Elem()
}

func (i CommitmentsArray) ToCommitmentsArrayOutput() CommitmentsArrayOutput {
	return i.ToCommitmentsArrayOutputWithContext(context.Background())
}

func (i CommitmentsArray) ToCommitmentsArrayOutputWithContext(ctx context.Context) CommitmentsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CommitmentsArrayOutput)
}

// CommitmentsMapInput is an input type that accepts CommitmentsMap and CommitmentsMapOutput values.
// You can construct a concrete instance of `CommitmentsMapInput` via:
//
//	CommitmentsMap{ "key": CommitmentsArgs{...} }
type CommitmentsMapInput interface {
	pulumi.Input

	ToCommitmentsMapOutput() CommitmentsMapOutput
	ToCommitmentsMapOutputWithContext(context.Context) CommitmentsMapOutput
}

type CommitmentsMap map[string]CommitmentsInput

func (CommitmentsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Commitments)(nil)).Elem()
}

func (i CommitmentsMap) ToCommitmentsMapOutput() CommitmentsMapOutput {
	return i.ToCommitmentsMapOutputWithContext(context.Background())
}

func (i CommitmentsMap) ToCommitmentsMapOutputWithContext(ctx context.Context) CommitmentsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CommitmentsMapOutput)
}

type CommitmentsOutput struct{ *pulumi.OutputState }

func (CommitmentsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Commitments)(nil)).Elem()
}

func (o CommitmentsOutput) ToCommitmentsOutput() CommitmentsOutput {
	return o
}

func (o CommitmentsOutput) ToCommitmentsOutputWithContext(ctx context.Context) CommitmentsOutput {
	return o
}

// List of Azure reservations.
func (o CommitmentsOutput) AzureReservations() CommitmentsAzureReservationArrayOutput {
	return o.ApplyT(func(v *Commitments) CommitmentsAzureReservationArrayOutput { return v.AzureReservations }).(CommitmentsAzureReservationArrayOutput)
}

// CSV file containing reservations exported from Azure.
func (o CommitmentsOutput) AzureReservationsCsv() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Commitments) pulumi.StringPtrOutput { return v.AzureReservationsCsv }).(pulumi.StringPtrOutput)
}

// List of commitment configurations.
func (o CommitmentsOutput) CommitmentConfigs() CommitmentsCommitmentConfigArrayOutput {
	return o.ApplyT(func(v *Commitments) CommitmentsCommitmentConfigArrayOutput { return v.CommitmentConfigs }).(CommitmentsCommitmentConfigArrayOutput)
}

// List of GCP CUDs.
func (o CommitmentsOutput) GcpCuds() CommitmentsGcpCudArrayOutput {
	return o.ApplyT(func(v *Commitments) CommitmentsGcpCudArrayOutput { return v.GcpCuds }).(CommitmentsGcpCudArrayOutput)
}

// JSON file containing CUDs exported from GCP.
func (o CommitmentsOutput) GcpCudsJson() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Commitments) pulumi.StringPtrOutput { return v.GcpCudsJson }).(pulumi.StringPtrOutput)
}

type CommitmentsArrayOutput struct{ *pulumi.OutputState }

func (CommitmentsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Commitments)(nil)).Elem()
}

func (o CommitmentsArrayOutput) ToCommitmentsArrayOutput() CommitmentsArrayOutput {
	return o
}

func (o CommitmentsArrayOutput) ToCommitmentsArrayOutputWithContext(ctx context.Context) CommitmentsArrayOutput {
	return o
}

func (o CommitmentsArrayOutput) Index(i pulumi.IntInput) CommitmentsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Commitments {
		return vs[0].([]*Commitments)[vs[1].(int)]
	}).(CommitmentsOutput)
}

type CommitmentsMapOutput struct{ *pulumi.OutputState }

func (CommitmentsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Commitments)(nil)).Elem()
}

func (o CommitmentsMapOutput) ToCommitmentsMapOutput() CommitmentsMapOutput {
	return o
}

func (o CommitmentsMapOutput) ToCommitmentsMapOutputWithContext(ctx context.Context) CommitmentsMapOutput {
	return o
}

func (o CommitmentsMapOutput) MapIndex(k pulumi.StringInput) CommitmentsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Commitments {
		return vs[0].(map[string]*Commitments)[vs[1].(string)]
	}).(CommitmentsOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CommitmentsInput)(nil)).Elem(), &Commitments{})
	pulumi.RegisterInputType(reflect.TypeOf((*CommitmentsArrayInput)(nil)).Elem(), CommitmentsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CommitmentsMapInput)(nil)).Elem(), CommitmentsMap{})
	pulumi.RegisterOutputType(CommitmentsOutput{})
	pulumi.RegisterOutputType(CommitmentsArrayOutput{})
	pulumi.RegisterOutputType(CommitmentsMapOutput{})
}
