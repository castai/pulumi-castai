// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package castai

import (
	"context"
	"reflect"

	"errors"
	"github.com/castai/pulumi-castai/sdk/go/castai/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type EksCluster struct {
	pulumi.CustomResourceState

	// ID of AWS account
	AccountId pulumi.StringOutput `pulumi:"accountId"`
	// AWS IAM role ARN that will be assumed by CAST AI user. This role should allow `sts:AssumeRole` action for CAST AI user.
	AssumeRoleArn pulumi.StringPtrOutput `pulumi:"assumeRoleArn"`
	// computed value to store cluster token
	ClusterToken pulumi.StringOutput `pulumi:"clusterToken"`
	// CAST AI internal credentials ID
	CredentialsId pulumi.StringOutput `pulumi:"credentialsId"`
	// Should CAST AI remove nodes managed by CAST AI on disconnect
	DeleteNodesOnDisconnect pulumi.BoolPtrOutput `pulumi:"deleteNodesOnDisconnect"`
	// name of your EKS cluster
	Name pulumi.StringOutput `pulumi:"name"`
	// AWS region where the cluster is placed
	Region pulumi.StringOutput `pulumi:"region"`
}

// NewEksCluster registers a new resource with the given unique name, arguments, and options.
func NewEksCluster(ctx *pulumi.Context,
	name string, args *EksClusterArgs, opts ...pulumi.ResourceOption) (*EksCluster, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AccountId == nil {
		return nil, errors.New("invalid value for required argument 'AccountId'")
	}
	if args.Region == nil {
		return nil, errors.New("invalid value for required argument 'Region'")
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"clusterToken",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource EksCluster
	err := ctx.RegisterResource("castai:aws:EksCluster", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEksCluster gets an existing EksCluster resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEksCluster(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EksClusterState, opts ...pulumi.ResourceOption) (*EksCluster, error) {
	var resource EksCluster
	err := ctx.ReadResource("castai:aws:EksCluster", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering EksCluster resources.
type eksClusterState struct {
	// ID of AWS account
	AccountId *string `pulumi:"accountId"`
	// AWS IAM role ARN that will be assumed by CAST AI user. This role should allow `sts:AssumeRole` action for CAST AI user.
	AssumeRoleArn *string `pulumi:"assumeRoleArn"`
	// computed value to store cluster token
	ClusterToken *string `pulumi:"clusterToken"`
	// CAST AI internal credentials ID
	CredentialsId *string `pulumi:"credentialsId"`
	// Should CAST AI remove nodes managed by CAST AI on disconnect
	DeleteNodesOnDisconnect *bool `pulumi:"deleteNodesOnDisconnect"`
	// name of your EKS cluster
	Name *string `pulumi:"name"`
	// AWS region where the cluster is placed
	Region *string `pulumi:"region"`
}

type EksClusterState struct {
	// ID of AWS account
	AccountId pulumi.StringPtrInput
	// AWS IAM role ARN that will be assumed by CAST AI user. This role should allow `sts:AssumeRole` action for CAST AI user.
	AssumeRoleArn pulumi.StringPtrInput
	// computed value to store cluster token
	ClusterToken pulumi.StringPtrInput
	// CAST AI internal credentials ID
	CredentialsId pulumi.StringPtrInput
	// Should CAST AI remove nodes managed by CAST AI on disconnect
	DeleteNodesOnDisconnect pulumi.BoolPtrInput
	// name of your EKS cluster
	Name pulumi.StringPtrInput
	// AWS region where the cluster is placed
	Region pulumi.StringPtrInput
}

func (EksClusterState) ElementType() reflect.Type {
	return reflect.TypeOf((*eksClusterState)(nil)).Elem()
}

type eksClusterArgs struct {
	// ID of AWS account
	AccountId string `pulumi:"accountId"`
	// AWS IAM role ARN that will be assumed by CAST AI user. This role should allow `sts:AssumeRole` action for CAST AI user.
	AssumeRoleArn *string `pulumi:"assumeRoleArn"`
	// Should CAST AI remove nodes managed by CAST AI on disconnect
	DeleteNodesOnDisconnect *bool `pulumi:"deleteNodesOnDisconnect"`
	// name of your EKS cluster
	Name *string `pulumi:"name"`
	// AWS region where the cluster is placed
	Region string `pulumi:"region"`
}

// The set of arguments for constructing a EksCluster resource.
type EksClusterArgs struct {
	// ID of AWS account
	AccountId pulumi.StringInput
	// AWS IAM role ARN that will be assumed by CAST AI user. This role should allow `sts:AssumeRole` action for CAST AI user.
	AssumeRoleArn pulumi.StringPtrInput
	// Should CAST AI remove nodes managed by CAST AI on disconnect
	DeleteNodesOnDisconnect pulumi.BoolPtrInput
	// name of your EKS cluster
	Name pulumi.StringPtrInput
	// AWS region where the cluster is placed
	Region pulumi.StringInput
}

func (EksClusterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*eksClusterArgs)(nil)).Elem()
}

type EksClusterInput interface {
	pulumi.Input

	ToEksClusterOutput() EksClusterOutput
	ToEksClusterOutputWithContext(ctx context.Context) EksClusterOutput
}

func (*EksCluster) ElementType() reflect.Type {
	return reflect.TypeOf((**EksCluster)(nil)).Elem()
}

func (i *EksCluster) ToEksClusterOutput() EksClusterOutput {
	return i.ToEksClusterOutputWithContext(context.Background())
}

func (i *EksCluster) ToEksClusterOutputWithContext(ctx context.Context) EksClusterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EksClusterOutput)
}

// EksClusterArrayInput is an input type that accepts EksClusterArray and EksClusterArrayOutput values.
// You can construct a concrete instance of `EksClusterArrayInput` via:
//
//	EksClusterArray{ EksClusterArgs{...} }
type EksClusterArrayInput interface {
	pulumi.Input

	ToEksClusterArrayOutput() EksClusterArrayOutput
	ToEksClusterArrayOutputWithContext(context.Context) EksClusterArrayOutput
}

type EksClusterArray []EksClusterInput

func (EksClusterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EksCluster)(nil)).Elem()
}

func (i EksClusterArray) ToEksClusterArrayOutput() EksClusterArrayOutput {
	return i.ToEksClusterArrayOutputWithContext(context.Background())
}

func (i EksClusterArray) ToEksClusterArrayOutputWithContext(ctx context.Context) EksClusterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EksClusterArrayOutput)
}

// EksClusterMapInput is an input type that accepts EksClusterMap and EksClusterMapOutput values.
// You can construct a concrete instance of `EksClusterMapInput` via:
//
//	EksClusterMap{ "key": EksClusterArgs{...} }
type EksClusterMapInput interface {
	pulumi.Input

	ToEksClusterMapOutput() EksClusterMapOutput
	ToEksClusterMapOutputWithContext(context.Context) EksClusterMapOutput
}

type EksClusterMap map[string]EksClusterInput

func (EksClusterMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EksCluster)(nil)).Elem()
}

func (i EksClusterMap) ToEksClusterMapOutput() EksClusterMapOutput {
	return i.ToEksClusterMapOutputWithContext(context.Background())
}

func (i EksClusterMap) ToEksClusterMapOutputWithContext(ctx context.Context) EksClusterMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EksClusterMapOutput)
}

type EksClusterOutput struct{ *pulumi.OutputState }

func (EksClusterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EksCluster)(nil)).Elem()
}

func (o EksClusterOutput) ToEksClusterOutput() EksClusterOutput {
	return o
}

func (o EksClusterOutput) ToEksClusterOutputWithContext(ctx context.Context) EksClusterOutput {
	return o
}

// ID of AWS account
func (o EksClusterOutput) AccountId() pulumi.StringOutput {
	return o.ApplyT(func(v *EksCluster) pulumi.StringOutput { return v.AccountId }).(pulumi.StringOutput)
}

// AWS IAM role ARN that will be assumed by CAST AI user. This role should allow `sts:AssumeRole` action for CAST AI user.
func (o EksClusterOutput) AssumeRoleArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EksCluster) pulumi.StringPtrOutput { return v.AssumeRoleArn }).(pulumi.StringPtrOutput)
}

// computed value to store cluster token
func (o EksClusterOutput) ClusterToken() pulumi.StringOutput {
	return o.ApplyT(func(v *EksCluster) pulumi.StringOutput { return v.ClusterToken }).(pulumi.StringOutput)
}

// CAST AI internal credentials ID
func (o EksClusterOutput) CredentialsId() pulumi.StringOutput {
	return o.ApplyT(func(v *EksCluster) pulumi.StringOutput { return v.CredentialsId }).(pulumi.StringOutput)
}

// Should CAST AI remove nodes managed by CAST AI on disconnect
func (o EksClusterOutput) DeleteNodesOnDisconnect() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EksCluster) pulumi.BoolPtrOutput { return v.DeleteNodesOnDisconnect }).(pulumi.BoolPtrOutput)
}

// name of your EKS cluster
func (o EksClusterOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *EksCluster) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// AWS region where the cluster is placed
func (o EksClusterOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *EksCluster) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

type EksClusterArrayOutput struct{ *pulumi.OutputState }

func (EksClusterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EksCluster)(nil)).Elem()
}

func (o EksClusterArrayOutput) ToEksClusterArrayOutput() EksClusterArrayOutput {
	return o
}

func (o EksClusterArrayOutput) ToEksClusterArrayOutputWithContext(ctx context.Context) EksClusterArrayOutput {
	return o
}

func (o EksClusterArrayOutput) Index(i pulumi.IntInput) EksClusterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *EksCluster {
		return vs[0].([]*EksCluster)[vs[1].(int)]
	}).(EksClusterOutput)
}

type EksClusterMapOutput struct{ *pulumi.OutputState }

func (EksClusterMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EksCluster)(nil)).Elem()
}

func (o EksClusterMapOutput) ToEksClusterMapOutput() EksClusterMapOutput {
	return o
}

func (o EksClusterMapOutput) ToEksClusterMapOutputWithContext(ctx context.Context) EksClusterMapOutput {
	return o
}

func (o EksClusterMapOutput) MapIndex(k pulumi.StringInput) EksClusterOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *EksCluster {
		return vs[0].(map[string]*EksCluster)[vs[1].(string)]
	}).(EksClusterOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*EksClusterInput)(nil)).Elem(), &EksCluster{})
	pulumi.RegisterInputType(reflect.TypeOf((*EksClusterArrayInput)(nil)).Elem(), EksClusterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EksClusterMapInput)(nil)).Elem(), EksClusterMap{})
	pulumi.RegisterOutputType(EksClusterOutput{})
	pulumi.RegisterOutputType(EksClusterArrayOutput{})
	pulumi.RegisterOutputType(EksClusterMapOutput{})
}
