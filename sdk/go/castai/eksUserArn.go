// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package castai

import (
	"context"
	"reflect"

	"errors"
	"github.com/castai/pulumi-castai/sdk/go/castai/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type EksUserArn struct {
	pulumi.CustomResourceState

	Arn       pulumi.StringOutput `pulumi:"arn"`
	ClusterId pulumi.StringOutput `pulumi:"clusterId"`
}

// NewEksUserArn registers a new resource with the given unique name, arguments, and options.
func NewEksUserArn(ctx *pulumi.Context,
	name string, args *EksUserArnArgs, opts ...pulumi.ResourceOption) (*EksUserArn, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ClusterId == nil {
		return nil, errors.New("invalid value for required argument 'ClusterId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource EksUserArn
	err := ctx.RegisterResource("castai:aws:EksUserArn", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEksUserArn gets an existing EksUserArn resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEksUserArn(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EksUserArnState, opts ...pulumi.ResourceOption) (*EksUserArn, error) {
	var resource EksUserArn
	err := ctx.ReadResource("castai:aws:EksUserArn", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering EksUserArn resources.
type eksUserArnState struct {
	Arn       *string `pulumi:"arn"`
	ClusterId *string `pulumi:"clusterId"`
}

type EksUserArnState struct {
	Arn       pulumi.StringPtrInput
	ClusterId pulumi.StringPtrInput
}

func (EksUserArnState) ElementType() reflect.Type {
	return reflect.TypeOf((*eksUserArnState)(nil)).Elem()
}

type eksUserArnArgs struct {
	ClusterId string `pulumi:"clusterId"`
}

// The set of arguments for constructing a EksUserArn resource.
type EksUserArnArgs struct {
	ClusterId pulumi.StringInput
}

func (EksUserArnArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*eksUserArnArgs)(nil)).Elem()
}

type EksUserArnInput interface {
	pulumi.Input

	ToEksUserArnOutput() EksUserArnOutput
	ToEksUserArnOutputWithContext(ctx context.Context) EksUserArnOutput
}

func (*EksUserArn) ElementType() reflect.Type {
	return reflect.TypeOf((**EksUserArn)(nil)).Elem()
}

func (i *EksUserArn) ToEksUserArnOutput() EksUserArnOutput {
	return i.ToEksUserArnOutputWithContext(context.Background())
}

func (i *EksUserArn) ToEksUserArnOutputWithContext(ctx context.Context) EksUserArnOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EksUserArnOutput)
}

// EksUserArnArrayInput is an input type that accepts EksUserArnArray and EksUserArnArrayOutput values.
// You can construct a concrete instance of `EksUserArnArrayInput` via:
//
//	EksUserArnArray{ EksUserArnArgs{...} }
type EksUserArnArrayInput interface {
	pulumi.Input

	ToEksUserArnArrayOutput() EksUserArnArrayOutput
	ToEksUserArnArrayOutputWithContext(context.Context) EksUserArnArrayOutput
}

type EksUserArnArray []EksUserArnInput

func (EksUserArnArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EksUserArn)(nil)).Elem()
}

func (i EksUserArnArray) ToEksUserArnArrayOutput() EksUserArnArrayOutput {
	return i.ToEksUserArnArrayOutputWithContext(context.Background())
}

func (i EksUserArnArray) ToEksUserArnArrayOutputWithContext(ctx context.Context) EksUserArnArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EksUserArnArrayOutput)
}

// EksUserArnMapInput is an input type that accepts EksUserArnMap and EksUserArnMapOutput values.
// You can construct a concrete instance of `EksUserArnMapInput` via:
//
//	EksUserArnMap{ "key": EksUserArnArgs{...} }
type EksUserArnMapInput interface {
	pulumi.Input

	ToEksUserArnMapOutput() EksUserArnMapOutput
	ToEksUserArnMapOutputWithContext(context.Context) EksUserArnMapOutput
}

type EksUserArnMap map[string]EksUserArnInput

func (EksUserArnMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EksUserArn)(nil)).Elem()
}

func (i EksUserArnMap) ToEksUserArnMapOutput() EksUserArnMapOutput {
	return i.ToEksUserArnMapOutputWithContext(context.Background())
}

func (i EksUserArnMap) ToEksUserArnMapOutputWithContext(ctx context.Context) EksUserArnMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EksUserArnMapOutput)
}

type EksUserArnOutput struct{ *pulumi.OutputState }

func (EksUserArnOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EksUserArn)(nil)).Elem()
}

func (o EksUserArnOutput) ToEksUserArnOutput() EksUserArnOutput {
	return o
}

func (o EksUserArnOutput) ToEksUserArnOutputWithContext(ctx context.Context) EksUserArnOutput {
	return o
}

func (o EksUserArnOutput) Arn() pulumi.StringOutput {
	return o.ApplyT(func(v *EksUserArn) pulumi.StringOutput { return v.Arn }).(pulumi.StringOutput)
}

func (o EksUserArnOutput) ClusterId() pulumi.StringOutput {
	return o.ApplyT(func(v *EksUserArn) pulumi.StringOutput { return v.ClusterId }).(pulumi.StringOutput)
}

type EksUserArnArrayOutput struct{ *pulumi.OutputState }

func (EksUserArnArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EksUserArn)(nil)).Elem()
}

func (o EksUserArnArrayOutput) ToEksUserArnArrayOutput() EksUserArnArrayOutput {
	return o
}

func (o EksUserArnArrayOutput) ToEksUserArnArrayOutputWithContext(ctx context.Context) EksUserArnArrayOutput {
	return o
}

func (o EksUserArnArrayOutput) Index(i pulumi.IntInput) EksUserArnOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *EksUserArn {
		return vs[0].([]*EksUserArn)[vs[1].(int)]
	}).(EksUserArnOutput)
}

type EksUserArnMapOutput struct{ *pulumi.OutputState }

func (EksUserArnMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EksUserArn)(nil)).Elem()
}

func (o EksUserArnMapOutput) ToEksUserArnMapOutput() EksUserArnMapOutput {
	return o
}

func (o EksUserArnMapOutput) ToEksUserArnMapOutputWithContext(ctx context.Context) EksUserArnMapOutput {
	return o
}

func (o EksUserArnMapOutput) MapIndex(k pulumi.StringInput) EksUserArnOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *EksUserArn {
		return vs[0].(map[string]*EksUserArn)[vs[1].(string)]
	}).(EksUserArnOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*EksUserArnInput)(nil)).Elem(), &EksUserArn{})
	pulumi.RegisterInputType(reflect.TypeOf((*EksUserArnArrayInput)(nil)).Elem(), EksUserArnArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EksUserArnMapInput)(nil)).Elem(), EksUserArnMap{})
	pulumi.RegisterOutputType(EksUserArnOutput{})
	pulumi.RegisterOutputType(EksUserArnArrayOutput{})
	pulumi.RegisterOutputType(EksUserArnMapOutput{})
}
