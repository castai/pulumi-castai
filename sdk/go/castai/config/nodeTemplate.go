// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package config

import (
	"context"
	"reflect"

	"github.com/castai/pulumi-castai/sdk/go/castai/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type NodeTemplate struct {
	pulumi.CustomResourceState

	// Marks whether CLM should be enabled for nodes created from this template.
	ClmEnabled pulumi.BoolPtrOutput `pulumi:"clmEnabled"`
	// CAST AI cluster id.
	ClusterId pulumi.StringPtrOutput `pulumi:"clusterId"`
	// CAST AI node configuration id to be used for node template.
	ConfigurationId pulumi.StringPtrOutput           `pulumi:"configurationId"`
	Constraints     NodeTemplateConstraintsPtrOutput `pulumi:"constraints"`
	// Marks whether custom instances should be used when deciding which parts of inventory are available. Custom instances are only supported in GCP.
	CustomInstancesEnabled pulumi.BoolPtrOutput `pulumi:"customInstancesEnabled"`
	// Marks whether custom instances with extended memory should be used when deciding which parts of inventory are available. Custom instances are only supported in GCP.
	CustomInstancesWithExtendedMemoryEnabled pulumi.BoolPtrOutput `pulumi:"customInstancesWithExtendedMemoryEnabled"`
	// Custom labels to be added to nodes created from this template.
	CustomLabels pulumi.StringMapOutput `pulumi:"customLabels"`
	// Custom taints to be added to the nodes created from this template. `shouldTaint` has to be `true` in order to create/update the node template with custom taints. If `shouldTaint` is `true`, but no custom taints are provided, the nodes will be tainted with the default node template taint.
	CustomTaints NodeTemplateCustomTaintArrayOutput `pulumi:"customTaints"`
	// GPU configuration.
	Gpu NodeTemplateGpuPtrOutput `pulumi:"gpu"`
	// Flag whether the node template is default.
	IsDefault pulumi.BoolPtrOutput `pulumi:"isDefault"`
	// Flag whether the node template is enabled and considered for autoscaling.
	IsEnabled pulumi.BoolOutput `pulumi:"isEnabled"`
	// Name of the node template.
	Name pulumi.StringOutput `pulumi:"name"`
	// Minimum nodes that will be kept when rebalancing nodes using this node template.
	RebalancingConfigMinNodes pulumi.IntPtrOutput `pulumi:"rebalancingConfigMinNodes"`
	// Marks whether the templated nodes will have a taint.
	ShouldTaint pulumi.BoolPtrOutput `pulumi:"shouldTaint"`
}

// NewNodeTemplate registers a new resource with the given unique name, arguments, and options.
func NewNodeTemplate(ctx *pulumi.Context,
	name string, args *NodeTemplateArgs, opts ...pulumi.ResourceOption) (*NodeTemplate, error) {
	if args == nil {
		args = &NodeTemplateArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource NodeTemplate
	err := ctx.RegisterResource("castai:config/node:NodeTemplate", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNodeTemplate gets an existing NodeTemplate resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNodeTemplate(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NodeTemplateState, opts ...pulumi.ResourceOption) (*NodeTemplate, error) {
	var resource NodeTemplate
	err := ctx.ReadResource("castai:config/node:NodeTemplate", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NodeTemplate resources.
type nodeTemplateState struct {
	// Marks whether CLM should be enabled for nodes created from this template.
	ClmEnabled *bool `pulumi:"clmEnabled"`
	// CAST AI cluster id.
	ClusterId *string `pulumi:"clusterId"`
	// CAST AI node configuration id to be used for node template.
	ConfigurationId *string                  `pulumi:"configurationId"`
	Constraints     *NodeTemplateConstraints `pulumi:"constraints"`
	// Marks whether custom instances should be used when deciding which parts of inventory are available. Custom instances are only supported in GCP.
	CustomInstancesEnabled *bool `pulumi:"customInstancesEnabled"`
	// Marks whether custom instances with extended memory should be used when deciding which parts of inventory are available. Custom instances are only supported in GCP.
	CustomInstancesWithExtendedMemoryEnabled *bool `pulumi:"customInstancesWithExtendedMemoryEnabled"`
	// Custom labels to be added to nodes created from this template.
	CustomLabels map[string]string `pulumi:"customLabels"`
	// Custom taints to be added to the nodes created from this template. `shouldTaint` has to be `true` in order to create/update the node template with custom taints. If `shouldTaint` is `true`, but no custom taints are provided, the nodes will be tainted with the default node template taint.
	CustomTaints []NodeTemplateCustomTaint `pulumi:"customTaints"`
	// GPU configuration.
	Gpu *NodeTemplateGpu `pulumi:"gpu"`
	// Flag whether the node template is default.
	IsDefault *bool `pulumi:"isDefault"`
	// Flag whether the node template is enabled and considered for autoscaling.
	IsEnabled *bool `pulumi:"isEnabled"`
	// Name of the node template.
	Name *string `pulumi:"name"`
	// Minimum nodes that will be kept when rebalancing nodes using this node template.
	RebalancingConfigMinNodes *int `pulumi:"rebalancingConfigMinNodes"`
	// Marks whether the templated nodes will have a taint.
	ShouldTaint *bool `pulumi:"shouldTaint"`
}

type NodeTemplateState struct {
	// Marks whether CLM should be enabled for nodes created from this template.
	ClmEnabled pulumi.BoolPtrInput
	// CAST AI cluster id.
	ClusterId pulumi.StringPtrInput
	// CAST AI node configuration id to be used for node template.
	ConfigurationId pulumi.StringPtrInput
	Constraints     NodeTemplateConstraintsPtrInput
	// Marks whether custom instances should be used when deciding which parts of inventory are available. Custom instances are only supported in GCP.
	CustomInstancesEnabled pulumi.BoolPtrInput
	// Marks whether custom instances with extended memory should be used when deciding which parts of inventory are available. Custom instances are only supported in GCP.
	CustomInstancesWithExtendedMemoryEnabled pulumi.BoolPtrInput
	// Custom labels to be added to nodes created from this template.
	CustomLabels pulumi.StringMapInput
	// Custom taints to be added to the nodes created from this template. `shouldTaint` has to be `true` in order to create/update the node template with custom taints. If `shouldTaint` is `true`, but no custom taints are provided, the nodes will be tainted with the default node template taint.
	CustomTaints NodeTemplateCustomTaintArrayInput
	// GPU configuration.
	Gpu NodeTemplateGpuPtrInput
	// Flag whether the node template is default.
	IsDefault pulumi.BoolPtrInput
	// Flag whether the node template is enabled and considered for autoscaling.
	IsEnabled pulumi.BoolPtrInput
	// Name of the node template.
	Name pulumi.StringPtrInput
	// Minimum nodes that will be kept when rebalancing nodes using this node template.
	RebalancingConfigMinNodes pulumi.IntPtrInput
	// Marks whether the templated nodes will have a taint.
	ShouldTaint pulumi.BoolPtrInput
}

func (NodeTemplateState) ElementType() reflect.Type {
	return reflect.TypeOf((*nodeTemplateState)(nil)).Elem()
}

type nodeTemplateArgs struct {
	// Marks whether CLM should be enabled for nodes created from this template.
	ClmEnabled *bool `pulumi:"clmEnabled"`
	// CAST AI cluster id.
	ClusterId *string `pulumi:"clusterId"`
	// CAST AI node configuration id to be used for node template.
	ConfigurationId *string                  `pulumi:"configurationId"`
	Constraints     *NodeTemplateConstraints `pulumi:"constraints"`
	// Marks whether custom instances should be used when deciding which parts of inventory are available. Custom instances are only supported in GCP.
	CustomInstancesEnabled *bool `pulumi:"customInstancesEnabled"`
	// Marks whether custom instances with extended memory should be used when deciding which parts of inventory are available. Custom instances are only supported in GCP.
	CustomInstancesWithExtendedMemoryEnabled *bool `pulumi:"customInstancesWithExtendedMemoryEnabled"`
	// Custom labels to be added to nodes created from this template.
	CustomLabels map[string]string `pulumi:"customLabels"`
	// Custom taints to be added to the nodes created from this template. `shouldTaint` has to be `true` in order to create/update the node template with custom taints. If `shouldTaint` is `true`, but no custom taints are provided, the nodes will be tainted with the default node template taint.
	CustomTaints []NodeTemplateCustomTaint `pulumi:"customTaints"`
	// GPU configuration.
	Gpu *NodeTemplateGpu `pulumi:"gpu"`
	// Flag whether the node template is default.
	IsDefault *bool `pulumi:"isDefault"`
	// Flag whether the node template is enabled and considered for autoscaling.
	IsEnabled *bool `pulumi:"isEnabled"`
	// Name of the node template.
	Name *string `pulumi:"name"`
	// Minimum nodes that will be kept when rebalancing nodes using this node template.
	RebalancingConfigMinNodes *int `pulumi:"rebalancingConfigMinNodes"`
	// Marks whether the templated nodes will have a taint.
	ShouldTaint *bool `pulumi:"shouldTaint"`
}

// The set of arguments for constructing a NodeTemplate resource.
type NodeTemplateArgs struct {
	// Marks whether CLM should be enabled for nodes created from this template.
	ClmEnabled pulumi.BoolPtrInput
	// CAST AI cluster id.
	ClusterId pulumi.StringPtrInput
	// CAST AI node configuration id to be used for node template.
	ConfigurationId pulumi.StringPtrInput
	Constraints     NodeTemplateConstraintsPtrInput
	// Marks whether custom instances should be used when deciding which parts of inventory are available. Custom instances are only supported in GCP.
	CustomInstancesEnabled pulumi.BoolPtrInput
	// Marks whether custom instances with extended memory should be used when deciding which parts of inventory are available. Custom instances are only supported in GCP.
	CustomInstancesWithExtendedMemoryEnabled pulumi.BoolPtrInput
	// Custom labels to be added to nodes created from this template.
	CustomLabels pulumi.StringMapInput
	// Custom taints to be added to the nodes created from this template. `shouldTaint` has to be `true` in order to create/update the node template with custom taints. If `shouldTaint` is `true`, but no custom taints are provided, the nodes will be tainted with the default node template taint.
	CustomTaints NodeTemplateCustomTaintArrayInput
	// GPU configuration.
	Gpu NodeTemplateGpuPtrInput
	// Flag whether the node template is default.
	IsDefault pulumi.BoolPtrInput
	// Flag whether the node template is enabled and considered for autoscaling.
	IsEnabled pulumi.BoolPtrInput
	// Name of the node template.
	Name pulumi.StringPtrInput
	// Minimum nodes that will be kept when rebalancing nodes using this node template.
	RebalancingConfigMinNodes pulumi.IntPtrInput
	// Marks whether the templated nodes will have a taint.
	ShouldTaint pulumi.BoolPtrInput
}

func (NodeTemplateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*nodeTemplateArgs)(nil)).Elem()
}

type NodeTemplateInput interface {
	pulumi.Input

	ToNodeTemplateOutput() NodeTemplateOutput
	ToNodeTemplateOutputWithContext(ctx context.Context) NodeTemplateOutput
}

func (*NodeTemplate) ElementType() reflect.Type {
	return reflect.TypeOf((**NodeTemplate)(nil)).Elem()
}

func (i *NodeTemplate) ToNodeTemplateOutput() NodeTemplateOutput {
	return i.ToNodeTemplateOutputWithContext(context.Background())
}

func (i *NodeTemplate) ToNodeTemplateOutputWithContext(ctx context.Context) NodeTemplateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeTemplateOutput)
}

// NodeTemplateArrayInput is an input type that accepts NodeTemplateArray and NodeTemplateArrayOutput values.
// You can construct a concrete instance of `NodeTemplateArrayInput` via:
//
//	NodeTemplateArray{ NodeTemplateArgs{...} }
type NodeTemplateArrayInput interface {
	pulumi.Input

	ToNodeTemplateArrayOutput() NodeTemplateArrayOutput
	ToNodeTemplateArrayOutputWithContext(context.Context) NodeTemplateArrayOutput
}

type NodeTemplateArray []NodeTemplateInput

func (NodeTemplateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NodeTemplate)(nil)).Elem()
}

func (i NodeTemplateArray) ToNodeTemplateArrayOutput() NodeTemplateArrayOutput {
	return i.ToNodeTemplateArrayOutputWithContext(context.Background())
}

func (i NodeTemplateArray) ToNodeTemplateArrayOutputWithContext(ctx context.Context) NodeTemplateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeTemplateArrayOutput)
}

// NodeTemplateMapInput is an input type that accepts NodeTemplateMap and NodeTemplateMapOutput values.
// You can construct a concrete instance of `NodeTemplateMapInput` via:
//
//	NodeTemplateMap{ "key": NodeTemplateArgs{...} }
type NodeTemplateMapInput interface {
	pulumi.Input

	ToNodeTemplateMapOutput() NodeTemplateMapOutput
	ToNodeTemplateMapOutputWithContext(context.Context) NodeTemplateMapOutput
}

type NodeTemplateMap map[string]NodeTemplateInput

func (NodeTemplateMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NodeTemplate)(nil)).Elem()
}

func (i NodeTemplateMap) ToNodeTemplateMapOutput() NodeTemplateMapOutput {
	return i.ToNodeTemplateMapOutputWithContext(context.Background())
}

func (i NodeTemplateMap) ToNodeTemplateMapOutputWithContext(ctx context.Context) NodeTemplateMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeTemplateMapOutput)
}

type NodeTemplateOutput struct{ *pulumi.OutputState }

func (NodeTemplateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NodeTemplate)(nil)).Elem()
}

func (o NodeTemplateOutput) ToNodeTemplateOutput() NodeTemplateOutput {
	return o
}

func (o NodeTemplateOutput) ToNodeTemplateOutputWithContext(ctx context.Context) NodeTemplateOutput {
	return o
}

// Marks whether CLM should be enabled for nodes created from this template.
func (o NodeTemplateOutput) ClmEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *NodeTemplate) pulumi.BoolPtrOutput { return v.ClmEnabled }).(pulumi.BoolPtrOutput)
}

// CAST AI cluster id.
func (o NodeTemplateOutput) ClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NodeTemplate) pulumi.StringPtrOutput { return v.ClusterId }).(pulumi.StringPtrOutput)
}

// CAST AI node configuration id to be used for node template.
func (o NodeTemplateOutput) ConfigurationId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NodeTemplate) pulumi.StringPtrOutput { return v.ConfigurationId }).(pulumi.StringPtrOutput)
}

func (o NodeTemplateOutput) Constraints() NodeTemplateConstraintsPtrOutput {
	return o.ApplyT(func(v *NodeTemplate) NodeTemplateConstraintsPtrOutput { return v.Constraints }).(NodeTemplateConstraintsPtrOutput)
}

// Marks whether custom instances should be used when deciding which parts of inventory are available. Custom instances are only supported in GCP.
func (o NodeTemplateOutput) CustomInstancesEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *NodeTemplate) pulumi.BoolPtrOutput { return v.CustomInstancesEnabled }).(pulumi.BoolPtrOutput)
}

// Marks whether custom instances with extended memory should be used when deciding which parts of inventory are available. Custom instances are only supported in GCP.
func (o NodeTemplateOutput) CustomInstancesWithExtendedMemoryEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *NodeTemplate) pulumi.BoolPtrOutput { return v.CustomInstancesWithExtendedMemoryEnabled }).(pulumi.BoolPtrOutput)
}

// Custom labels to be added to nodes created from this template.
func (o NodeTemplateOutput) CustomLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *NodeTemplate) pulumi.StringMapOutput { return v.CustomLabels }).(pulumi.StringMapOutput)
}

// Custom taints to be added to the nodes created from this template. `shouldTaint` has to be `true` in order to create/update the node template with custom taints. If `shouldTaint` is `true`, but no custom taints are provided, the nodes will be tainted with the default node template taint.
func (o NodeTemplateOutput) CustomTaints() NodeTemplateCustomTaintArrayOutput {
	return o.ApplyT(func(v *NodeTemplate) NodeTemplateCustomTaintArrayOutput { return v.CustomTaints }).(NodeTemplateCustomTaintArrayOutput)
}

// GPU configuration.
func (o NodeTemplateOutput) Gpu() NodeTemplateGpuPtrOutput {
	return o.ApplyT(func(v *NodeTemplate) NodeTemplateGpuPtrOutput { return v.Gpu }).(NodeTemplateGpuPtrOutput)
}

// Flag whether the node template is default.
func (o NodeTemplateOutput) IsDefault() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *NodeTemplate) pulumi.BoolPtrOutput { return v.IsDefault }).(pulumi.BoolPtrOutput)
}

// Flag whether the node template is enabled and considered for autoscaling.
func (o NodeTemplateOutput) IsEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *NodeTemplate) pulumi.BoolOutput { return v.IsEnabled }).(pulumi.BoolOutput)
}

// Name of the node template.
func (o NodeTemplateOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *NodeTemplate) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Minimum nodes that will be kept when rebalancing nodes using this node template.
func (o NodeTemplateOutput) RebalancingConfigMinNodes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *NodeTemplate) pulumi.IntPtrOutput { return v.RebalancingConfigMinNodes }).(pulumi.IntPtrOutput)
}

// Marks whether the templated nodes will have a taint.
func (o NodeTemplateOutput) ShouldTaint() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *NodeTemplate) pulumi.BoolPtrOutput { return v.ShouldTaint }).(pulumi.BoolPtrOutput)
}

type NodeTemplateArrayOutput struct{ *pulumi.OutputState }

func (NodeTemplateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NodeTemplate)(nil)).Elem()
}

func (o NodeTemplateArrayOutput) ToNodeTemplateArrayOutput() NodeTemplateArrayOutput {
	return o
}

func (o NodeTemplateArrayOutput) ToNodeTemplateArrayOutputWithContext(ctx context.Context) NodeTemplateArrayOutput {
	return o
}

func (o NodeTemplateArrayOutput) Index(i pulumi.IntInput) NodeTemplateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *NodeTemplate {
		return vs[0].([]*NodeTemplate)[vs[1].(int)]
	}).(NodeTemplateOutput)
}

type NodeTemplateMapOutput struct{ *pulumi.OutputState }

func (NodeTemplateMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NodeTemplate)(nil)).Elem()
}

func (o NodeTemplateMapOutput) ToNodeTemplateMapOutput() NodeTemplateMapOutput {
	return o
}

func (o NodeTemplateMapOutput) ToNodeTemplateMapOutputWithContext(ctx context.Context) NodeTemplateMapOutput {
	return o
}

func (o NodeTemplateMapOutput) MapIndex(k pulumi.StringInput) NodeTemplateOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *NodeTemplate {
		return vs[0].(map[string]*NodeTemplate)[vs[1].(string)]
	}).(NodeTemplateOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NodeTemplateInput)(nil)).Elem(), &NodeTemplate{})
	pulumi.RegisterInputType(reflect.TypeOf((*NodeTemplateArrayInput)(nil)).Elem(), NodeTemplateArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NodeTemplateMapInput)(nil)).Elem(), NodeTemplateMap{})
	pulumi.RegisterOutputType(NodeTemplateOutput{})
	pulumi.RegisterOutputType(NodeTemplateArrayOutput{})
	pulumi.RegisterOutputType(NodeTemplateMapOutput{})
}
