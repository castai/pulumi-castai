// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package castai

import (
	"context"
	"reflect"

	"errors"
	"github.com/castai/pulumi-castai/sdk/go/castai/internal"
	"github.com/castai/pulumi-castai/sdk/go/castai/organization"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type EnterpriseGroup struct {
	pulumi.CustomResourceState

	// Description of the group.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Enterprise organization ID.
	EnterpriseId pulumi.StringOutput `pulumi:"enterpriseId"`
	// List of group members.
	Members organization.EnterpriseGroupMemberArrayOutput `pulumi:"members"`
	// Name of the group.
	Name pulumi.StringOutput `pulumi:"name"`
	// Target organization ID for the group.
	OrganizationId pulumi.StringOutput `pulumi:"organizationId"`
	// List of role bindings for the group.
	RoleBindings organization.EnterpriseGroupRoleBindingArrayOutput `pulumi:"roleBindings"`
}

// NewEnterpriseGroup registers a new resource with the given unique name, arguments, and options.
func NewEnterpriseGroup(ctx *pulumi.Context,
	name string, args *EnterpriseGroupArgs, opts ...pulumi.ResourceOption) (*EnterpriseGroup, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.EnterpriseId == nil {
		return nil, errors.New("invalid value for required argument 'EnterpriseId'")
	}
	if args.OrganizationId == nil {
		return nil, errors.New("invalid value for required argument 'OrganizationId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource EnterpriseGroup
	err := ctx.RegisterResource("castai:organization:EnterpriseGroup", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEnterpriseGroup gets an existing EnterpriseGroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEnterpriseGroup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EnterpriseGroupState, opts ...pulumi.ResourceOption) (*EnterpriseGroup, error) {
	var resource EnterpriseGroup
	err := ctx.ReadResource("castai:organization:EnterpriseGroup", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering EnterpriseGroup resources.
type enterpriseGroupState struct {
	// Description of the group.
	Description *string `pulumi:"description"`
	// Enterprise organization ID.
	EnterpriseId *string `pulumi:"enterpriseId"`
	// List of group members.
	Members []organization.EnterpriseGroupMember `pulumi:"members"`
	// Name of the group.
	Name *string `pulumi:"name"`
	// Target organization ID for the group.
	OrganizationId *string `pulumi:"organizationId"`
	// List of role bindings for the group.
	RoleBindings []organization.EnterpriseGroupRoleBinding `pulumi:"roleBindings"`
}

type EnterpriseGroupState struct {
	// Description of the group.
	Description pulumi.StringPtrInput
	// Enterprise organization ID.
	EnterpriseId pulumi.StringPtrInput
	// List of group members.
	Members organization.EnterpriseGroupMemberArrayInput
	// Name of the group.
	Name pulumi.StringPtrInput
	// Target organization ID for the group.
	OrganizationId pulumi.StringPtrInput
	// List of role bindings for the group.
	RoleBindings organization.EnterpriseGroupRoleBindingArrayInput
}

func (EnterpriseGroupState) ElementType() reflect.Type {
	return reflect.TypeOf((*enterpriseGroupState)(nil)).Elem()
}

type enterpriseGroupArgs struct {
	// Description of the group.
	Description *string `pulumi:"description"`
	// Enterprise organization ID.
	EnterpriseId string `pulumi:"enterpriseId"`
	// List of group members.
	Members []organization.EnterpriseGroupMember `pulumi:"members"`
	// Name of the group.
	Name *string `pulumi:"name"`
	// Target organization ID for the group.
	OrganizationId string `pulumi:"organizationId"`
	// List of role bindings for the group.
	RoleBindings []organization.EnterpriseGroupRoleBinding `pulumi:"roleBindings"`
}

// The set of arguments for constructing a EnterpriseGroup resource.
type EnterpriseGroupArgs struct {
	// Description of the group.
	Description pulumi.StringPtrInput
	// Enterprise organization ID.
	EnterpriseId pulumi.StringInput
	// List of group members.
	Members organization.EnterpriseGroupMemberArrayInput
	// Name of the group.
	Name pulumi.StringPtrInput
	// Target organization ID for the group.
	OrganizationId pulumi.StringInput
	// List of role bindings for the group.
	RoleBindings organization.EnterpriseGroupRoleBindingArrayInput
}

func (EnterpriseGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*enterpriseGroupArgs)(nil)).Elem()
}

type EnterpriseGroupInput interface {
	pulumi.Input

	ToEnterpriseGroupOutput() EnterpriseGroupOutput
	ToEnterpriseGroupOutputWithContext(ctx context.Context) EnterpriseGroupOutput
}

func (*EnterpriseGroup) ElementType() reflect.Type {
	return reflect.TypeOf((**EnterpriseGroup)(nil)).Elem()
}

func (i *EnterpriseGroup) ToEnterpriseGroupOutput() EnterpriseGroupOutput {
	return i.ToEnterpriseGroupOutputWithContext(context.Background())
}

func (i *EnterpriseGroup) ToEnterpriseGroupOutputWithContext(ctx context.Context) EnterpriseGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnterpriseGroupOutput)
}

// EnterpriseGroupArrayInput is an input type that accepts EnterpriseGroupArray and EnterpriseGroupArrayOutput values.
// You can construct a concrete instance of `EnterpriseGroupArrayInput` via:
//
//	EnterpriseGroupArray{ EnterpriseGroupArgs{...} }
type EnterpriseGroupArrayInput interface {
	pulumi.Input

	ToEnterpriseGroupArrayOutput() EnterpriseGroupArrayOutput
	ToEnterpriseGroupArrayOutputWithContext(context.Context) EnterpriseGroupArrayOutput
}

type EnterpriseGroupArray []EnterpriseGroupInput

func (EnterpriseGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EnterpriseGroup)(nil)).Elem()
}

func (i EnterpriseGroupArray) ToEnterpriseGroupArrayOutput() EnterpriseGroupArrayOutput {
	return i.ToEnterpriseGroupArrayOutputWithContext(context.Background())
}

func (i EnterpriseGroupArray) ToEnterpriseGroupArrayOutputWithContext(ctx context.Context) EnterpriseGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnterpriseGroupArrayOutput)
}

// EnterpriseGroupMapInput is an input type that accepts EnterpriseGroupMap and EnterpriseGroupMapOutput values.
// You can construct a concrete instance of `EnterpriseGroupMapInput` via:
//
//	EnterpriseGroupMap{ "key": EnterpriseGroupArgs{...} }
type EnterpriseGroupMapInput interface {
	pulumi.Input

	ToEnterpriseGroupMapOutput() EnterpriseGroupMapOutput
	ToEnterpriseGroupMapOutputWithContext(context.Context) EnterpriseGroupMapOutput
}

type EnterpriseGroupMap map[string]EnterpriseGroupInput

func (EnterpriseGroupMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EnterpriseGroup)(nil)).Elem()
}

func (i EnterpriseGroupMap) ToEnterpriseGroupMapOutput() EnterpriseGroupMapOutput {
	return i.ToEnterpriseGroupMapOutputWithContext(context.Background())
}

func (i EnterpriseGroupMap) ToEnterpriseGroupMapOutputWithContext(ctx context.Context) EnterpriseGroupMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnterpriseGroupMapOutput)
}

type EnterpriseGroupOutput struct{ *pulumi.OutputState }

func (EnterpriseGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EnterpriseGroup)(nil)).Elem()
}

func (o EnterpriseGroupOutput) ToEnterpriseGroupOutput() EnterpriseGroupOutput {
	return o
}

func (o EnterpriseGroupOutput) ToEnterpriseGroupOutputWithContext(ctx context.Context) EnterpriseGroupOutput {
	return o
}

// Description of the group.
func (o EnterpriseGroupOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EnterpriseGroup) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Enterprise organization ID.
func (o EnterpriseGroupOutput) EnterpriseId() pulumi.StringOutput {
	return o.ApplyT(func(v *EnterpriseGroup) pulumi.StringOutput { return v.EnterpriseId }).(pulumi.StringOutput)
}

// List of group members.
func (o EnterpriseGroupOutput) Members() organization.EnterpriseGroupMemberArrayOutput {
	return o.ApplyT(func(v *EnterpriseGroup) organization.EnterpriseGroupMemberArrayOutput { return v.Members }).(organization.EnterpriseGroupMemberArrayOutput)
}

// Name of the group.
func (o EnterpriseGroupOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *EnterpriseGroup) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Target organization ID for the group.
func (o EnterpriseGroupOutput) OrganizationId() pulumi.StringOutput {
	return o.ApplyT(func(v *EnterpriseGroup) pulumi.StringOutput { return v.OrganizationId }).(pulumi.StringOutput)
}

// List of role bindings for the group.
func (o EnterpriseGroupOutput) RoleBindings() organization.EnterpriseGroupRoleBindingArrayOutput {
	return o.ApplyT(func(v *EnterpriseGroup) organization.EnterpriseGroupRoleBindingArrayOutput { return v.RoleBindings }).(organization.EnterpriseGroupRoleBindingArrayOutput)
}

type EnterpriseGroupArrayOutput struct{ *pulumi.OutputState }

func (EnterpriseGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EnterpriseGroup)(nil)).Elem()
}

func (o EnterpriseGroupArrayOutput) ToEnterpriseGroupArrayOutput() EnterpriseGroupArrayOutput {
	return o
}

func (o EnterpriseGroupArrayOutput) ToEnterpriseGroupArrayOutputWithContext(ctx context.Context) EnterpriseGroupArrayOutput {
	return o
}

func (o EnterpriseGroupArrayOutput) Index(i pulumi.IntInput) EnterpriseGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *EnterpriseGroup {
		return vs[0].([]*EnterpriseGroup)[vs[1].(int)]
	}).(EnterpriseGroupOutput)
}

type EnterpriseGroupMapOutput struct{ *pulumi.OutputState }

func (EnterpriseGroupMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EnterpriseGroup)(nil)).Elem()
}

func (o EnterpriseGroupMapOutput) ToEnterpriseGroupMapOutput() EnterpriseGroupMapOutput {
	return o
}

func (o EnterpriseGroupMapOutput) ToEnterpriseGroupMapOutputWithContext(ctx context.Context) EnterpriseGroupMapOutput {
	return o
}

func (o EnterpriseGroupMapOutput) MapIndex(k pulumi.StringInput) EnterpriseGroupOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *EnterpriseGroup {
		return vs[0].(map[string]*EnterpriseGroup)[vs[1].(string)]
	}).(EnterpriseGroupOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*EnterpriseGroupInput)(nil)).Elem(), &EnterpriseGroup{})
	pulumi.RegisterInputType(reflect.TypeOf((*EnterpriseGroupArrayInput)(nil)).Elem(), EnterpriseGroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EnterpriseGroupMapInput)(nil)).Elem(), EnterpriseGroupMap{})
	pulumi.RegisterOutputType(EnterpriseGroupOutput{})
	pulumi.RegisterOutputType(EnterpriseGroupArrayOutput{})
	pulumi.RegisterOutputType(EnterpriseGroupMapOutput{})
}
