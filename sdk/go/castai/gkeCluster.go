// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package castai

import (
	"context"
	"reflect"

	"errors"
	"github.com/castai/pulumi-castai/sdk/go/castai/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// GKE cluster resource allows connecting an existing GEK cluster to CAST AI.
type GkeCluster struct {
	pulumi.CustomResourceState

	// CAST.AI agent cluster token
	ClusterToken pulumi.StringOutput `pulumi:"clusterToken"`
	// CAST AI credentials id for cluster
	CredentialsId pulumi.StringOutput `pulumi:"credentialsId"`
	// GCP credentials.json from ServiceAccount with credentials for CAST AI
	CredentialsJson pulumi.StringPtrOutput `pulumi:"credentialsJson"`
	// Should CAST AI remove nodes managed by CAST.AI on disconnect
	DeleteNodesOnDisconnect pulumi.BoolPtrOutput `pulumi:"deleteNodesOnDisconnect"`
	// GCP cluster zone in case of zonal or region in case of regional cluster
	Location pulumi.StringOutput `pulumi:"location"`
	// GKE cluster name
	Name pulumi.StringOutput `pulumi:"name"`
	// GCP project id
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
	// SSHPublicKey for nodes
	SshPublicKey pulumi.StringPtrOutput `pulumi:"sshPublicKey"`
}

// NewGkeCluster registers a new resource with the given unique name, arguments, and options.
func NewGkeCluster(ctx *pulumi.Context,
	name string, args *GkeClusterArgs, opts ...pulumi.ResourceOption) (*GkeCluster, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Location == nil {
		return nil, errors.New("invalid value for required argument 'Location'")
	}
	if args.ProjectId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectId'")
	}
	if args.CredentialsJson != nil {
		args.CredentialsJson = pulumi.ToSecret(args.CredentialsJson).(pulumi.StringPtrInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"clusterToken",
		"credentialsJson",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource GkeCluster
	err := ctx.RegisterResource("castai:gcp:GkeCluster", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGkeCluster gets an existing GkeCluster resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGkeCluster(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GkeClusterState, opts ...pulumi.ResourceOption) (*GkeCluster, error) {
	var resource GkeCluster
	err := ctx.ReadResource("castai:gcp:GkeCluster", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering GkeCluster resources.
type gkeClusterState struct {
	// CAST.AI agent cluster token
	ClusterToken *string `pulumi:"clusterToken"`
	// CAST AI credentials id for cluster
	CredentialsId *string `pulumi:"credentialsId"`
	// GCP credentials.json from ServiceAccount with credentials for CAST AI
	CredentialsJson *string `pulumi:"credentialsJson"`
	// Should CAST AI remove nodes managed by CAST.AI on disconnect
	DeleteNodesOnDisconnect *bool `pulumi:"deleteNodesOnDisconnect"`
	// GCP cluster zone in case of zonal or region in case of regional cluster
	Location *string `pulumi:"location"`
	// GKE cluster name
	Name *string `pulumi:"name"`
	// GCP project id
	ProjectId *string `pulumi:"projectId"`
	// SSHPublicKey for nodes
	SshPublicKey *string `pulumi:"sshPublicKey"`
}

type GkeClusterState struct {
	// CAST.AI agent cluster token
	ClusterToken pulumi.StringPtrInput
	// CAST AI credentials id for cluster
	CredentialsId pulumi.StringPtrInput
	// GCP credentials.json from ServiceAccount with credentials for CAST AI
	CredentialsJson pulumi.StringPtrInput
	// Should CAST AI remove nodes managed by CAST.AI on disconnect
	DeleteNodesOnDisconnect pulumi.BoolPtrInput
	// GCP cluster zone in case of zonal or region in case of regional cluster
	Location pulumi.StringPtrInput
	// GKE cluster name
	Name pulumi.StringPtrInput
	// GCP project id
	ProjectId pulumi.StringPtrInput
	// SSHPublicKey for nodes
	SshPublicKey pulumi.StringPtrInput
}

func (GkeClusterState) ElementType() reflect.Type {
	return reflect.TypeOf((*gkeClusterState)(nil)).Elem()
}

type gkeClusterArgs struct {
	// GCP credentials.json from ServiceAccount with credentials for CAST AI
	CredentialsJson *string `pulumi:"credentialsJson"`
	// Should CAST AI remove nodes managed by CAST.AI on disconnect
	DeleteNodesOnDisconnect *bool `pulumi:"deleteNodesOnDisconnect"`
	// GCP cluster zone in case of zonal or region in case of regional cluster
	Location string `pulumi:"location"`
	// GKE cluster name
	Name *string `pulumi:"name"`
	// GCP project id
	ProjectId string `pulumi:"projectId"`
	// SSHPublicKey for nodes
	SshPublicKey *string `pulumi:"sshPublicKey"`
}

// The set of arguments for constructing a GkeCluster resource.
type GkeClusterArgs struct {
	// GCP credentials.json from ServiceAccount with credentials for CAST AI
	CredentialsJson pulumi.StringPtrInput
	// Should CAST AI remove nodes managed by CAST.AI on disconnect
	DeleteNodesOnDisconnect pulumi.BoolPtrInput
	// GCP cluster zone in case of zonal or region in case of regional cluster
	Location pulumi.StringInput
	// GKE cluster name
	Name pulumi.StringPtrInput
	// GCP project id
	ProjectId pulumi.StringInput
	// SSHPublicKey for nodes
	SshPublicKey pulumi.StringPtrInput
}

func (GkeClusterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*gkeClusterArgs)(nil)).Elem()
}

type GkeClusterInput interface {
	pulumi.Input

	ToGkeClusterOutput() GkeClusterOutput
	ToGkeClusterOutputWithContext(ctx context.Context) GkeClusterOutput
}

func (*GkeCluster) ElementType() reflect.Type {
	return reflect.TypeOf((**GkeCluster)(nil)).Elem()
}

func (i *GkeCluster) ToGkeClusterOutput() GkeClusterOutput {
	return i.ToGkeClusterOutputWithContext(context.Background())
}

func (i *GkeCluster) ToGkeClusterOutputWithContext(ctx context.Context) GkeClusterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GkeClusterOutput)
}

// GkeClusterArrayInput is an input type that accepts GkeClusterArray and GkeClusterArrayOutput values.
// You can construct a concrete instance of `GkeClusterArrayInput` via:
//
//	GkeClusterArray{ GkeClusterArgs{...} }
type GkeClusterArrayInput interface {
	pulumi.Input

	ToGkeClusterArrayOutput() GkeClusterArrayOutput
	ToGkeClusterArrayOutputWithContext(context.Context) GkeClusterArrayOutput
}

type GkeClusterArray []GkeClusterInput

func (GkeClusterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GkeCluster)(nil)).Elem()
}

func (i GkeClusterArray) ToGkeClusterArrayOutput() GkeClusterArrayOutput {
	return i.ToGkeClusterArrayOutputWithContext(context.Background())
}

func (i GkeClusterArray) ToGkeClusterArrayOutputWithContext(ctx context.Context) GkeClusterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GkeClusterArrayOutput)
}

// GkeClusterMapInput is an input type that accepts GkeClusterMap and GkeClusterMapOutput values.
// You can construct a concrete instance of `GkeClusterMapInput` via:
//
//	GkeClusterMap{ "key": GkeClusterArgs{...} }
type GkeClusterMapInput interface {
	pulumi.Input

	ToGkeClusterMapOutput() GkeClusterMapOutput
	ToGkeClusterMapOutputWithContext(context.Context) GkeClusterMapOutput
}

type GkeClusterMap map[string]GkeClusterInput

func (GkeClusterMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GkeCluster)(nil)).Elem()
}

func (i GkeClusterMap) ToGkeClusterMapOutput() GkeClusterMapOutput {
	return i.ToGkeClusterMapOutputWithContext(context.Background())
}

func (i GkeClusterMap) ToGkeClusterMapOutputWithContext(ctx context.Context) GkeClusterMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GkeClusterMapOutput)
}

type GkeClusterOutput struct{ *pulumi.OutputState }

func (GkeClusterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GkeCluster)(nil)).Elem()
}

func (o GkeClusterOutput) ToGkeClusterOutput() GkeClusterOutput {
	return o
}

func (o GkeClusterOutput) ToGkeClusterOutputWithContext(ctx context.Context) GkeClusterOutput {
	return o
}

// CAST.AI agent cluster token
func (o GkeClusterOutput) ClusterToken() pulumi.StringOutput {
	return o.ApplyT(func(v *GkeCluster) pulumi.StringOutput { return v.ClusterToken }).(pulumi.StringOutput)
}

// CAST AI credentials id for cluster
func (o GkeClusterOutput) CredentialsId() pulumi.StringOutput {
	return o.ApplyT(func(v *GkeCluster) pulumi.StringOutput { return v.CredentialsId }).(pulumi.StringOutput)
}

// GCP credentials.json from ServiceAccount with credentials for CAST AI
func (o GkeClusterOutput) CredentialsJson() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GkeCluster) pulumi.StringPtrOutput { return v.CredentialsJson }).(pulumi.StringPtrOutput)
}

// Should CAST AI remove nodes managed by CAST.AI on disconnect
func (o GkeClusterOutput) DeleteNodesOnDisconnect() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *GkeCluster) pulumi.BoolPtrOutput { return v.DeleteNodesOnDisconnect }).(pulumi.BoolPtrOutput)
}

// GCP cluster zone in case of zonal or region in case of regional cluster
func (o GkeClusterOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *GkeCluster) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// GKE cluster name
func (o GkeClusterOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *GkeCluster) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// GCP project id
func (o GkeClusterOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *GkeCluster) pulumi.StringOutput { return v.ProjectId }).(pulumi.StringOutput)
}

// SSHPublicKey for nodes
func (o GkeClusterOutput) SshPublicKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GkeCluster) pulumi.StringPtrOutput { return v.SshPublicKey }).(pulumi.StringPtrOutput)
}

type GkeClusterArrayOutput struct{ *pulumi.OutputState }

func (GkeClusterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GkeCluster)(nil)).Elem()
}

func (o GkeClusterArrayOutput) ToGkeClusterArrayOutput() GkeClusterArrayOutput {
	return o
}

func (o GkeClusterArrayOutput) ToGkeClusterArrayOutputWithContext(ctx context.Context) GkeClusterArrayOutput {
	return o
}

func (o GkeClusterArrayOutput) Index(i pulumi.IntInput) GkeClusterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *GkeCluster {
		return vs[0].([]*GkeCluster)[vs[1].(int)]
	}).(GkeClusterOutput)
}

type GkeClusterMapOutput struct{ *pulumi.OutputState }

func (GkeClusterMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GkeCluster)(nil)).Elem()
}

func (o GkeClusterMapOutput) ToGkeClusterMapOutput() GkeClusterMapOutput {
	return o
}

func (o GkeClusterMapOutput) ToGkeClusterMapOutputWithContext(ctx context.Context) GkeClusterMapOutput {
	return o
}

func (o GkeClusterMapOutput) MapIndex(k pulumi.StringInput) GkeClusterOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *GkeCluster {
		return vs[0].(map[string]*GkeCluster)[vs[1].(string)]
	}).(GkeClusterOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GkeClusterInput)(nil)).Elem(), &GkeCluster{})
	pulumi.RegisterInputType(reflect.TypeOf((*GkeClusterArrayInput)(nil)).Elem(), GkeClusterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GkeClusterMapInput)(nil)).Elem(), GkeClusterMap{})
	pulumi.RegisterOutputType(GkeClusterOutput{})
	pulumi.RegisterOutputType(GkeClusterArrayOutput{})
	pulumi.RegisterOutputType(GkeClusterMapOutput{})
}
