// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package castai

import (
	"context"
	"reflect"

	"github.com/castai/pulumi-castai/sdk/go/castai/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type AllocationGroup struct {
	pulumi.CustomResourceState

	// List of CAST AI cluster ids
	ClusterIds pulumi.StringArrayOutput `pulumi:"clusterIds"`
	// Labels used to select workloads to track
	Labels pulumi.StringMapOutput `pulumi:"labels"`
	// Operator with which to connect the labels
	// 	OR (default) - workload needs to have at least one label to be included
	// 	AND - workload needs to have all the labels to be included
	LabelsOperator pulumi.StringPtrOutput `pulumi:"labelsOperator"`
	// Allocation group name
	Name pulumi.StringOutput `pulumi:"name"`
	// List of cluster namespaces to track
	Namespaces pulumi.StringArrayOutput `pulumi:"namespaces"`
}

// NewAllocationGroup registers a new resource with the given unique name, arguments, and options.
func NewAllocationGroup(ctx *pulumi.Context,
	name string, args *AllocationGroupArgs, opts ...pulumi.ResourceOption) (*AllocationGroup, error) {
	if args == nil {
		args = &AllocationGroupArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AllocationGroup
	err := ctx.RegisterResource("castai:index:AllocationGroup", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAllocationGroup gets an existing AllocationGroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAllocationGroup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AllocationGroupState, opts ...pulumi.ResourceOption) (*AllocationGroup, error) {
	var resource AllocationGroup
	err := ctx.ReadResource("castai:index:AllocationGroup", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AllocationGroup resources.
type allocationGroupState struct {
	// List of CAST AI cluster ids
	ClusterIds []string `pulumi:"clusterIds"`
	// Labels used to select workloads to track
	Labels map[string]string `pulumi:"labels"`
	// Operator with which to connect the labels
	// 	OR (default) - workload needs to have at least one label to be included
	// 	AND - workload needs to have all the labels to be included
	LabelsOperator *string `pulumi:"labelsOperator"`
	// Allocation group name
	Name *string `pulumi:"name"`
	// List of cluster namespaces to track
	Namespaces []string `pulumi:"namespaces"`
}

type AllocationGroupState struct {
	// List of CAST AI cluster ids
	ClusterIds pulumi.StringArrayInput
	// Labels used to select workloads to track
	Labels pulumi.StringMapInput
	// Operator with which to connect the labels
	// 	OR (default) - workload needs to have at least one label to be included
	// 	AND - workload needs to have all the labels to be included
	LabelsOperator pulumi.StringPtrInput
	// Allocation group name
	Name pulumi.StringPtrInput
	// List of cluster namespaces to track
	Namespaces pulumi.StringArrayInput
}

func (AllocationGroupState) ElementType() reflect.Type {
	return reflect.TypeOf((*allocationGroupState)(nil)).Elem()
}

type allocationGroupArgs struct {
	// List of CAST AI cluster ids
	ClusterIds []string `pulumi:"clusterIds"`
	// Labels used to select workloads to track
	Labels map[string]string `pulumi:"labels"`
	// Operator with which to connect the labels
	// 	OR (default) - workload needs to have at least one label to be included
	// 	AND - workload needs to have all the labels to be included
	LabelsOperator *string `pulumi:"labelsOperator"`
	// Allocation group name
	Name *string `pulumi:"name"`
	// List of cluster namespaces to track
	Namespaces []string `pulumi:"namespaces"`
}

// The set of arguments for constructing a AllocationGroup resource.
type AllocationGroupArgs struct {
	// List of CAST AI cluster ids
	ClusterIds pulumi.StringArrayInput
	// Labels used to select workloads to track
	Labels pulumi.StringMapInput
	// Operator with which to connect the labels
	// 	OR (default) - workload needs to have at least one label to be included
	// 	AND - workload needs to have all the labels to be included
	LabelsOperator pulumi.StringPtrInput
	// Allocation group name
	Name pulumi.StringPtrInput
	// List of cluster namespaces to track
	Namespaces pulumi.StringArrayInput
}

func (AllocationGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*allocationGroupArgs)(nil)).Elem()
}

type AllocationGroupInput interface {
	pulumi.Input

	ToAllocationGroupOutput() AllocationGroupOutput
	ToAllocationGroupOutputWithContext(ctx context.Context) AllocationGroupOutput
}

func (*AllocationGroup) ElementType() reflect.Type {
	return reflect.TypeOf((**AllocationGroup)(nil)).Elem()
}

func (i *AllocationGroup) ToAllocationGroupOutput() AllocationGroupOutput {
	return i.ToAllocationGroupOutputWithContext(context.Background())
}

func (i *AllocationGroup) ToAllocationGroupOutputWithContext(ctx context.Context) AllocationGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AllocationGroupOutput)
}

// AllocationGroupArrayInput is an input type that accepts AllocationGroupArray and AllocationGroupArrayOutput values.
// You can construct a concrete instance of `AllocationGroupArrayInput` via:
//
//	AllocationGroupArray{ AllocationGroupArgs{...} }
type AllocationGroupArrayInput interface {
	pulumi.Input

	ToAllocationGroupArrayOutput() AllocationGroupArrayOutput
	ToAllocationGroupArrayOutputWithContext(context.Context) AllocationGroupArrayOutput
}

type AllocationGroupArray []AllocationGroupInput

func (AllocationGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AllocationGroup)(nil)).Elem()
}

func (i AllocationGroupArray) ToAllocationGroupArrayOutput() AllocationGroupArrayOutput {
	return i.ToAllocationGroupArrayOutputWithContext(context.Background())
}

func (i AllocationGroupArray) ToAllocationGroupArrayOutputWithContext(ctx context.Context) AllocationGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AllocationGroupArrayOutput)
}

// AllocationGroupMapInput is an input type that accepts AllocationGroupMap and AllocationGroupMapOutput values.
// You can construct a concrete instance of `AllocationGroupMapInput` via:
//
//	AllocationGroupMap{ "key": AllocationGroupArgs{...} }
type AllocationGroupMapInput interface {
	pulumi.Input

	ToAllocationGroupMapOutput() AllocationGroupMapOutput
	ToAllocationGroupMapOutputWithContext(context.Context) AllocationGroupMapOutput
}

type AllocationGroupMap map[string]AllocationGroupInput

func (AllocationGroupMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AllocationGroup)(nil)).Elem()
}

func (i AllocationGroupMap) ToAllocationGroupMapOutput() AllocationGroupMapOutput {
	return i.ToAllocationGroupMapOutputWithContext(context.Background())
}

func (i AllocationGroupMap) ToAllocationGroupMapOutputWithContext(ctx context.Context) AllocationGroupMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AllocationGroupMapOutput)
}

type AllocationGroupOutput struct{ *pulumi.OutputState }

func (AllocationGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AllocationGroup)(nil)).Elem()
}

func (o AllocationGroupOutput) ToAllocationGroupOutput() AllocationGroupOutput {
	return o
}

func (o AllocationGroupOutput) ToAllocationGroupOutputWithContext(ctx context.Context) AllocationGroupOutput {
	return o
}

// List of CAST AI cluster ids
func (o AllocationGroupOutput) ClusterIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AllocationGroup) pulumi.StringArrayOutput { return v.ClusterIds }).(pulumi.StringArrayOutput)
}

// Labels used to select workloads to track
func (o AllocationGroupOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *AllocationGroup) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

// Operator with which to connect the labels
//
//	OR (default) - workload needs to have at least one label to be included
//	AND - workload needs to have all the labels to be included
func (o AllocationGroupOutput) LabelsOperator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AllocationGroup) pulumi.StringPtrOutput { return v.LabelsOperator }).(pulumi.StringPtrOutput)
}

// Allocation group name
func (o AllocationGroupOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *AllocationGroup) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// List of cluster namespaces to track
func (o AllocationGroupOutput) Namespaces() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AllocationGroup) pulumi.StringArrayOutput { return v.Namespaces }).(pulumi.StringArrayOutput)
}

type AllocationGroupArrayOutput struct{ *pulumi.OutputState }

func (AllocationGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AllocationGroup)(nil)).Elem()
}

func (o AllocationGroupArrayOutput) ToAllocationGroupArrayOutput() AllocationGroupArrayOutput {
	return o
}

func (o AllocationGroupArrayOutput) ToAllocationGroupArrayOutputWithContext(ctx context.Context) AllocationGroupArrayOutput {
	return o
}

func (o AllocationGroupArrayOutput) Index(i pulumi.IntInput) AllocationGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AllocationGroup {
		return vs[0].([]*AllocationGroup)[vs[1].(int)]
	}).(AllocationGroupOutput)
}

type AllocationGroupMapOutput struct{ *pulumi.OutputState }

func (AllocationGroupMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AllocationGroup)(nil)).Elem()
}

func (o AllocationGroupMapOutput) ToAllocationGroupMapOutput() AllocationGroupMapOutput {
	return o
}

func (o AllocationGroupMapOutput) ToAllocationGroupMapOutputWithContext(ctx context.Context) AllocationGroupMapOutput {
	return o
}

func (o AllocationGroupMapOutput) MapIndex(k pulumi.StringInput) AllocationGroupOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AllocationGroup {
		return vs[0].(map[string]*AllocationGroup)[vs[1].(string)]
	}).(AllocationGroupOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AllocationGroupInput)(nil)).Elem(), &AllocationGroup{})
	pulumi.RegisterInputType(reflect.TypeOf((*AllocationGroupArrayInput)(nil)).Elem(), AllocationGroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AllocationGroupMapInput)(nil)).Elem(), AllocationGroupMap{})
	pulumi.RegisterOutputType(AllocationGroupOutput{})
	pulumi.RegisterOutputType(AllocationGroupArrayOutput{})
	pulumi.RegisterOutputType(AllocationGroupMapOutput{})
}
