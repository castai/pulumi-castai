// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package castai

import (
	"context"
	"reflect"

	"errors"
	"github.com/cast-ai/pulumi-castai/sdk/go/castai/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// AKS cluster resource allows connecting an existing EKS cluster to CAST AI.
type AksCluster struct {
	pulumi.CustomResourceState

	// Azure AD application ID that is created and used by CAST AI.
	ClientId pulumi.StringOutput `pulumi:"clientId"`
	// Azure AD application password that will be used by CAST AI.
	ClientSecret pulumi.StringOutput `pulumi:"clientSecret"`
	// CAST AI cluster token.
	ClusterToken pulumi.StringOutput `pulumi:"clusterToken"`
	// Should CAST AI remove nodes managed by CAST.AI on disconnect.
	DeleteNodesOnDisconnect pulumi.BoolPtrOutput `pulumi:"deleteNodesOnDisconnect"`
	// AKS cluster name.
	Name pulumi.StringOutput `pulumi:"name"`
	// Azure resource group in which nodes are and will be created.
	NodeResourceGroup pulumi.StringOutput `pulumi:"nodeResourceGroup"`
	// AKS cluster region.
	Region pulumi.StringOutput `pulumi:"region"`
	// ID of the Azure subscription.
	SubscriptionId pulumi.StringOutput `pulumi:"subscriptionId"`
	// Azure AD tenant ID from the used subscription.
	TenantId pulumi.StringOutput `pulumi:"tenantId"`
}

// NewAksCluster registers a new resource with the given unique name, arguments, and options.
func NewAksCluster(ctx *pulumi.Context,
	name string, args *AksClusterArgs, opts ...pulumi.ResourceOption) (*AksCluster, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ClientId == nil {
		return nil, errors.New("invalid value for required argument 'ClientId'")
	}
	if args.ClientSecret == nil {
		return nil, errors.New("invalid value for required argument 'ClientSecret'")
	}
	if args.NodeResourceGroup == nil {
		return nil, errors.New("invalid value for required argument 'NodeResourceGroup'")
	}
	if args.Region == nil {
		return nil, errors.New("invalid value for required argument 'Region'")
	}
	if args.SubscriptionId == nil {
		return nil, errors.New("invalid value for required argument 'SubscriptionId'")
	}
	if args.TenantId == nil {
		return nil, errors.New("invalid value for required argument 'TenantId'")
	}
	if args.ClientSecret != nil {
		args.ClientSecret = pulumi.ToSecret(args.ClientSecret).(pulumi.StringInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"clientSecret",
		"clusterToken",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AksCluster
	err := ctx.RegisterResource("castai:azure:AksCluster", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAksCluster gets an existing AksCluster resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAksCluster(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AksClusterState, opts ...pulumi.ResourceOption) (*AksCluster, error) {
	var resource AksCluster
	err := ctx.ReadResource("castai:azure:AksCluster", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AksCluster resources.
type aksClusterState struct {
	// Azure AD application ID that is created and used by CAST AI.
	ClientId *string `pulumi:"clientId"`
	// Azure AD application password that will be used by CAST AI.
	ClientSecret *string `pulumi:"clientSecret"`
	// CAST AI cluster token.
	ClusterToken *string `pulumi:"clusterToken"`
	// Should CAST AI remove nodes managed by CAST.AI on disconnect.
	DeleteNodesOnDisconnect *bool `pulumi:"deleteNodesOnDisconnect"`
	// AKS cluster name.
	Name *string `pulumi:"name"`
	// Azure resource group in which nodes are and will be created.
	NodeResourceGroup *string `pulumi:"nodeResourceGroup"`
	// AKS cluster region.
	Region *string `pulumi:"region"`
	// ID of the Azure subscription.
	SubscriptionId *string `pulumi:"subscriptionId"`
	// Azure AD tenant ID from the used subscription.
	TenantId *string `pulumi:"tenantId"`
}

type AksClusterState struct {
	// Azure AD application ID that is created and used by CAST AI.
	ClientId pulumi.StringPtrInput
	// Azure AD application password that will be used by CAST AI.
	ClientSecret pulumi.StringPtrInput
	// CAST AI cluster token.
	ClusterToken pulumi.StringPtrInput
	// Should CAST AI remove nodes managed by CAST.AI on disconnect.
	DeleteNodesOnDisconnect pulumi.BoolPtrInput
	// AKS cluster name.
	Name pulumi.StringPtrInput
	// Azure resource group in which nodes are and will be created.
	NodeResourceGroup pulumi.StringPtrInput
	// AKS cluster region.
	Region pulumi.StringPtrInput
	// ID of the Azure subscription.
	SubscriptionId pulumi.StringPtrInput
	// Azure AD tenant ID from the used subscription.
	TenantId pulumi.StringPtrInput
}

func (AksClusterState) ElementType() reflect.Type {
	return reflect.TypeOf((*aksClusterState)(nil)).Elem()
}

type aksClusterArgs struct {
	// Azure AD application ID that is created and used by CAST AI.
	ClientId string `pulumi:"clientId"`
	// Azure AD application password that will be used by CAST AI.
	ClientSecret string `pulumi:"clientSecret"`
	// Should CAST AI remove nodes managed by CAST.AI on disconnect.
	DeleteNodesOnDisconnect *bool `pulumi:"deleteNodesOnDisconnect"`
	// AKS cluster name.
	Name *string `pulumi:"name"`
	// Azure resource group in which nodes are and will be created.
	NodeResourceGroup string `pulumi:"nodeResourceGroup"`
	// AKS cluster region.
	Region string `pulumi:"region"`
	// ID of the Azure subscription.
	SubscriptionId string `pulumi:"subscriptionId"`
	// Azure AD tenant ID from the used subscription.
	TenantId string `pulumi:"tenantId"`
}

// The set of arguments for constructing a AksCluster resource.
type AksClusterArgs struct {
	// Azure AD application ID that is created and used by CAST AI.
	ClientId pulumi.StringInput
	// Azure AD application password that will be used by CAST AI.
	ClientSecret pulumi.StringInput
	// Should CAST AI remove nodes managed by CAST.AI on disconnect.
	DeleteNodesOnDisconnect pulumi.BoolPtrInput
	// AKS cluster name.
	Name pulumi.StringPtrInput
	// Azure resource group in which nodes are and will be created.
	NodeResourceGroup pulumi.StringInput
	// AKS cluster region.
	Region pulumi.StringInput
	// ID of the Azure subscription.
	SubscriptionId pulumi.StringInput
	// Azure AD tenant ID from the used subscription.
	TenantId pulumi.StringInput
}

func (AksClusterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*aksClusterArgs)(nil)).Elem()
}

type AksClusterInput interface {
	pulumi.Input

	ToAksClusterOutput() AksClusterOutput
	ToAksClusterOutputWithContext(ctx context.Context) AksClusterOutput
}

func (*AksCluster) ElementType() reflect.Type {
	return reflect.TypeOf((**AksCluster)(nil)).Elem()
}

func (i *AksCluster) ToAksClusterOutput() AksClusterOutput {
	return i.ToAksClusterOutputWithContext(context.Background())
}

func (i *AksCluster) ToAksClusterOutputWithContext(ctx context.Context) AksClusterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AksClusterOutput)
}

// AksClusterArrayInput is an input type that accepts AksClusterArray and AksClusterArrayOutput values.
// You can construct a concrete instance of `AksClusterArrayInput` via:
//
//	AksClusterArray{ AksClusterArgs{...} }
type AksClusterArrayInput interface {
	pulumi.Input

	ToAksClusterArrayOutput() AksClusterArrayOutput
	ToAksClusterArrayOutputWithContext(context.Context) AksClusterArrayOutput
}

type AksClusterArray []AksClusterInput

func (AksClusterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AksCluster)(nil)).Elem()
}

func (i AksClusterArray) ToAksClusterArrayOutput() AksClusterArrayOutput {
	return i.ToAksClusterArrayOutputWithContext(context.Background())
}

func (i AksClusterArray) ToAksClusterArrayOutputWithContext(ctx context.Context) AksClusterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AksClusterArrayOutput)
}

// AksClusterMapInput is an input type that accepts AksClusterMap and AksClusterMapOutput values.
// You can construct a concrete instance of `AksClusterMapInput` via:
//
//	AksClusterMap{ "key": AksClusterArgs{...} }
type AksClusterMapInput interface {
	pulumi.Input

	ToAksClusterMapOutput() AksClusterMapOutput
	ToAksClusterMapOutputWithContext(context.Context) AksClusterMapOutput
}

type AksClusterMap map[string]AksClusterInput

func (AksClusterMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AksCluster)(nil)).Elem()
}

func (i AksClusterMap) ToAksClusterMapOutput() AksClusterMapOutput {
	return i.ToAksClusterMapOutputWithContext(context.Background())
}

func (i AksClusterMap) ToAksClusterMapOutputWithContext(ctx context.Context) AksClusterMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AksClusterMapOutput)
}

type AksClusterOutput struct{ *pulumi.OutputState }

func (AksClusterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AksCluster)(nil)).Elem()
}

func (o AksClusterOutput) ToAksClusterOutput() AksClusterOutput {
	return o
}

func (o AksClusterOutput) ToAksClusterOutputWithContext(ctx context.Context) AksClusterOutput {
	return o
}

// Azure AD application ID that is created and used by CAST AI.
func (o AksClusterOutput) ClientId() pulumi.StringOutput {
	return o.ApplyT(func(v *AksCluster) pulumi.StringOutput { return v.ClientId }).(pulumi.StringOutput)
}

// Azure AD application password that will be used by CAST AI.
func (o AksClusterOutput) ClientSecret() pulumi.StringOutput {
	return o.ApplyT(func(v *AksCluster) pulumi.StringOutput { return v.ClientSecret }).(pulumi.StringOutput)
}

// CAST AI cluster token.
func (o AksClusterOutput) ClusterToken() pulumi.StringOutput {
	return o.ApplyT(func(v *AksCluster) pulumi.StringOutput { return v.ClusterToken }).(pulumi.StringOutput)
}

// Should CAST AI remove nodes managed by CAST.AI on disconnect.
func (o AksClusterOutput) DeleteNodesOnDisconnect() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AksCluster) pulumi.BoolPtrOutput { return v.DeleteNodesOnDisconnect }).(pulumi.BoolPtrOutput)
}

// AKS cluster name.
func (o AksClusterOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *AksCluster) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Azure resource group in which nodes are and will be created.
func (o AksClusterOutput) NodeResourceGroup() pulumi.StringOutput {
	return o.ApplyT(func(v *AksCluster) pulumi.StringOutput { return v.NodeResourceGroup }).(pulumi.StringOutput)
}

// AKS cluster region.
func (o AksClusterOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *AksCluster) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// ID of the Azure subscription.
func (o AksClusterOutput) SubscriptionId() pulumi.StringOutput {
	return o.ApplyT(func(v *AksCluster) pulumi.StringOutput { return v.SubscriptionId }).(pulumi.StringOutput)
}

// Azure AD tenant ID from the used subscription.
func (o AksClusterOutput) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v *AksCluster) pulumi.StringOutput { return v.TenantId }).(pulumi.StringOutput)
}

type AksClusterArrayOutput struct{ *pulumi.OutputState }

func (AksClusterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AksCluster)(nil)).Elem()
}

func (o AksClusterArrayOutput) ToAksClusterArrayOutput() AksClusterArrayOutput {
	return o
}

func (o AksClusterArrayOutput) ToAksClusterArrayOutputWithContext(ctx context.Context) AksClusterArrayOutput {
	return o
}

func (o AksClusterArrayOutput) Index(i pulumi.IntInput) AksClusterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AksCluster {
		return vs[0].([]*AksCluster)[vs[1].(int)]
	}).(AksClusterOutput)
}

type AksClusterMapOutput struct{ *pulumi.OutputState }

func (AksClusterMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AksCluster)(nil)).Elem()
}

func (o AksClusterMapOutput) ToAksClusterMapOutput() AksClusterMapOutput {
	return o
}

func (o AksClusterMapOutput) ToAksClusterMapOutputWithContext(ctx context.Context) AksClusterMapOutput {
	return o
}

func (o AksClusterMapOutput) MapIndex(k pulumi.StringInput) AksClusterOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AksCluster {
		return vs[0].(map[string]*AksCluster)[vs[1].(string)]
	}).(AksClusterOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AksClusterInput)(nil)).Elem(), &AksCluster{})
	pulumi.RegisterInputType(reflect.TypeOf((*AksClusterArrayInput)(nil)).Elem(), AksClusterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AksClusterMapInput)(nil)).Elem(), AksClusterMap{})
	pulumi.RegisterOutputType(AksClusterOutput{})
	pulumi.RegisterOutputType(AksClusterArrayOutput{})
	pulumi.RegisterOutputType(AksClusterMapOutput{})
}
