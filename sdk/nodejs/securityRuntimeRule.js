"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.SecurityRuntimeRule = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
class SecurityRuntimeRule extends pulumi.CustomResource {
    /**
     * Get an existing SecurityRuntimeRule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new SecurityRuntimeRule(name, state, { ...opts, id: id });
    }
    /**
     * Returns true if the given object is an instance of SecurityRuntimeRule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SecurityRuntimeRule.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["anomaliesCount"] = state?.anomaliesCount;
            resourceInputs["category"] = state?.category;
            resourceInputs["enabled"] = state?.enabled;
            resourceInputs["isBuiltIn"] = state?.isBuiltIn;
            resourceInputs["labels"] = state?.labels;
            resourceInputs["name"] = state?.name;
            resourceInputs["resourceSelector"] = state?.resourceSelector;
            resourceInputs["ruleEngineType"] = state?.ruleEngineType;
            resourceInputs["ruleText"] = state?.ruleText;
            resourceInputs["severity"] = state?.severity;
            resourceInputs["type"] = state?.type;
            resourceInputs["usedCustomLists"] = state?.usedCustomLists;
        }
        else {
            const args = argsOrState;
            if (args?.ruleText === undefined && !opts.urn) {
                throw new Error("Missing required property 'ruleText'");
            }
            if (args?.severity === undefined && !opts.urn) {
                throw new Error("Missing required property 'severity'");
            }
            resourceInputs["category"] = args?.category;
            resourceInputs["enabled"] = args?.enabled;
            resourceInputs["labels"] = args?.labels;
            resourceInputs["name"] = args?.name;
            resourceInputs["resourceSelector"] = args?.resourceSelector;
            resourceInputs["ruleEngineType"] = args?.ruleEngineType;
            resourceInputs["ruleText"] = args?.ruleText;
            resourceInputs["severity"] = args?.severity;
            resourceInputs["anomaliesCount"] = undefined /*out*/;
            resourceInputs["isBuiltIn"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
            resourceInputs["usedCustomLists"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SecurityRuntimeRule.__pulumiType, name, resourceInputs, opts);
    }
}
exports.SecurityRuntimeRule = SecurityRuntimeRule;
/** @internal */
SecurityRuntimeRule.__pulumiType = 'castai:index:SecurityRuntimeRule';
//# sourceMappingURL=securityRuntimeRule.js.map