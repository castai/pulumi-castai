"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.WorkloadScalingPolicy = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
class WorkloadScalingPolicy extends pulumi.CustomResource {
    /**
     * Get an existing WorkloadScalingPolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new WorkloadScalingPolicy(name, state, { ...opts, id: id });
    }
    /**
     * Returns true if the given object is an instance of WorkloadScalingPolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === WorkloadScalingPolicy.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["antiAffinity"] = state?.antiAffinity;
            resourceInputs["applyType"] = state?.applyType;
            resourceInputs["assignmentRules"] = state?.assignmentRules;
            resourceInputs["clusterId"] = state?.clusterId;
            resourceInputs["confidence"] = state?.confidence;
            resourceInputs["cpu"] = state?.cpu;
            resourceInputs["downscaling"] = state?.downscaling;
            resourceInputs["managementOption"] = state?.managementOption;
            resourceInputs["memory"] = state?.memory;
            resourceInputs["memoryEvent"] = state?.memoryEvent;
            resourceInputs["name"] = state?.name;
            resourceInputs["predictiveScaling"] = state?.predictiveScaling;
            resourceInputs["rolloutBehavior"] = state?.rolloutBehavior;
            resourceInputs["startup"] = state?.startup;
        }
        else {
            const args = argsOrState;
            if (args?.applyType === undefined && !opts.urn) {
                throw new Error("Missing required property 'applyType'");
            }
            if (args?.clusterId === undefined && !opts.urn) {
                throw new Error("Missing required property 'clusterId'");
            }
            if (args?.cpu === undefined && !opts.urn) {
                throw new Error("Missing required property 'cpu'");
            }
            if (args?.managementOption === undefined && !opts.urn) {
                throw new Error("Missing required property 'managementOption'");
            }
            if (args?.memory === undefined && !opts.urn) {
                throw new Error("Missing required property 'memory'");
            }
            resourceInputs["antiAffinity"] = args?.antiAffinity;
            resourceInputs["applyType"] = args?.applyType;
            resourceInputs["assignmentRules"] = args?.assignmentRules;
            resourceInputs["clusterId"] = args?.clusterId;
            resourceInputs["confidence"] = args?.confidence;
            resourceInputs["cpu"] = args?.cpu;
            resourceInputs["downscaling"] = args?.downscaling;
            resourceInputs["managementOption"] = args?.managementOption;
            resourceInputs["memory"] = args?.memory;
            resourceInputs["memoryEvent"] = args?.memoryEvent;
            resourceInputs["name"] = args?.name;
            resourceInputs["predictiveScaling"] = args?.predictiveScaling;
            resourceInputs["rolloutBehavior"] = args?.rolloutBehavior;
            resourceInputs["startup"] = args?.startup;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(WorkloadScalingPolicy.__pulumiType, name, resourceInputs, opts);
    }
}
exports.WorkloadScalingPolicy = WorkloadScalingPolicy;
/** @internal */
WorkloadScalingPolicy.__pulumiType = 'castai:workload:WorkloadScalingPolicy';
//# sourceMappingURL=workloadScalingPolicy.js.map