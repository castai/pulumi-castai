"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.NodeTemplate = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
class NodeTemplate extends pulumi.CustomResource {
    /**
     * Get an existing NodeTemplate resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new NodeTemplate(name, state, { ...opts, id: id });
    }
    /**
     * Returns true if the given object is an instance of NodeTemplate.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === NodeTemplate.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["clmEnabled"] = state?.clmEnabled;
            resourceInputs["clusterId"] = state?.clusterId;
            resourceInputs["configurationId"] = state?.configurationId;
            resourceInputs["constraints"] = state?.constraints;
            resourceInputs["customInstancesEnabled"] = state?.customInstancesEnabled;
            resourceInputs["customInstancesWithExtendedMemoryEnabled"] = state?.customInstancesWithExtendedMemoryEnabled;
            resourceInputs["customLabels"] = state?.customLabels;
            resourceInputs["customTaints"] = state?.customTaints;
            resourceInputs["gpu"] = state?.gpu;
            resourceInputs["isDefault"] = state?.isDefault;
            resourceInputs["isEnabled"] = state?.isEnabled;
            resourceInputs["name"] = state?.name;
            resourceInputs["rebalancingConfigMinNodes"] = state?.rebalancingConfigMinNodes;
            resourceInputs["shouldTaint"] = state?.shouldTaint;
        }
        else {
            const args = argsOrState;
            resourceInputs["clmEnabled"] = args?.clmEnabled;
            resourceInputs["clusterId"] = args?.clusterId;
            resourceInputs["configurationId"] = args?.configurationId;
            resourceInputs["constraints"] = args?.constraints;
            resourceInputs["customInstancesEnabled"] = args?.customInstancesEnabled;
            resourceInputs["customInstancesWithExtendedMemoryEnabled"] = args?.customInstancesWithExtendedMemoryEnabled;
            resourceInputs["customLabels"] = args?.customLabels;
            resourceInputs["customTaints"] = args?.customTaints;
            resourceInputs["gpu"] = args?.gpu;
            resourceInputs["isDefault"] = args?.isDefault;
            resourceInputs["isEnabled"] = args?.isEnabled;
            resourceInputs["name"] = args?.name;
            resourceInputs["rebalancingConfigMinNodes"] = args?.rebalancingConfigMinNodes;
            resourceInputs["shouldTaint"] = args?.shouldTaint;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(NodeTemplate.__pulumiType, name, resourceInputs, opts);
    }
}
exports.NodeTemplate = NodeTemplate;
/** @internal */
NodeTemplate.__pulumiType = 'castai:config/node:NodeTemplate';
//# sourceMappingURL=nodeTemplate.js.map