"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.types = exports.rebalancing = exports.config = exports.WorkloadScalingPolicyOrder = exports.WorkloadScalingPolicy = exports.SSOConnection = exports.ServiceAccountKey = exports.ServiceAccount = exports.SecurityRuntimeRule = exports.RoleBindings = exports.Reservations = exports.RebalancingSchedule = exports.RebalancingJob = exports.OrganizationMembers = exports.OrganizationGroup = exports.HibernationSchedule = exports.GkeClusterId = exports.GkeCluster = exports.getWorkloadScalingPolicyOrderDataSourceOutput = exports.getWorkloadScalingPolicyOrderDataSource = exports.getRebalancingScheduleDataSourceOutput = exports.getRebalancingScheduleDataSource = exports.getOrganizationDataSourceOutput = exports.getOrganizationDataSource = exports.getHibernationScheduleDataSourceOutput = exports.getHibernationScheduleDataSource = exports.getGkePoliciesDataSourceOutput = exports.getGkePoliciesDataSource = exports.getEksUserArnDataSourceOutput = exports.getEksUserArnDataSource = exports.getEksSettingsDataSourceOutput = exports.getEksSettingsDataSource = exports.EvictorAdvancedConfig = exports.EnterpriseRoleBinding = exports.EnterpriseGroup = exports.EksUserArn = exports.EksClusterId = exports.EksCluster = exports.Commitments = exports.Autoscaler = exports.AllocationGroup = exports.AksCluster = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
exports.AksCluster = null;
utilities.lazyLoad(exports, ["AksCluster"], () => require("./aksCluster"));
exports.AllocationGroup = null;
utilities.lazyLoad(exports, ["AllocationGroup"], () => require("./allocationGroup"));
exports.Autoscaler = null;
utilities.lazyLoad(exports, ["Autoscaler"], () => require("./autoscaler"));
exports.Commitments = null;
utilities.lazyLoad(exports, ["Commitments"], () => require("./commitments"));
exports.EksCluster = null;
utilities.lazyLoad(exports, ["EksCluster"], () => require("./eksCluster"));
exports.EksClusterId = null;
utilities.lazyLoad(exports, ["EksClusterId"], () => require("./eksClusterId"));
exports.EksUserArn = null;
utilities.lazyLoad(exports, ["EksUserArn"], () => require("./eksUserArn"));
exports.EnterpriseGroup = null;
utilities.lazyLoad(exports, ["EnterpriseGroup"], () => require("./enterpriseGroup"));
exports.EnterpriseRoleBinding = null;
utilities.lazyLoad(exports, ["EnterpriseRoleBinding"], () => require("./enterpriseRoleBinding"));
exports.EvictorAdvancedConfig = null;
utilities.lazyLoad(exports, ["EvictorAdvancedConfig"], () => require("./evictorAdvancedConfig"));
exports.getEksSettingsDataSource = null;
exports.getEksSettingsDataSourceOutput = null;
utilities.lazyLoad(exports, ["getEksSettingsDataSource", "getEksSettingsDataSourceOutput"], () => require("./getEksSettingsDataSource"));
exports.getEksUserArnDataSource = null;
exports.getEksUserArnDataSourceOutput = null;
utilities.lazyLoad(exports, ["getEksUserArnDataSource", "getEksUserArnDataSourceOutput"], () => require("./getEksUserArnDataSource"));
exports.getGkePoliciesDataSource = null;
exports.getGkePoliciesDataSourceOutput = null;
utilities.lazyLoad(exports, ["getGkePoliciesDataSource", "getGkePoliciesDataSourceOutput"], () => require("./getGkePoliciesDataSource"));
exports.getHibernationScheduleDataSource = null;
exports.getHibernationScheduleDataSourceOutput = null;
utilities.lazyLoad(exports, ["getHibernationScheduleDataSource", "getHibernationScheduleDataSourceOutput"], () => require("./getHibernationScheduleDataSource"));
exports.getOrganizationDataSource = null;
exports.getOrganizationDataSourceOutput = null;
utilities.lazyLoad(exports, ["getOrganizationDataSource", "getOrganizationDataSourceOutput"], () => require("./getOrganizationDataSource"));
exports.getRebalancingScheduleDataSource = null;
exports.getRebalancingScheduleDataSourceOutput = null;
utilities.lazyLoad(exports, ["getRebalancingScheduleDataSource", "getRebalancingScheduleDataSourceOutput"], () => require("./getRebalancingScheduleDataSource"));
exports.getWorkloadScalingPolicyOrderDataSource = null;
exports.getWorkloadScalingPolicyOrderDataSourceOutput = null;
utilities.lazyLoad(exports, ["getWorkloadScalingPolicyOrderDataSource", "getWorkloadScalingPolicyOrderDataSourceOutput"], () => require("./getWorkloadScalingPolicyOrderDataSource"));
exports.GkeCluster = null;
utilities.lazyLoad(exports, ["GkeCluster"], () => require("./gkeCluster"));
exports.GkeClusterId = null;
utilities.lazyLoad(exports, ["GkeClusterId"], () => require("./gkeClusterId"));
exports.HibernationSchedule = null;
utilities.lazyLoad(exports, ["HibernationSchedule"], () => require("./hibernationSchedule"));
exports.OrganizationGroup = null;
utilities.lazyLoad(exports, ["OrganizationGroup"], () => require("./organizationGroup"));
exports.OrganizationMembers = null;
utilities.lazyLoad(exports, ["OrganizationMembers"], () => require("./organizationMembers"));
__exportStar(require("./provider"), exports);
const provider_1 = require("./provider");
exports.RebalancingJob = null;
utilities.lazyLoad(exports, ["RebalancingJob"], () => require("./rebalancingJob"));
exports.RebalancingSchedule = null;
utilities.lazyLoad(exports, ["RebalancingSchedule"], () => require("./rebalancingSchedule"));
exports.Reservations = null;
utilities.lazyLoad(exports, ["Reservations"], () => require("./reservations"));
exports.RoleBindings = null;
utilities.lazyLoad(exports, ["RoleBindings"], () => require("./roleBindings"));
exports.SecurityRuntimeRule = null;
utilities.lazyLoad(exports, ["SecurityRuntimeRule"], () => require("./securityRuntimeRule"));
exports.ServiceAccount = null;
utilities.lazyLoad(exports, ["ServiceAccount"], () => require("./serviceAccount"));
exports.ServiceAccountKey = null;
utilities.lazyLoad(exports, ["ServiceAccountKey"], () => require("./serviceAccountKey"));
exports.SSOConnection = null;
utilities.lazyLoad(exports, ["SSOConnection"], () => require("./ssoconnection"));
exports.WorkloadScalingPolicy = null;
utilities.lazyLoad(exports, ["WorkloadScalingPolicy"], () => require("./workloadScalingPolicy"));
exports.WorkloadScalingPolicyOrder = null;
utilities.lazyLoad(exports, ["WorkloadScalingPolicyOrder"], () => require("./workloadScalingPolicyOrder"));
// Export sub-modules:
const config = require("./config");
exports.config = config;
const rebalancing = require("./rebalancing");
exports.rebalancing = rebalancing;
const types = require("./types");
exports.types = types;
const _module = {
    version: utilities.getVersion(),
    construct: (name, type, urn) => {
        switch (type) {
            case "castai:autoscaling:Autoscaler":
                return new exports.Autoscaler(name, undefined, { urn });
            case "castai:autoscaling:EvictorAdvancedConfig":
                return new exports.EvictorAdvancedConfig(name, undefined, { urn });
            case "castai:aws:EksCluster":
                return new exports.EksCluster(name, undefined, { urn });
            case "castai:aws:EksClusterId":
                return new exports.EksClusterId(name, undefined, { urn });
            case "castai:aws:EksUserArn":
                return new exports.EksUserArn(name, undefined, { urn });
            case "castai:azure:AksCluster":
                return new exports.AksCluster(name, undefined, { urn });
            case "castai:gcp:GkeCluster":
                return new exports.GkeCluster(name, undefined, { urn });
            case "castai:gcp:GkeClusterId":
                return new exports.GkeClusterId(name, undefined, { urn });
            case "castai:iam:EnterpriseRoleBinding":
                return new exports.EnterpriseRoleBinding(name, undefined, { urn });
            case "castai:iam:RoleBindings":
                return new exports.RoleBindings(name, undefined, { urn });
            case "castai:index:AllocationGroup":
                return new exports.AllocationGroup(name, undefined, { urn });
            case "castai:index:Commitments":
                return new exports.Commitments(name, undefined, { urn });
            case "castai:index:Reservations":
                return new exports.Reservations(name, undefined, { urn });
            case "castai:index:SecurityRuntimeRule":
                return new exports.SecurityRuntimeRule(name, undefined, { urn });
            case "castai:organization:EnterpriseGroup":
                return new exports.EnterpriseGroup(name, undefined, { urn });
            case "castai:organization:OrganizationGroup":
                return new exports.OrganizationGroup(name, undefined, { urn });
            case "castai:organization:OrganizationMembers":
                return new exports.OrganizationMembers(name, undefined, { urn });
            case "castai:organization:SSOConnection":
                return new exports.SSOConnection(name, undefined, { urn });
            case "castai:organization:ServiceAccount":
                return new exports.ServiceAccount(name, undefined, { urn });
            case "castai:organization:ServiceAccountKey":
                return new exports.ServiceAccountKey(name, undefined, { urn });
            case "castai:rebalancing:HibernationSchedule":
                return new exports.HibernationSchedule(name, undefined, { urn });
            case "castai:rebalancing:RebalancingJob":
                return new exports.RebalancingJob(name, undefined, { urn });
            case "castai:rebalancing:RebalancingSchedule":
                return new exports.RebalancingSchedule(name, undefined, { urn });
            case "castai:workload:WorkloadScalingPolicy":
                return new exports.WorkloadScalingPolicy(name, undefined, { urn });
            case "castai:workload:WorkloadScalingPolicyOrder":
                return new exports.WorkloadScalingPolicyOrder(name, undefined, { urn });
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("castai", "autoscaling", _module);
pulumi.runtime.registerResourceModule("castai", "aws", _module);
pulumi.runtime.registerResourceModule("castai", "azure", _module);
pulumi.runtime.registerResourceModule("castai", "gcp", _module);
pulumi.runtime.registerResourceModule("castai", "iam", _module);
pulumi.runtime.registerResourceModule("castai", "index", _module);
pulumi.runtime.registerResourceModule("castai", "organization", _module);
pulumi.runtime.registerResourceModule("castai", "rebalancing", _module);
pulumi.runtime.registerResourceModule("castai", "workload", _module);
pulumi.runtime.registerResourcePackage("castai", {
    version: utilities.getVersion(),
    constructProvider: (name, type, urn) => {
        if (type !== "pulumi:providers:castai") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new provider_1.Provider(name, undefined, { urn });
    },
});
//# sourceMappingURL=index.js.map