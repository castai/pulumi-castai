"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.types = exports.config = exports.Provider = exports.GkeCluster = exports.getGkePoliciesDataSourceOutput = exports.getGkePoliciesDataSource = exports.getEksUserArnDataSourceOutput = exports.getEksUserArnDataSource = exports.getEksSettingsDataSourceOutput = exports.getEksSettingsDataSource = exports.getEksClusterIdDataSourceOutput = exports.getEksClusterIdDataSource = exports.getCredentialsDataSourceOutput = exports.getCredentialsDataSource = exports.getClusterDataSourceOutput = exports.getClusterDataSource = exports.EksCluster = exports.Credentials = exports.ClusterToken = exports.Cluster = exports.Autoscaler = exports.AksCluster = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
exports.AksCluster = null;
utilities.lazyLoad(exports, ["AksCluster"], () => require("./aksCluster"));
exports.Autoscaler = null;
utilities.lazyLoad(exports, ["Autoscaler"], () => require("./autoscaler"));
exports.Cluster = null;
utilities.lazyLoad(exports, ["Cluster"], () => require("./cluster"));
exports.ClusterToken = null;
utilities.lazyLoad(exports, ["ClusterToken"], () => require("./clusterToken"));
exports.Credentials = null;
utilities.lazyLoad(exports, ["Credentials"], () => require("./credentials"));
exports.EksCluster = null;
utilities.lazyLoad(exports, ["EksCluster"], () => require("./eksCluster"));
exports.getClusterDataSource = null;
exports.getClusterDataSourceOutput = null;
utilities.lazyLoad(exports, ["getClusterDataSource", "getClusterDataSourceOutput"], () => require("./getClusterDataSource"));
exports.getCredentialsDataSource = null;
exports.getCredentialsDataSourceOutput = null;
utilities.lazyLoad(exports, ["getCredentialsDataSource", "getCredentialsDataSourceOutput"], () => require("./getCredentialsDataSource"));
exports.getEksClusterIdDataSource = null;
exports.getEksClusterIdDataSourceOutput = null;
utilities.lazyLoad(exports, ["getEksClusterIdDataSource", "getEksClusterIdDataSourceOutput"], () => require("./getEksClusterIdDataSource"));
exports.getEksSettingsDataSource = null;
exports.getEksSettingsDataSourceOutput = null;
utilities.lazyLoad(exports, ["getEksSettingsDataSource", "getEksSettingsDataSourceOutput"], () => require("./getEksSettingsDataSource"));
exports.getEksUserArnDataSource = null;
exports.getEksUserArnDataSourceOutput = null;
utilities.lazyLoad(exports, ["getEksUserArnDataSource", "getEksUserArnDataSourceOutput"], () => require("./getEksUserArnDataSource"));
exports.getGkePoliciesDataSource = null;
exports.getGkePoliciesDataSourceOutput = null;
utilities.lazyLoad(exports, ["getGkePoliciesDataSource", "getGkePoliciesDataSourceOutput"], () => require("./getGkePoliciesDataSource"));
exports.GkeCluster = null;
utilities.lazyLoad(exports, ["GkeCluster"], () => require("./gkeCluster"));
exports.Provider = null;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));
// Export sub-modules:
const config = require("./config");
exports.config = config;
const types = require("./types");
exports.types = types;
const _module = {
    version: utilities.getVersion(),
    construct: (name, type, urn) => {
        switch (type) {
            case "castai:autoscaling:Autoscaler":
                return new exports.Autoscaler(name, undefined, { urn });
            case "castai:aws:EksCluster":
                return new exports.EksCluster(name, undefined, { urn });
            case "castai:azure:AksCluster":
                return new exports.AksCluster(name, undefined, { urn });
            case "castai:gcp:GkeCluster":
                return new exports.GkeCluster(name, undefined, { urn });
            case "castai:index:Cluster":
                return new exports.Cluster(name, undefined, { urn });
            case "castai:index:ClusterToken":
                return new exports.ClusterToken(name, undefined, { urn });
            case "castai:index:Credentials":
                return new exports.Credentials(name, undefined, { urn });
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("castai", "autoscaling", _module);
pulumi.runtime.registerResourceModule("castai", "aws", _module);
pulumi.runtime.registerResourceModule("castai", "azure", _module);
pulumi.runtime.registerResourceModule("castai", "gcp", _module);
pulumi.runtime.registerResourceModule("castai", "index", _module);
pulumi.runtime.registerResourcePackage("castai", {
    version: utilities.getVersion(),
    constructProvider: (name, type, urn) => {
        if (type !== "pulumi:providers:castai") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new exports.Provider(name, undefined, { urn });
    },
});
//# sourceMappingURL=index.js.map