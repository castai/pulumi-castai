"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.EksCluster = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
/**
 * EKS cluster resource allows connecting an existing EKS cluster to CAST AI.
 */
class EksCluster extends pulumi.CustomResource {
    /**
     * Get an existing EksCluster resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new EksCluster(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of EksCluster.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === EksCluster.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["accessKeyId"] = state ? state.accessKeyId : undefined;
            resourceInputs["accountId"] = state ? state.accountId : undefined;
            resourceInputs["agentToken"] = state ? state.agentToken : undefined;
            resourceInputs["assumeRoleArn"] = state ? state.assumeRoleArn : undefined;
            resourceInputs["credentialsId"] = state ? state.credentialsId : undefined;
            resourceInputs["deleteNodesOnDisconnect"] = state ? state.deleteNodesOnDisconnect : undefined;
            resourceInputs["dnsClusterIp"] = state ? state.dnsClusterIp : undefined;
            resourceInputs["instanceProfileArn"] = state ? state.instanceProfileArn : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["overrideSecurityGroups"] = state ? state.overrideSecurityGroups : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["secretAccessKey"] = state ? state.secretAccessKey : undefined;
            resourceInputs["securityGroups"] = state ? state.securityGroups : undefined;
            resourceInputs["sshPublicKey"] = state ? state.sshPublicKey : undefined;
            resourceInputs["subnets"] = state ? state.subnets : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.accountId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'accountId'");
            }
            if ((!args || args.region === undefined) && !opts.urn) {
                throw new Error("Missing required property 'region'");
            }
            resourceInputs["accessKeyId"] = (args === null || args === void 0 ? void 0 : args.accessKeyId) ? pulumi.secret(args.accessKeyId) : undefined;
            resourceInputs["accountId"] = args ? args.accountId : undefined;
            resourceInputs["assumeRoleArn"] = args ? args.assumeRoleArn : undefined;
            resourceInputs["deleteNodesOnDisconnect"] = args ? args.deleteNodesOnDisconnect : undefined;
            resourceInputs["dnsClusterIp"] = args ? args.dnsClusterIp : undefined;
            resourceInputs["instanceProfileArn"] = args ? args.instanceProfileArn : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["overrideSecurityGroups"] = args ? args.overrideSecurityGroups : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["secretAccessKey"] = (args === null || args === void 0 ? void 0 : args.secretAccessKey) ? pulumi.secret(args.secretAccessKey) : undefined;
            resourceInputs["sshPublicKey"] = args ? args.sshPublicKey : undefined;
            resourceInputs["subnets"] = args ? args.subnets : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["agentToken"] = undefined /*out*/;
            resourceInputs["credentialsId"] = undefined /*out*/;
            resourceInputs["securityGroups"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["accessKeyId", "agentToken", "secretAccessKey"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(EksCluster.__pulumiType, name, resourceInputs, opts);
    }
}
exports.EksCluster = EksCluster;
/** @internal */
EksCluster.__pulumiType = 'castai:aws:EksCluster';
//# sourceMappingURL=eksCluster.js.map