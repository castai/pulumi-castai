name: Release and Publish
on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to publish (without v prefix, leave empty for auto-bump)'
        required: false
        default: ''


env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
  NUGET_AUTH_TOKEN: ${{ secrets.NUGET_TOKEN }}
  PYPI_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
  PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}

jobs:
  publish:
    name: Publish
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18.x'
          registry-url: 'https://registry.npmjs.org'

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.22.x'
          check-latest: true

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install Pulumi CLI
        run: |
          curl -fsSL https://get.pulumi.com | sh
          export PATH=$PATH:$HOME/.pulumi/bin
          echo "$HOME/.pulumi/bin" >> $GITHUB_PATH

      - name: Get Version
        id: get-version
        run: |
          CURRENT_VERSION=$(cat version.txt)
          echo "CURRENT_VERSION=$CURRENT_VERSION" >> $GITHUB_ENV

          # Check if this is a tag push or manual trigger
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            echo "Running from tag push"
            TAG_VERSION=${GITHUB_REF#refs/tags/v}
            echo "TAG_VERSION=$TAG_VERSION" >> $GITHUB_ENV
            IS_TAG=true

            # Auto-bump patch version for next release
            IFS='.' read -r MAJOR MINOR PATCH <<< "$TAG_VERSION"
            NEXT_PATCH=$((PATCH + 1))
            NEXT_VERSION="$MAJOR.$MINOR.$NEXT_PATCH"
            echo "NEXT_VERSION=$NEXT_VERSION" >> $GITHUB_ENV

            # Use the tag version for this release
            VERSION="$TAG_VERSION"
          elif [[ -n "${{ github.event.inputs.version }}" ]]; then
            echo "Running from manual trigger with specified version"
            VERSION="${{ github.event.inputs.version }}"
            echo "TAG_VERSION=$VERSION" >> $GITHUB_ENV
            IS_TAG=true

            # Calculate next version
            IFS='.' read -r MAJOR MINOR PATCH <<< "$VERSION"
            NEXT_PATCH=$((PATCH + 1))
            NEXT_VERSION="$MAJOR.$MINOR.$NEXT_PATCH"
            echo "NEXT_VERSION=$NEXT_VERSION" >> $GITHUB_ENV
          else
            echo "Running from manual trigger with auto-bump"
            # Auto-bump patch version
            IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT_VERSION"
            PATCH=$((PATCH + 1))
            VERSION="$MAJOR.$MINOR.$PATCH"
            echo "TAG_VERSION=$VERSION" >> $GITHUB_ENV
            IS_TAG=true

            # Calculate next version
            NEXT_PATCH=$((PATCH + 1))
            NEXT_VERSION="$MAJOR.$MINOR.$NEXT_PATCH"
            echo "NEXT_VERSION=$NEXT_VERSION" >> $GITHUB_ENV
          fi

          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "IS_TAG=$IS_TAG" >> $GITHUB_ENV
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Verify and Update Version
        run: ./scripts/verify_and_update_version.sh "$VERSION" "$TAG_VERSION" "$CURRENT_VERSION" "$NEXT_VERSION" "$GITHUB_REF" "$IS_TAG" "${{ secrets.GITHUB_TOKEN }}"
        env:
          MANUAL_VERSION: "${{ github.event.inputs.version }}"
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Build Provider
        run: |
          # Debug Go installation
          which go || echo "Go not found"
          go version || echo "Go version command failed"

          # Make sure GO is in the path
          export PATH=$PATH:$(go env GOPATH)/bin
          echo "$PATH" >> $GITHUB_PATH

          # Build the provider
          make provider

      - name: Build SDKs
        run: make build_sdks

      - name: Create Release Assets
        run: |
          mkdir -p release/
          # Only create a release asset for the current platform (Linux)
          FILENAME=pulumi-resource-castai-v${VERSION}-linux-amd64.tar.gz
          tar -czf release/${FILENAME} -C bin pulumi-resource-castai

          # For a complete provider, you would need to build for all platforms
          # This would require cross-compilation or using GitHub Actions matrix

      - name: Create GitHub Release
        id: create-release
        uses: softprops/action-gh-release@v1
        with:
          files: release/*
          draft: false
          prerelease: false
          tag_name: v${{ env.VERSION }}
          body: |
            # CAST AI Provider v${{ env.VERSION }}

            This release includes the latest updates to the CAST AI Pulumi provider.

            ## Installation

            ### TypeScript/JavaScript
            ```bash
            npm install @castai/pulumi
            ```

            ### Python
            ```bash
            pip install pulumi-castai
            ```

            ### Go
            ```bash
            go get github.com/castai/pulumi-castai/sdk/go/castai@v${{ env.VERSION }}
            ```

            ## Next Version
            A PR has been automatically created to bump the version to ${{ env.NEXT_VERSION }} for the next release.

      - name: Publish Node.js Package
        run: |
          cd sdk/nodejs
          # Make sure package.json has the correct name (@castai/pulumi) and version
          sed -i 's/"@pulumi\/castai"/"@castai\/pulumi"/g' package.json
          sed -i 's/"\${VERSION}"/"${{ env.VERSION }}"/g' package.json
          cat package.json

          # Check if the version already exists
          if [[ "$PACKAGE_EXISTS" == "true" ]]; then
            echo "Version ${{ env.VERSION }} already exists in npm registry. Skipping publish."
          else
            npm publish --access public
          fi
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Publish Python Package
        run: ./scripts/update_python_version.sh "$VERSION" "${{ secrets.PYPI_PASSWORD }}"
        env:
          PYPI_PASSWORD: ${{ secrets.PYPI_PASSWORD }}

      - name: Publish Go Package
        run: ./scripts/publish_go_package.sh "$VERSION"

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '6.0.x'

      - name: Build .NET SDK
        run: ./scripts/build_dotnet_sdk.sh "$VERSION"

      - name: Publish .NET Package
        run: ./scripts/publish_dotnet_package.sh "$VERSION" "${{ secrets.NUGET_TOKEN }}"
        env:
          NUGET_AUTH_TOKEN: ${{ secrets.NUGET_TOKEN }}

