name: Release and Publish
on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to publish (without v prefix, leave empty for auto-bump)'
        required: false
        default: ''


env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
  NUGET_AUTH_TOKEN: ${{ secrets.NUGET_TOKEN }}
  PYPI_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
  PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}

jobs:
  # First job to determine version and update version files
  prepare:
    name: Prepare Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get-version.outputs.version }}
      next_version: ${{ env.NEXT_VERSION }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Get Version
        id: get-version
        run: |
          CURRENT_VERSION=$(cat version.txt)
          echo "CURRENT_VERSION=$CURRENT_VERSION" >> $GITHUB_ENV

          # Check if this is a tag push or manual trigger
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            echo "Running from tag push"
            TAG_VERSION=${GITHUB_REF#refs/tags/v}
            echo "TAG_VERSION=$TAG_VERSION" >> $GITHUB_ENV
            IS_TAG=true

            # Auto-bump patch version for next release
            IFS='.' read -r MAJOR MINOR PATCH <<< "$TAG_VERSION"
            NEXT_PATCH=$((PATCH + 1))
            NEXT_VERSION="$MAJOR.$MINOR.$NEXT_PATCH"
            echo "NEXT_VERSION=$NEXT_VERSION" >> $GITHUB_ENV

            # Use the tag version for this release
            VERSION="$TAG_VERSION"
          elif [[ -n "${{ github.event.inputs.version }}" ]]; then
            echo "Running from manual trigger with specified version"
            VERSION="${{ github.event.inputs.version }}"
            echo "TAG_VERSION=$VERSION" >> $GITHUB_ENV
            IS_TAG=true

            # Calculate next version
            IFS='.' read -r MAJOR MINOR PATCH <<< "$VERSION"
            NEXT_PATCH=$((PATCH + 1))
            NEXT_VERSION="$MAJOR.$MINOR.$NEXT_PATCH"
            echo "NEXT_VERSION=$NEXT_VERSION" >> $GITHUB_ENV
          else
            echo "Running from manual trigger with auto-bump"
            # Auto-bump patch version
            IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT_VERSION"
            PATCH=$((PATCH + 1))
            VERSION="$MAJOR.$MINOR.$PATCH"
            echo "TAG_VERSION=$VERSION" >> $GITHUB_ENV
            IS_TAG=true

            # Calculate next version
            NEXT_PATCH=$((PATCH + 1))
            NEXT_VERSION="$MAJOR.$MINOR.$NEXT_PATCH"
            echo "NEXT_VERSION=$NEXT_VERSION" >> $GITHUB_ENV
          fi

          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "IS_TAG=$IS_TAG" >> $GITHUB_ENV
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Verify and Update Version
        run: ./scripts/verify_and_update_version.sh "$VERSION" "$TAG_VERSION" "$CURRENT_VERSION" "$NEXT_VERSION" "$GITHUB_REF" "$IS_TAG" "${{ secrets.GITHUB_TOKEN }}"
        env:
          MANUAL_VERSION: "${{ github.event.inputs.version }}"
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Build provider binaries for all supported architectures
  build-provider:
    name: Build Provider for ${{ matrix.os }}-${{ matrix.arch }}
    needs: prepare
    runs-on: ubuntu-latest
    strategy:
      matrix:
        os: [darwin, linux, windows]
        arch: [amd64, arm64]
        exclude:
          # Exclude Windows ARM64 as it's not a requested target
          - os: windows
            arch: arm64
    env:
      VERSION: ${{ needs.prepare.outputs.version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.22.x'
          check-latest: true

      - name: Install Pulumi CLI
        run: |
          curl -fsSL https://get.pulumi.com | sh
          export PATH=$PATH:$HOME/.pulumi/bin
          echo "$HOME/.pulumi/bin" >> $GITHUB_PATH

      - name: Set up environment for cross-compilation
        run: |
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "GOOS=${{ matrix.os }}" >> $GITHUB_ENV
          echo "GOARCH=${{ matrix.arch }}" >> $GITHUB_ENV

          # Set file extension for Windows
          if [[ "${{ matrix.os }}" == "windows" ]]; then
            echo "BINARY_EXT=.exe" >> $GITHUB_ENV
          else
            echo "BINARY_EXT=" >> $GITHUB_ENV
          fi

      - name: Fix version placeholders
        run: |
          # Fix version placeholder in resources.go and version.go
          echo "Fixing version placeholders..."
          find ./provider -type f -name "*.go" -exec sed -i 's/__VERSION__/${VERSION}/g' {} \;

          # Run go mod tidy in the provider directory first
          cd provider && go mod tidy

      - name: Build Provider Binary
        run: |
          # Debug Go installation
          which go || echo "Go not found"
          go version || echo "Go version command failed"

          # Make sure GO is in the path
          export PATH=$PATH:$(go env GOPATH)/bin
          echo "$PATH" >> $GITHUB_PATH

          # Build the provider with cross-compilation
          echo "Building provider for $GOOS-$GOARCH..."
          cd provider/cmd/pulumi-resource-castai && \
          GOOS=$GOOS GOARCH=$GOARCH go build -o $(pwd)/../../../bin/pulumi-resource-castai${BINARY_EXT} \
          -ldflags "-X github.com/cast-ai/pulumi-castai/provider/pkg/version.Version=${VERSION}"

      # For Linux amd64 only, also build the tfgen binary needed for SDK generation
      - name: Build tfgen binary (Linux amd64 only)
        if: matrix.os == 'linux' && matrix.arch == 'amd64'
        run: |
          echo "Building tfgen binary for SDK generation..."
          cd provider/cmd/pulumi-tfgen-castai && \
          go build -o $(pwd)/../../../bin/pulumi-tfgen-castai \
          -ldflags "-X github.com/cast-ai/pulumi-castai/provider/pkg/version.Version=${VERSION}"

          # Create a separate artifact for the tfgen binary
          mkdir -p tfgen-release/
          tar -czf tfgen-release/pulumi-tfgen-castai-v${VERSION}.tar.gz -C $(pwd)/../../../bin pulumi-tfgen-castai

      - name: Upload tfgen binary (Linux amd64 only)
        if: matrix.os == 'linux' && matrix.arch == 'amd64'
        uses: actions/upload-artifact@v4
        with:
          name: tfgen-binary
          path: tfgen-release/
          retention-days: 1

      - name: Create Release Asset
        run: |
          mkdir -p release/
          FILENAME=pulumi-resource-castai-v${VERSION}-${{ matrix.os }}-${{ matrix.arch }}.tar.gz

          # For Windows, use zip instead of tar
          if [[ "${{ matrix.os }}" == "windows" ]]; then
            FILENAME=pulumi-resource-castai-v${VERSION}-${{ matrix.os }}-${{ matrix.arch }}.zip
            zip -j release/${FILENAME} bin/pulumi-resource-castai${BINARY_EXT}
          else
            tar -czf release/${FILENAME} -C bin pulumi-resource-castai${BINARY_EXT}
          fi

          echo "Created release asset: ${FILENAME}"

      - name: Upload Release Asset
        uses: actions/upload-artifact@v4
        with:
          name: provider-${{ matrix.os }}-${{ matrix.arch }}
          path: release/
          retention-days: 1

  # Build SDKs and publish packages
  publish:
    name: Publish SDKs and Release
    needs: [prepare, build-provider]
    runs-on: ubuntu-latest
    env:
      VERSION: ${{ needs.prepare.outputs.version }}
      NEXT_VERSION: ${{ needs.prepare.outputs.next_version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18.x'
          registry-url: 'https://registry.npmjs.org'

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.22.x'
          check-latest: true

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'

      - name: Install Pulumi CLI
        run: |
          curl -fsSL https://get.pulumi.com | sh
          export PATH=$PATH:$HOME/.pulumi/bin
          echo "$HOME/.pulumi/bin" >> $GITHUB_PATH

      - name: Download All Release Assets
        uses: actions/download-artifact@v4
        with:
          path: release-artifacts/

      - name: Prepare for SDK generation
        run: |
          # Fix version placeholder in resources.go and version.go
          echo "Fixing version placeholders..."
          find ./provider -type f -name "*.go" -exec sed -i 's/__VERSION__/${VERSION}/g' {} \;

          # Create bin directory if it doesn't exist
          mkdir -p bin

          # We'll use the linux-amd64 build for SDK generation
          # This is just for generating the SDKs, not for the final release assets
          echo "Using linux-amd64 build for SDK generation..."

      - name: Extract tfgen binary for SDK generation
        run: |
          # Extract the tfgen binary from the artifact
          echo "Extracting tfgen binary for SDK generation..."
          if [ -f "release-artifacts/tfgen-binary/pulumi-tfgen-castai-v${VERSION}.tar.gz" ]; then
            tar -xzf release-artifacts/tfgen-binary/pulumi-tfgen-castai-v${VERSION}.tar.gz -C bin/
            chmod +x bin/pulumi-tfgen-castai
            echo "tfgen binary extracted successfully."
            ls -la bin/
          else
            echo "Warning: tfgen binary not found. SDK generation might fail."
            ls -la release-artifacts/
          fi

      - name: Build SDKs
        run: make build_sdks

      - name: Prepare Release Assets
        run: |
          mkdir -p release/
          cp -r release-artifacts/*/* release/

          # Extract the linux-amd64 binary if needed
          if [ ! -f "bin/pulumi-resource-castai" ] && [ -f "release-artifacts/provider-linux-amd64/pulumi-resource-castai-v${VERSION}-linux-amd64.tar.gz" ]; then
            echo "Extracting linux-amd64 binary as backup..."
            tar -xzf release-artifacts/provider-linux-amd64/pulumi-resource-castai-v${VERSION}-linux-amd64.tar.gz -C bin/
            chmod +x bin/pulumi-resource-castai
            echo "Binary extracted successfully."
          fi

          ls -la release/

      - name: Create GitHub Release
        id: create-release
        uses: softprops/action-gh-release@v1
        with:
          files: release/*
          draft: false
          prerelease: false
          tag_name: v${{ env.VERSION }}
          body: |
            # CAST AI Provider v${{ env.VERSION }}

            This release includes the latest updates to the CAST AI Pulumi provider.

            ## Supported Architectures
            - darwin-amd64
            - darwin-arm64
            - linux-amd64
            - linux-arm64
            - windows-amd64

            ## Installation

            ### TypeScript/JavaScript
            ```bash
            npm install @castai/pulumi
            ```

            ### Python
            ```bash
            pip install pulumi-castai
            ```

            ### Go
            ```bash
            go get github.com/castai/pulumi-castai/sdk/go/castai@v${{ env.VERSION }}
            ```

            ## Next Version
            A PR has been automatically created to bump the version to ${{ env.NEXT_VERSION }} for the next release.

      - name: Publish Node.js Package
        run: |
          cd sdk/nodejs
          # Make sure package.json has the correct name (@castai/pulumi) and version
          sed -i 's/"@pulumi\/castai"/"@castai\/pulumi"/g' package.json
          sed -i 's/"\${VERSION}"/"${{ env.VERSION }}"/g' package.json
          cat package.json

          # Check if the version already exists
          if [[ "$PACKAGE_EXISTS" == "true" ]]; then
            echo "Version ${{ env.VERSION }} already exists in npm registry. Skipping publish."
          else
            npm publish --access public
          fi
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Publish Python Package
        run: ./scripts/update_python_version.sh "$VERSION" "${{ secrets.PYPI_PASSWORD }}"
        env:
          PYPI_PASSWORD: ${{ secrets.PYPI_PASSWORD }}

      - name: Publish Go Package
        run: ./scripts/publish_go_package.sh "$VERSION"

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '6.0.x'

      - name: Build .NET SDK
        run: make build_dotnet

      - name: Publish .NET Package
        run: make publish_dotnet
        env:
          NUGET_AUTH_TOKEN: ${{ secrets.NUGET_TOKEN }}

